Attribute VB_Name = "Module1"
Option Explicit
Private Declare Sub DisableProcessWindowsGhosting Lib "user32" ()
Public Interrupted As Boolean
Dim NoOptimum As Boolean
Public Declare Function SelectClipRgn Lib "gdi32" (ByVal hDC As Long, ByVal hRgn As Long) As Long
Public UseEsc As Boolean
' 1 to 32 for layers
' 0 for DIS
' 33 for Back
Public Const DisForm = 0
Public Const BackForm = -1
Public Const PrinterPage = -2
Public players(-2 To 32) As basket  ' tag number not actual number of dsprite()
Private Declare Function GdiFlush Lib "gdi32" () As Long
Public m_bInIDE As Boolean
Public UKEY$
Public TestShowCode As Boolean, TestShowSub As String, TestShowStart As Long
Public feedback$, FeedbackExec$, feednow$ ' for about$
Global Const VerMajor = 8
Global Const VerMinor = 0
Global Const Revision = 151
Private Const doc = "Document"
Public UserCodePage As Long
Public cLine As String  ' it was public in form1
Public casesensitive As Boolean  ' for files
Public userfiles As String
Public TweakLang As Long
Public notweak As Boolean
Public extreme As Boolean
Public taskmainonly As Boolean
Public TaskMain As Boolean
Global Const gintMAX_SIZE& = 255                        'Maximum buffer size
Global Const gstrSEP_DIR$ = "\"
Global DIALOGSHOW As Boolean
' Directory separator character
Public HelpStack As New basetask ' from 6.5.1
Public Const gstrSEP_URLDIR$ = "/"
Public REFRESHRATE As Double
Public RRCOUNTER As Double
Public BLOCKkey As Boolean
Public Const novalidstr = "+-/*!?_()[]&$#@;" & """"

Public tempList2delete As String
Public nnn$, basickey$, homepage$
Private Const LOCALE_SENGLANGUAGE& = 4097
Private Const LOCALE_SLANGUAGE& = &H2 '  localized name of language
Public shortlang As Boolean
Public LEVCOLMENU As Long
 Declare Function ExpandEnvironmentStrings _
   Lib "kernel32" Alias "ExpandEnvironmentStringsA" _
   (ByVal lpSrc As String, ByVal lpDst As String, _
   ByVal nsize As Long) As Long
Private Declare Function GetTempFileNameW Lib "kernel32" _
    (ByVal lpszPath As Long, ByVal lpPrefixString As Long, _
     ByVal wUnique As Long, ByVal lpTempFileName As Long) _
     As Long
     
Private Const UNIQUE_NAME = &H0
Public taskid As Long, kill2$, para$
Private Declare Function timeGetTime Lib "winmm.dll" () As Long
Public sRec As Object
Public defFontname As String
Private pnum As Long
Public my_system As Enum_OperatingPlatform
Public Declare Function Beeper Lib "kernel32" Alias "Beep" _
  (ByVal dwFreq As Long, ByVal dwDuration As Long) As Long
Private oprinter As New cDIBSection
Const MAX_FILENAME_LEN As Long = 260 * 2 - 1
Public beeperBEAT As Long
Public funcdeep As Double
Private deep As Double
Private mys As String
Private Declare Function WinExec Lib "kernel32" (ByVal lpCmdLine As String, ByVal nCmdShow As Long) As Long
Public needset As Boolean
Public cnt As Boolean
Public exWnd As Long

Public Declare Function GetForegroundWindow Lib "user32" () As Long
Public Declare Function FindExecutable Lib "shell32.dll" Alias "FindExecutableW" (ByVal lpFile As Long, ByVal lpDirectory As Long, ByVal lpResult As Long) As Long
Public expl As Long

Public l_complete As Boolean
Public s_complete As Boolean
Public ThereIsAPrinter As Boolean
Public MOUT As Boolean
Public DXP As Long
Public DYP As Long
Public SLOW As Boolean
Public pname As String
Public port As String

Public FKey As Long
Public FK$(1 To 13)
Public strTemp As String
Public STEXIT As Boolean
Public STbyST As Boolean
Public STq As Boolean
Public pagio$, pagiohtml$
Public subHash As New sbHash
Public varhash As New Hash

Public cLid As Long 'current id for app id

''
Public basestack1 As New basetask ' this is the global stack
Public sb2used As Long
Public Type modfun
    sb As String
    sbc As Long
    sbgroup As String
End Type
Private sbf() As modfun
Public var2used As Long
Private var() As Variant

Public FLEN(512) As Long
Public Uni(512) As Boolean
Public globalstack As New mStiva

Public IERUN As Boolean
Public IEX As Long
Public IEY As Long
Public IESizeX As Long
Public IESizeY As Long
Public AVIRUN As Boolean
Public AVIUP As Boolean
Public aviX As Long
Public aviY As Long
Public UseAviXY As Boolean
Public UseAviSize As Boolean
Public AviSizeX As Long
Public AviSizeY As Long
Public mycoder As New coder
' play music
Public voices$(0 To 15), BEATS(0 To 15) As Double



Const GFSR_SYSTEMRESOURCES = 0
Const GFSR_GDIRESOURCES = 1
Const GFSR_USERRESOURCES = 2
Declare Function MessageBeep Lib "user32" (ByVal wType As Long) As Long


Declare Function SetLocaleInfo Lib "kernel32" Alias "SetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String) As Long
Declare Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, lpLCData As String, ByVal cchData As Long) As Long
Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathW" (ByVal nBufferLength As Long, ByVal lpBuffer As Long) As Long
Public Declare Function GetWindowsDirectory Lib "kernel32" Alias "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nsize As Long) As Long


Private Const LOCALE_USER_DEFAULT = 0

Private Const LOCALE_SDECIMAL = &HE
Private Const LOCALE_SGROUPING = &H10
Private Const LOCALE_STHOUSAND = &HF
Private Const LOCALE_SMONDECIMALSEP = &H16
Private Const LOCALE_SMONTHOUSANDSEP = &H17
Private Const LOCALE_SMONGROUPING = &H18
Public trace As Boolean
Const CSIDL_DESKTOP = &H0
Const CSIDL_PROGRAMS = &H2
Const CSIDL_CONTROLS = &H3
Const CSIDL_PRINTERS = &H4
Const CSIDL_PERSONAL = &H5
Const CSIDL_FAVORITES = &H6
Const CSIDL_STARTUP = &H7
Const CSIDL_RECENT = &H8
Const CSIDL_SENDTO = &H9
Const CSIDL_BITBUCKET = &HA
Const CSIDL_STARTMENU = &HB
Const CSIDL_DESKTOPDIRECTORY = &H10
Const CSIDL_DRIVES = &H11
Const CSIDL_NETWORK = &H12
Const CSIDL_NETHOOD = &H13
Public Const CSIDL_FONTS = &H14

Const CSIDL_TEMPLATES = &H15
Const MAX_PATH = 260
Private Type SHITEMID
    cb As Long
    abID As Byte
End Type
Private Type ITEMIDLIST
    mkid As SHITEMID
End Type
Private Declare Function SHGetSpecialFolderLocation Lib "shell32.dll" (ByVal hWndOwner As Long, ByVal nFolder As Long, pidl As ITEMIDLIST) As Long
Private Declare Function SHGetPathFromIDList Lib "shell32.dll" Alias "SHGetPathFromIDListA" (ByVal pidl As Long, ByVal pszPath As String) As Long

Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)

Public Declare Function SetTimer Lib "user32" _
       (ByVal hWnd As Long, ByVal nIDEvent As Long, _
        ByVal uElapse As Long, ByVal lpTimerFunc As Long) As Long

Public Declare Sub KillTimer Lib "user32" _
       (ByVal hWnd As Long, ByVal nIDEvent As Long)
''Public Type tagInitCommonControlsEx
 ''  lngSize As Long
  '' lngICC As Long
''End Type
''Public Declare Function InitCommonControlsEx Lib "comctl32.dll" (iccex As tagInitCommonControlsEx) As Boolean
''Public Const ICC_USEREX_CLASSES = &H200
' APPLICATION TASK MASTER
Public MasterTimer As Double
Public TaskMaster As TaskMaster
Public Declare Function midiOutClose Lib "winmm.dll" (ByVal hMidiOut As Long) As Long
Public Declare Function midiOutOpen Lib "winmm.dll" (lphMidiOut As Long, ByVal uDeviceID As Long, ByVal dwCallback As Long, ByVal dwInstance As Long, ByVal dwFlags As Long) As Long
Public Declare Function midiOutShortMsg Lib "winmm.dll" (ByVal hMidiOut As Long, ByVal dwMsg As Long) As Long
Public hmidi As Long
Public mute As Boolean
Public beat As Long
Public baseNote As Long
Public prof As New clsProfiler
Public grandscr As Collection
Public Declare Function GetACP Lib "kernel32" () As Long  ' 1253 in my computer

Public Declare Function GetLocaleInfoW Lib "kernel32" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As Long, ByVal cchData As Long) As Long
Private Declare Function GetKeyboardLayout& Lib "user32" (ByVal dwLayout&) ' not NT?
Private Const DWL_ANYTHREAD& = 0
Const LOCALE_ILANGUAGE = 1
'Valid dwCmpFlags
Private Declare Function LCMapStringW Lib "kernel32.dll" (ByVal Locale As Long, ByVal dwMapFlags As Long, ByVal lpSrcStr As Long, ByVal cchSrc As Long, Optional ByVal lpDestStr As Long, Optional ByVal cchDest As Long) As Long
Private Declare Function SysReAllocStringLen Lib "oleaut32.dll" (ByVal pBSTR As Long, Optional ByVal pszStrPtr As Long, Optional ByVal Length As Long) As Long

Function enthesi(bstack As basetask, rest$) As String
'first is the string "label {0} other {1}
Dim counter As Long, pat$, final$, pat1$, pl1 As Long, pl2 As Long
Dim q$, p As Double, P1 As Double, pd$
If IsStrExp(bstack, rest$, final$) Then
  If FastSymbol(rest$, ",") Then
    Do
    pl2 = 1
        pat$ = "{" + CStr(counter)
       pat1$ = pat$ + ":"
        pat$ = pat$ + "}"
        If IsStrExp(bstack, rest$, q$) Then
            final$ = Replace$(final$, pat$, q$)
            If Not FastSymbol(rest$, ",") Then Exit Do
        ElseIf IsExp(bstack, rest$, p) Then
again1:
        pl2 = InStr(pl2, final$, pat1$)
        If pl2 > 0 Then
        pl1 = InStr(pl2, final$, "}")
        P1 = Val("0" + Mid$(final$, pl2 + Len(pat1$)))
        If P1 < 0 Then P1 = 22
        If P1 > 22 Then P1 = 22
      pd$ = CStr(MyRound(p, P1))
      If InStr(pd$, "E") > 0 Or InStr(pd$, "e") > 0 Then '' we can change e to greek å
      pd$ = Format$(p, "#." + String$(P1, "#") + "E+####")
      End If
            final$ = Replace$(final$, Mid$(final$, pl2, pl1 - pl2 + 1), pd$)
            GoTo again1
        Else
            final$ = Replace$(final$, pat$, CStr(p))
            End If
            If Not FastSymbol(rest$, ",") Then Exit Do
        Else
            Exit Do
        End If
        counter = counter + 1
    Loop
    End If
End If
enthesi = final$
End Function
Public Function kUpper(a$, p As Double) As String
'idea from Bonnie West, FROM VBFORUMS
Dim nsize As Long
    nsize = Len(a$)
    If nsize Then SysReAllocStringLen VarPtr(kUpper), , nsize Else Exit Function
    Const LCMAP_UPPERCASE = &H200&
Dim mLid As Long
If p = 0 Then
mLid = cLid
Else
mLid = p
End If
If p = 1032 Then
If osnum >= System_Windows_Vista Then a$ = Replace(a$, "ò", "Ó")
Dim I As Long
For I = 1 To Len(a$)
Select Case AscW(Mid$(a$, I, 1))
Case 902
Mid$(a$, I, 1) = ChrW(913)
Case 904
Mid$(a$, I, 1) = ChrW(917)
Case 906
Mid$(a$, I, 1) = ChrW(921)
Case 912
Mid$(a$, I, 1) = ChrW(921)
Case 905
Mid$(a$, I, 1) = ChrW(919)
Case 908
Mid$(a$, I, 1) = ChrW(927)
Case 911
Mid$(a$, I, 1) = ChrW(937)
Case 910
Mid$(a$, I, 1) = ChrW(933)
Case 940
Mid$(a$, I, 1) = ChrW(913)
Case 941
Mid$(a$, I, 1) = ChrW(917)
Case 943
Mid$(a$, I, 1) = ChrW(921)
Case 942
Mid$(a$, I, 1) = ChrW(919)
Case 972
Mid$(a$, I, 1) = ChrW(927)
Case 974
Mid$(a$, I, 1) = ChrW(937)
Case 973
Mid$(a$, I, 1) = ChrW(933)
Case 962
If osnum >= System_Windows_Vista Then
Mid$(a$, I, 1) = ChrW(963)
Else
Mid$(a$, I, 1) = ChrW(931)
End If
End Select

Next I
End If
    nsize = LCMapStringW(mLid, LCMAP_UPPERCASE, StrPtr(a$), nsize, StrPtr(kUpper), nsize)
End Function

Public Function kUpper2(a$, p As Double) As String
'idea from Bonnie West, FROM VBFORUMS
Dim nsize As Long
    nsize = Len(a$)
    If nsize Then SysReAllocStringLen VarPtr(kUpper2), , nsize Else Exit Function
    Const LCMAP_UPPERCASE = &H200&
Dim mLid As Long
If p = 0 Then
mLid = cLid
Else
mLid = p
End If
If p = 1032 Then
''If osnum >= System_Windows_Vista Then a$ = Replace(a$, "ò", "Ó")
Dim I As Long
For I = 1 To Len(a$)
 Select Case AscW(Mid$(a$, I, 1))
Case 902
Mid$(a$, I, 1) = ChrW(913)
Case 904
Mid$(a$, I, 1) = ChrW(917)
Case 906
Mid$(a$, I, 1) = ChrW(921)
Case 912
Mid$(a$, I, 1) = ChrW(921)
Case 905
Mid$(a$, I, 1) = ChrW(919)
Case 908
Mid$(a$, I, 1) = ChrW(927)
Case 911
Mid$(a$, I, 1) = ChrW(937)
Case 910
Mid$(a$, I, 1) = ChrW(933)
Case 940
Mid$(a$, I, 1) = ChrW(913)
Case 941
Mid$(a$, I, 1) = ChrW(917)
Case 943
Mid$(a$, I, 1) = ChrW(921)
Case 942
Mid$(a$, I, 1) = ChrW(919)
Case 972
Mid$(a$, I, 1) = ChrW(927)
Case 974
Mid$(a$, I, 1) = ChrW(937)
Case 973
Mid$(a$, I, 1) = ChrW(933)
Case 962
Mid$(a$, I, 1) = ChrW(931)
End Select
Next I


End If
    nsize = LCMapStringW(mLid, LCMAP_UPPERCASE, StrPtr(a$), nsize, StrPtr(kUpper2), nsize)
End Function
Public Function klower(a$, p As Double) As String
Const LCMAP_LOWERCASE As Long = &H100
Dim nsize As Long
    nsize = Len(a$)
    If nsize Then SysReAllocStringLen VarPtr(klower), , nsize Else Exit Function

Dim mLid As Long
If p = 0 Then
mLid = cLid
Else
mLid = p
End If
nsize = LCMapStringW(mLid, LCMAP_LOWERCASE, StrPtr(a$), nsize, StrPtr(klower), nsize)
If p = 1032 Then
a$ = a$ & Chr(0)
a$ = Replace(a$, "ó" & Chr(0), "ò")
a$ = Replace(a$, Chr(0), "")
a$ = Replace(a$, "ó ", "ò ")
a$ = Replace(a$, "ó$", "ò$")
a$ = Replace(a$, "ó&", "ò&")
a$ = Replace(a$, "ó.", "ò.")
a$ = Replace(a$, "ó(", "ò(")
a$ = Replace(a$, "ó_", "ò_")
a$ = Replace(a$, "ó/", "ò/")
a$ = Replace(a$, "ó\", "ò\")
a$ = Replace(a$, "ó-", "ò-")
a$ = Replace(a$, "ó+", "ò+")
a$ = Replace(a$, "ó*", "ò*")
a$ = Replace(a$, "ó" & vbCr, "ò" & vbCr)
a$ = Replace(a$, "ó" & vbLf, "ò" & vbLf)


End If
klower = a$
End Function



Public Function GetSpecialfolder(CSIDL As Long) As String
    Dim r As Long
    Dim IDL As ITEMIDLIST, NOERROR As Long, path$
    'Get the special folder
    r = SHGetSpecialFolderLocation(100, CSIDL, IDL)
    If r = NOERROR Then
        'Create a buffer
        path$ = Space$(512)
        'Get the path from the IDList
        r = SHGetPathFromIDList(ByVal IDL.mkid.cb, ByVal path$)
        'Remove the unnecessary chr$(0)'s
        GetSpecialfolder = mylcasefILE(Left$(path, InStr(path, Chr$(0)) - 1))
        Exit Function
    End If
    GetSpecialfolder = ""
End Function
Sub MakeArray(basestack As basetask, frm$, o As Long, rest$, pppp As mArray, Optional lcl As Boolean = False, Optional globalonly As Boolean = False) 'global
Dim p As Double, x As Double, I As Long, f As Long, s$
If MaybeIsSymbol(rest$, ")") Then rest$ = "0" + rest$
    Select Case o
    Case 5, 6, 7
    If lcl Then
    
      GlobalArr basestack, HERE$ & "." + basestack.GroupName & frm$, rest$, I, f, True
    Else
    GlobalArr basestack, basestack.GroupName & frm$, rest$, I, f, True
    End If
    p = I
    If I < 0 Then o = 0
    Case Else
    o = 0
    End Select

    
    Select Case o
    Case 5
        x = 0
      If FastSymbol(rest$, "=") Then
    If IsExp(basestack, rest$, x) Then
    
    If neoGetArray(basestack, frm$, pppp, , globalonly, Not lcl) Then   '' basestack.GroupName & f
         If Not basestack.LastObj Is Nothing Then
                                If Typename(basestack.LastObj) = "Group" Then
                                Set pppp.GroupRef = basestack.LastObj
                                 pppp.IHaveClass = True
                                Set basestack.LastObj = Nothing
                                pppp.SerialItem 0, 0, 3
                                End If
     Else
            pppp.SerialItem x, 0, 3
    End If
    End If
    Else
    o = 0
    End If
    End If

    Case 7
    x = 0
    If FastSymbol(rest$, "=") Then
    If IsExp(basestack, rest$, x) Then
   If neoGetArray(basestack, frm$, pppp, , Not lcl) Then  '' basestack.GroupName &
    pppp.SerialItem Int(x), 0, 3
    End If
    Else
    o = 0
    End If
    End If
    Case 6
        s$ = ""
    If FastSymbol(rest$, "=") Then
    If IsStrExp(basestack, rest$, s$) Then
   If neoGetArray(basestack, frm$, pppp, , Not lcl) Then ''basestack.GroupName &
    pppp.SerialItem s$, 0, 3
    End If
    Else
    o = 0
    End If
    End If
    End Select
    If o = 0 Then
      MyEr "Array dimensions missing ", "Ï ðßíáêáò äåí Ý÷åé äéáóôÜóåéò "
    rest$ = basestack.GroupName & frm$ & rest$
    End If
End Sub

Function MaybeIsSymbol2(a$, c$) As Boolean
'NO CASE DEDECT
Dim I As Long, j As Long
''If a$ = "" Then Exit Function
Dim b() As Byte  ' 2 bytes
Dim d() As Byte
''copy one time
b() = a$
d() = " "
For I = 0 To UBound(b()) - 1 Step 2
If d(0) <> b(I) Or Not b(I + 1) = 0 Then Exit For
Next I

d() = c$
If d(1) <> 0 Then
Do While j < UBound(d()) And I < UBound(b())
If d(j) = b(I) Then
I = I + 1: j = j + 1
Else
I = 0  ' do nothing
Exit Do
End If
Loop
Else
Do While j < UBound(d()) And I < UBound(b())
If d(j) = b(I) Then
I = I + 2: j = j + 2
Else
I = 0  ' do nothing
Exit Do
End If
Loop
End If
If I > 0 Then a$ = Mid$(a$, I \ 2)
If j >= UBound(d()) Then
MaybeIsSymbol2 = True
End If
End Function

Sub MyMode(scr As Object)
Dim x1 As Long, y1 As Long
On Error Resume Next
With players(GetCode(scr))
    x1 = scr.Width
    y1 = scr.Height
    If scr.name = "Form1" Then
    DisableTargets q(), -1
    
    ElseIf scr.name = "DIS" Then
    DisableTargets q(), 0
    
    ElseIf scr.name = "dSprite" Then
    DisableTargets q(), Val(scr.Index)
    End If

    If .SZ < 4 Then .SZ = 4
        Err.clear
        scr.Font.Size = .SZ
        If Err.Number > 0 Then
                MYFONT = "ARIAL"
                scr.Font.name = MYFONT
                scr.Font.charset = .charset
                scr.Font.name = MYFONT
                scr.Font.charset = .charset
        End If
        .uMineLineSpace = .MineLineSpace
        FrameText scr, .SZ, x1, y1, .Paper
    .currow = 0
    .curpos = 0
    .XGRAPH = 0
    .YGRAPH = 0
End With
End Sub

Function ProcSave(basestack As basetask, rest$, lang As Long) As Boolean
Dim pa$, w$, s$, col As Long, prg$, x1 As Long, par As Boolean, I As Long
On Error Resume Next
If lckfrm <> 0 Then MyEr "Save is locked", "Ç áðïèÞêåõóç åßíáé êëåéäùìÝíç": rest$ = "": Exit Function

x1 = Abs(IsLabelBig(basestack, rest$, pa$, , s$))

If x1 <> 1 Then
rest$ = pa$ + rest$: x1 = IsStrExp(basestack, rest$, pa$)
Else
pa$ = s$: s$ = ""
End If

If x1 <> 0 Then
        If subHash.Count = 0 Or pa$ = "" Then MyEr "Nothing to save", "Äåí õðÜñ÷åé êÜôé íá óþóù":              Exit Function
        If ExtractType(pa$) = "gsb" Then pa$ = ExtractPath(pa$) + ExtractNameOnly(pa$)
        If ExtractPath(pa$) <> "" Then
                If InStr(ExtractPath(pa$), mcd) <> 1 Then pa$ = pa$ & ".gsb" Else pa$ = pa$ & ".gsb"
        Else
                pa$ = mcd + pa$ & ".gsb"
        End If
        If Not WeCanWrite(pa$) Then Exit Function
        
''        Do While IsString(basestack, w$, s$)
        For I = 0 To subHash.Count - 1
        subHash.ReadVar I, s$, col
                If Right$(s$, 2) = "()" Then
                s$ = Left$(s$, Len(s$) - 2)
                
                If Right$(sbf(col).sb, 2) <> vbCrLf Then sbf(col).sb = sbf(col).sb + vbCrLf
                If lang Then
                        If Not blockCheck(sbf(col).sb, DialogLang, "Function " & s$ + "()" + vbCrLf) Then Exit Function
                                prg$ = "FUNCTION " & s$ & " {" & sbf(col).sb & "}" & vbCrLf + prg$
                        Else
                                If Not blockCheck(sbf(col).sb, DialogLang, "ÓõíÜñôçóç " & s$ + "()" + vbCrLf) Then Exit Function
                                prg$ = "ÓÕÍÁÑÔÇÓÇ " & s$ & " {" & sbf(col).sb & "}" & vbCrLf + prg$
                        End If
                Else
                        If Right$(sbf(col).sb, 2) <> vbCrLf Then sbf(col).sb = sbf(col).sb + vbCrLf
                        If lang Then
                                If Not blockCheck(sbf(col).sb, DialogLang, "Module " & s$ + vbCrLf) Then Exit Function
                                prg$ = "MODULE " & s$ & " {" & sbf(col).sb & "}" & vbCrLf + prg$
                        Else
                                If Not blockCheck(sbf(col).sb, DialogLang, "ÔìÞìá " & s$ + vbCrLf) Then Exit Function
                                prg$ = "ÔÌÇÌÁ " & s$ & " {" & sbf(col).sb & "}" & vbCrLf + prg$
                        End If
                End If
        Next I
        w$ = ""
        If FastSymbol(rest$, "@@") Then
            ' default password  - one space only - coder use default internal password
                If Not IsStrExp(basestack, rest$, w$) Then w$ = " "
        ElseIf FastSymbol(rest$, "@") Then
                ' One space only
                w$ = " "
        End If
        par = False
        If FastSymbol(rest$, ",") Then
                If Abs(IsLabel(basestack, rest$, s$)) = 1 Then
                        prg$ = prg$ & s$
                ElseIf FastSymbol(rest$, "{") Then
                        prg$ = prg$ & block(rest$)
                        If Not FastSymbol(rest$, "}") Then Exit Function
                End If
        End If
        ' reuse s$, col$
        If Len(w$) > 1 Then  'scrable col by George
                s$ = "": For col = 1 To Int((33 * Rnd) + 1): s$ = s$ & Chr(65 + Int((23 * Rnd) + 1)): Next col
                ' insert a variable length label......to make a variable length file
                prg$ = s$ & ":" & vbCrLf + prg$
                prg$ = mycoder.encryptline(prg$, w$, Len(prg$) Mod 33)
                par = True
        ElseIf Len(w$) = 1 Then   ' I have to check that...
                s$ = "":   For col = 1 To Int((33 * Rnd) + 1): s$ = s$ & Chr(65 + Int((23 * Rnd) + 1)): Next col
                prg$ = s$ & ":" & vbCrLf + prg$
                prg$ = mycoder.must1(prg$)
                par = True
        End If
        s$ = ""
        If CFname(pa$) <> "" Then
                If lang = 1 Then
                        If MsgBoxN("Replace " + ExtractNameOnly(pa$), vbOKCancel, MesTitle$) <> vbOK Then
                        MyEr "File not saved -1005", "Äåí óþèçêå ôï áñ÷åßï -1005"
                        ProcSave = True
                        Exit Function
                        End If
                Else
                        If MsgBoxN("ÁëëáãÞ " + ExtractNameOnly(pa$), vbOKCancel, MesTitle$) <> vbOK Then
                        MyEr "File not saved -1005", "Äåí óþèçêå ôï áñ÷åßï -1005"
                        ProcSave = True
                        Exit Function
                        End If
                End If
                s$ = "*"
        End If
        If Not WeCanWrite(pa$) Then Exit Function
        If par Then
                If s$ = "*" Then
                       '' If CFname(ExtractPath(pa$) & ExtractNameOnly(pa$) & ".bck") <> "" Then Kill GetDosPath(ExtractPath(pa$) & ExtractNameOnly(pa$) & ".bck"): Sleep 30
                        MakeACopy pa$, ExtractPath(pa$) & ExtractNameOnly(pa$) & ".bck"
                End If
                If Not SaveUnicode(pa$, prg$, 0) Then BadFilename
                Else
                If s$ <> "" Then
                        ''If CFname(ExtractPath(pa$) & ExtractNameOnly(pa$) & ".bck") <> "" Then Kill GetDosPath(ExtractPath(pa$) & ExtractNameOnly(pa$) & ".bck"):  Sleep 30
                        MakeACopy pa$, ExtractPath(pa$) & ExtractNameOnly(pa$) & ".bck"
                End If
                ProcSave = SaveUnicode(pa$, prg$, 2)  ' 2 = utf-8 standard save mode for version 7
                If HERE$ = "" Then LASTPROG$ = pa$
        End If
 ProcSave = True
Else
MyEr "A name please or use Ctrl+A to perform SAVE COMMAND$  (the last loading)", "¸íá üíïìá ðáñáêáëþ, Þ ðÜôá ôï ctrl+Á ãéá íá áðïèçêåýóåéò ìå ôï üíïìá ôïõ ðñïãñÜììáôïò ðïõ öïñôþèçêå ôåëåõôáßá"
End If

End Function

Sub PushStage(basestack As basetask, DUMMY As Boolean)
        With basestack.RetStack
                basestack.SubLevel = basestack.SubLevel + 1

                If DUMMY Then
                        .PushVal 0
                        .PushVal 0
                        .PushVal 0
                        .PushVal 0
                        .PushVal 0
                        .PushVal 0
                        .PushVal -2
                Else
                        .PushVal 0   ' Len(arrname$)
                        .PushVal CDbl(subHash.Count)
                        .PushVal CDbl(varhash.Count)
                        .PushVal 0 'CDbl(neoArray.Count)
                        .PushVal CDbl(sb2used)
                        .PushVal CDbl(var2used)
                        .PushVal -1
End If
        End With
End Sub
Sub PopStage(basestack As basetask)
Dim kolpo As Boolean, bb$, Once As Boolean, dd As Variant
        With basestack.RetStack
        If .LookTopVal = -1 Then
        basestack.SubLevel = basestack.SubLevel - 1
       .drop 1

                    var2used = CLng(.PopVal)
                    sb2used = CLng(.PopVal)
                   .drop 1
                      varhash.ReduceHash CLng(.PopVal), var()
                    subHash.ReduceHash CLng(.PopVal), sbf()
                     .drop 1
        ElseIf .LookTopVal = -2 Then
        basestack.SubLevel = basestack.SubLevel - 1
        .drop 7
        Else
        End If
        End With
End Sub

Function RevisionPrint(basestack As basetask, rest$, xa As Long, lang As Long) As Boolean
Dim scr As Object, oldCol As Long, oldFTEXT As Long, oldFTXT As String, oldpen As Long
Dim par As Boolean, I As Long, f As Long, p As Double, W4 As Boolean, pn&, s$
Dim o As Long, W3 As Long, x1 As Long, y1 As Long, x As Double, ColOffset As Long
Dim work As Boolean, work2 As Boolean, skiplast As Boolean
Set scr = basestack.Owner
W3 = -1
Dim basketcode As Long, prive As basket
basketcode = GetCode(scr)
prive = players(basketcode)
With prive
PlaceBasketPrive scr, prive
scr.FontTransparent = True
On Error GoTo 0
Dim opn&
par = True
If IsSymbol(rest$, "#") Then
   If IsExp(basestack, "#" + Left$(rest$, 6), p) Then
   rest$ = "#" + rest$
   Else
        If IsExp(basestack, rest$, p) Then
                     f = p Mod 512
                     If Not FastSymbol(rest$, ",") Then Set scr = Nothing: Exit Function
                     par = False
             End If
    End If
Else
If Not IsLabelSYMB3(rest$, s$) Then
                    f = 0
Else
Select Case lang
Case 1
Select Case UCase(s$)
        Case "OVER"
        f = 1
        Case "UNDER"
        f = 2
        Case "PART"
        f = 3
        Case Else
        rest$ = s$ + rest$
        f = 0
        End Select
Case 0, 2
        Select Case myUcase(s$, True)
        Case "ÐÁÍÙ"
        f = 1
        Case "ÕÐÏ"
        f = 2
        Case "ÌÅÑÏÓ"
        f = 3
        Case Else
        rest$ = s$ + rest$
        f = 0
        End Select
        End Select
        If f > 0 And .lastprint Then
        .lastprint = False
        
        GetXYb scr, prive, x1&, y1&
        If f <> 2 Then If x1& > 0 Or y1& >= .mx Then crNew basestack, prive
        End If
If f = 1 Then  ''
work = True
oldCol = .Column
scr.Line (0&, .currow * .Yt)-((.mx - 1) * .Xt + .Xt * 2, (.currow) * .Yt + .Yt - 2 * DYP), .Paper, BF
LCTbasket scr, prive, .currow, 0&
.Column = .mx - 1
W4 = True
oldFTEXT = .FTEXT
oldFTXT = .FTXT
oldpen = .mypen
pn& = 2
.FTEXT = 4
ElseIf f = 2 Then
work = True
oldCol = .Column
scr.Line (0&, (.currow) * .Yt + .Yt - DYP)-((.mx - 1) * .Xt + .Xt * 2, (.currow) * .Yt + .Yt - 1 * DYP), .mypen, BF
crNew basestack, prive
LCTbasketCur scr, prive
W4 = True
oldFTEXT = .FTEXT
oldFTXT = .FTXT
oldpen = .mypen
.FTEXT = 4
pn& = 2
ElseIf f = 3 Then
' we print in a line with lost chars, so controling the start of printing
' we can render text, like from a view port Some columns are hidden because the exit out of screen;
work = True
oldCol = .Column
LCTbasket scr, prive, .currow, 0&
W4 = True
oldFTEXT = .FTEXT
oldFTXT = .FTXT
.FTEXT = 4
oldpen = .mypen
End If
f = 0
End If

End If
If W4 Then pn& = 2 Else pn& = 0

s$ = ""
If .FTEXT > 3 And .curpos >= .mx And Not W4 Then
crNew basestack, prive
W3 = 0
End If
If FastSymbol(rest$, ";") Then
            If .lastprint Then
            .lastprint = False
            LCTbasketCur scr, prive
            crNew basestack, prive
            End If
ElseIf .lastprint Then
If .FTEXT > 3 Then pn& = 7: GoTo newntrance

End If



Do

    If IsExp(basestack, rest$, p) Then
            If .lastprint Then opn& = 5

            pn& = 1
            If .Column = 1 Then
            
            pn& = 6
            End If
            
    ElseIf LastErNum <> 0 Then
            .lastprint = False
            RevisionPrint = LastErNum = -2
            Set scr = Nothing
            Exit Function
    ElseIf IsStrExp(basestack, rest$, s$) Then
      
    If .lastprint Then opn& = 5
            pn& = 2

    ElseIf LastErNum <> 0 Then
             RevisionPrint = LastErNum = -2
             Set scr = Nothing
                Exit Function
    ElseIf FastSymbol(rest$, "~(") Then  ' means combine
        ' get the color and then look for @( parameters)
        W3 = -1
    If par Then  ' par is false when we print in files, we can't use color;
   
                 If IsExp(basestack, rest$, p) Then
                 TextColor scr, CLng(mycolor(p))
                 Else
                 TextColor scr, .mypen
                 End If
                     If FastSymbol(rest$, ",") Then
                     
                                If W4 Or Not work Then
                                  If prive.lastprint Then
                                   prive.lastprint = False
                                   GetXYb scr, prive, .curpos, .currow
                                                   If work Then
                       .curpos = .curpos - ColOffset
                      If (.curpos Mod (.Column + 1)) <> 0 Then
                      .curpos = .curpos + (.Column + 1) - (.curpos Mod (.Column + 1)) + ColOffset
                      Else
                       .curpos = .curpos + ColOffset
                      End If
                 If W4 Then LCTbasketCur scr, prive
                       End If
                                  End If
                               
                              LCTbasketCur scr, prive
                             
                                Else
                                 If work Then
                       .curpos = .curpos - ColOffset
                      If (.curpos Mod (.Column + 1)) <> 0 Then
                      .curpos = .curpos + (.Column + 1) - (.curpos Mod (.Column + 1)) + ColOffset
                      Else
                       .curpos = .curpos + ColOffset
                      End If
                 If W4 Then LCTbasketCur scr, prive
                       End If
                               '' LCTbasketCur scr, prive
                                End If
                                
                                
'                                         GetXYb scr, prive, .curpos, .currow
                   ''  LCTbasketCur scr, prive
                x1 = .Column + .curpos + 1
                y1 = .currow + 1
                
                                pn& = 99
                             GoTo pthere   ' background and border and or images
             
            
                 End If
                         If Not FastSymbol(rest$, ")") Then RevisionPrint = False: Set scr = Nothing: Exit Function
                         pn& = 99
    End If
    ElseIf FastSymbol(rest$, "@(") Then
    W3 = -1
               If Not par Then RevisionPrint = False: Set scr = Nothing: Exit Function
                If IsExp(basestack, rest$, p) Then

                .curpos = CLng(p)
                End If
                
                If FastSymbol(rest$, ",") Then
                If IsExp(basestack, rest$, p) Then .currow = CLng(p)
                End If

                If FastSymbol(rest$, ",") Then
                
                If IsExp(basestack, rest$, p) Then x1 = CLng(p)
                Else
                x1 = 1
                End If
                
                If FastSymbol(rest$, ",") Then
                If IsExp(basestack, rest$, p) Then y1 = CLng(p)
                Else
                y1 = 1
                End If

                If FastSymbol(rest$, ",") Then
             '   On Error Resume Next
pthere:
                   LCTbasketCur scr, prive
                If IsStrExp(basestack, rest$, s$) Then
                p = 0
                    If FastSymbol(rest$, ",") Then
                        If IsExp(basestack, rest$, p) Then
                            If p <> 0 Then p = True
                        Else
                        p = True
                        End If
                    End If
             
                    x1 = Abs(x1 - .curpos)
                    y1 = Abs(y1 - .currow)
                    
                    BoxImage scr, prive, x1, y1, s$, 0, (p)
                    'If P <> 0 Then .currow = y1 + .currow
                ElseIf IsExp(basestack, rest$, p) Then
         
                    BoxColorNew scr, prive, x1 - 1, y1 - 1, (p)
                    If FastSymbol(rest$, ",") Then
                        If IsExp(basestack, rest$, x) Then
                            BoxBigNew scr, prive, x1 - 1, y1 - 1, (x)
                            
                            
                            
                        Else
                            RevisionPrint = False
                            Set scr = Nothing
                            Exit Function
                        End If
                    End If
                Else
                    RevisionPrint = False
                    Set scr = Nothing
                    Exit Function
                
                End If

                End If
             LCTbasket scr, prive, .currow, .curpos
                
        If Not FastSymbol(rest$, ")") Then
        RevisionPrint = False
        Set scr = Nothing
        Exit Function
        End If
        work = False
        pn& = 99
        ElseIf LastErNum <> 0 Then
      RevisionPrint = LastErNum <> -2
      Set scr = Nothing
    Exit Function
    
    ElseIf FastSymbol(rest$, "$(") Then
conthere:
W3 = -1
        If IsExp(basestack, rest$, p) Then
        
            .FTEXT = Abs(p) Mod 10
            ' 0 STANDARD LEFT chars before typed beyond the line are directed to the next line
            ' 1  RIGHT
            ' 2 CENTER
            ' 3 LEFT
            ' 4 LEFT PROP....expand to next .Column......
            ' 5 RIGHT PROP
            ' 6 CENTER PROP
            ' 7 LEFT PROP
            ' 8 left and right justify
            ' 9 New in version 8 Left justify(like 7) without word wrap (cut excess)
        ElseIf IsStrExp(basestack, rest$, s$) Then
            .FTXT = s$
        End If
        If par Then
        If FastSymbol(rest$, ",") Then
                If IsExp(basestack, rest$, p) Then
                p = p - 1
                If Abs(Int(p Mod (.mx + 1))) < 2 Then
                MyEr ".Column minimum width is 4 chars", "Ìéêñüôåñï ìÝãåèïò óôÞëçò åßíáé ïé ôÝóóåñéò ÷áñáêôÞñåò"
                Else
                 If W4 Or Not work Then
                   LCTbasketCur scr, prive
                   Else
                   GetXYb scr, prive, .curpos, .currow
                   End If
                 If W4 Then ColOffset = .curpos    ' now we have columns from offset ColOffset
                    .Column = Abs(Int(p Mod (.mx + 1)))
                    End If
                   
                Else
                    RevisionPrint = False
                    Set scr = Nothing
                    Exit Function
                End If
         End If
         End If
            If Not FastSymbol(rest$, ")") Then
            RevisionPrint = False
            Set scr = Nothing
            Exit Function
            End If
        
        
        pn& = 99
        ElseIf LastErNum <> 0 Then
       RevisionPrint = LastErNum <> -2
       Set scr = Nothing
    Exit Function
    Else
    If pn& <> 0 And pn& < 5 And Not .lastprint Then
        If par Then
            If Not W4 Then
          '' GetXYb scr, prive, .curpos, .currow

If Not (.curpos = 0) Then
GetXYb scr, prive, .curpos, .currow
If pn& = 1 Then
crNew basestack, prive: skiplast = True
ElseIf pn& = 2 Then

If Abs(W3) = 1 And .curpos = 0 And Not (.FTEXT = 9 Or .FTEXT = 5 Or .FTEXT = 6) Then

Else
crNew basestack, prive: skiplast = True
End If
End If
End If


            End If
        Else
            If Uni(f) Then
            putUniString f, vbCrLf
            Else
            putANSIString f, vbCrLf
            'Print #f,
            End If
        End If
    End If
 
        Exit Do
    End If
If .lastprint And opn& > 4 Then .lastprint = False
    If FastSymbol(rest$, ";") Then
'' LEAVE W3
   If opn& = 0 And (Not work) And (Not .lastprint) Then

   LCTbasket scr, prive, .currow, .curpos
   End If
   ' IF  WORK THEN opn&=5
   opn& = 5
newntrance:
work = True
.lastprint = True
        
         Do While FastSymbol(rest$, ";")
         Loop
    ElseIf Not FastSymbol(rest$, ",") Then
    
    pn& = pn& + opn&
  opn& = 0
  rest$ = NLtrim$(rest$)
  If rest$ <> "" Then
    
  If Not MaybeIsSymbol(rest$, " : }\'" + vbCr) Then
  
    Exit Function
 ''rest$ = "@{}" + Mid$(rest$, 3)
   End If
   End If
    Else

    rest$ = "," & rest$
    End If
    pn& = pn& + opn&
    Select Case pn&
    Case 0
    Exit Do
    Case 1
        If .FTXT = "" Then
        If xa Then
        s$ = PACKLNG2$(p)
        Else

        s$ = CStr(p)

      If .FTEXT < 4 Then
        If InStr(s$, ".") > 0 Then
         If InStr(s$, ".") <= .Column Then
        If RealLen(s$) > .Column + 1 Then
    If .FTEXT > 0 Then s$ = Left$(s$, .Column + 1)
        End If
        End If
        ElseIf .FTEXT > 0 Then
         If RealLen(s$) > .Column + 1 Then s$ = String$(.Column, "?")
        End If
          End If
        End If
        Else
        s$ = Format$(p, .FTXT)
        End If
     If par Then
        If .Column > 2 Then   ' .Column 3 means 4 chars width
        If opn& < 5 Then
    '                    ensure that we are align in .Column  (.Column is based zero...)
    skiplast = False
               If .currow >= .My Then
               If Not W4 Then crNew basestack, prive: skiplast = True
               End If
        
                        If work Then
                       .curpos = .curpos - ColOffset
                      If (.curpos Mod (.Column + 1)) <> 0 Then
                      .curpos = .curpos + (.Column + 1) - (.curpos Mod (.Column + 1)) + ColOffset
                      Else
                       .curpos = .curpos + ColOffset
                      End If
                 If W4 Then LCTbasketCur scr, prive
                       End If
                       work = True
    End If
            If .curpos >= .mx Then
    '' ???
                    Else
            Select Case .FTEXT
            Case 0
            
                          
                       PlainBaSket scr, prive, Space$(.Column - (RealLen(s$) - 1) Mod (.Column + 1)) + s$, W4, W4
                       
            Case 3
                        PlainBaSket scr, prive, Right$(Space$(.Column - (RealLen(s$) - 1) Mod (.Column + 1)) + Left$(s$, .Column + 1), .Column + 1), W4, W4
            Case 2
                        If RealLen(s$) > .Column + 1 Then s$ = "????"
                        PlainBaSket scr, prive, Left$(Space$((.Column + 1 - RealLen(s$)) \ 2) + Left$(s$, .Column + 1) & Space$(.Column), .Column + 1), W4, W4
            Case 1
                        PlainBaSket scr, prive, Left$(s$ & Space$(.Column), .Column + 1), W4, W4
            Case 5
                        x1 = .curpos
                        y1 = .currow
                        If Not (.mx - 1 <= .curpos And W4 <> 0) Then
                        LCTbasketCur scr, prive
                        scr.CurrentX = scr.CurrentX + (.Xt - TextWidth(scr, Left$(s$, 1))) \ 2
                        wwPlain basestack, prive, s$, .Column * .Xt + .Xt - (.Xt - TextWidth(scr, Left$(s$, 1))) \ 2, 0, , True, 0, , CBool(W4)
                        .currow = y1
        

                        .curpos = x1 + .Column + 1
                        
                        End If
                     If .curpos >= .mx And Not W4 Then
                   
                         .currow = .currow + 1
                         .curpos = 0
                         End If
              If .lastprint Then
     
                 If .curpos = 0 Then
                 If .currow >= .My Then crNew basestack, prive Else LCTbasketCur scr, prive
                 End If
                 
     scr.CurrentX = .curpos * .Xt
                
                  scr.CurrentY = .currow * .Yt + .uMineLineSpace
             
         
                   End If
            Case 4, 7, 8

                            wwPlain basestack, prive, s$ & vbCrLf, .Column * .Xt + .Xt - (.Xt - TextWidth(scr, Right$(s$, 1))) \ 2, 0, , , 1, , , pn& < 5
                     
                   scr.CurrentY = scr.CurrentY - .Yt
                   
                           .curpos = .curpos + .Column + 1
                            If .curpos >= .mx And Not W4 Then
                                .curpos = 0
                                .currow = .currow + 1
                            End If
                      If .lastprint Then
     
                 If .curpos = 0 Then
                 If .currow >= .My Then crNew basestack, prive Else LCTbasketCur scr, prive
                 End If
        If .curpos > 0 Then scr.CurrentX = .curpos * .Xt - (.Xt - TextWidth(scr, Right$(s$, 1))) \ 2 Else scr.CurrentX = .curpos * .Xt
                  scr.CurrentY = .currow * .Yt + .uMineLineSpace
             
         
                   End If
            Case 6
            
                              
                            
                        wwPlain basestack, prive, s$, .Column * .Xt + .Xt, 0, , False, 2, , , pn& < 5
                            .curpos = .curpos + .Column + 1
                            If .curpos >= .mx And Not W4 Then
                                .curpos = 0
                                .currow = .currow + 1
                            End If
                                                  If .lastprint Then
     
                 If .curpos = 0 Then
                 If .currow >= .My Then crNew basestack, prive Else LCTbasketCur scr, prive
                 End If
                scr.CurrentX = .curpos * .Xt
                  scr.CurrentY = .currow * .Yt + .uMineLineSpace
             
         
                   End If
                            
            Case 9
                            LCTbasketCur scr, prive
                            wPlain scr, prive, s$, 1000, 0   '.Column + 1,
                            GetXYb scr, prive, .curpos, .currow
                                  .curpos = .curpos + .Column + 1
                            If .curpos >= .mx And Not W4 Then
                                .curpos = 0
                                .currow = .currow + 1
                            End If
                                                               If .lastprint Then
     
                 If .curpos = 0 Then
                 If .currow >= .My Then crNew basestack, prive Else LCTbasketCur scr, prive
                 End If
                If .curpos > 0 Then scr.CurrentX = .curpos * .Xt - (.Xt - TextWidth(scr, Right$(s$, 1))) \ 2 Else scr.CurrentX = .curpos * .Xt
                  scr.CurrentY = .currow * .Yt + .uMineLineSpace
             
         
                   End If
            End Select
End If
            
            
            
        Else
        ' no way to use this any more...7 rev 20
        PlainBaSket scr, prive, s$
        End If
 
        Else
         If Uni(f) Then
            putUniString f, s$
            Else
            putANSIString f, s$
        'Print #f, S$;
        End If
        End If
    Case 2
    '' for string.....................................................................................................................
        If .FTXT <> "" Then
        s$ = Format$(s$, .FTXT)
        End If
        If par Then
        If .Column > 0 Then
                             x1 = .curpos: y1 = .currow
                skiplast = False
                                If .currow >= .My And Not W4 Then
                                crNew basestack, prive
                                skiplast = True
                                End If
                        If work Then
                       .curpos = .curpos - ColOffset
                      If (.curpos Mod (.Column + 1)) <> 0 Then
                      .curpos = .curpos + (.Column + 1) - (.curpos Mod (.Column + 1)) + ColOffset
                      Else
                       .curpos = .curpos + ColOffset
                     
                      End If
                      '' LCTbasket scr, prive,   y1, X1
                       If W4 Then LCTbasketCur scr, prive
                       End If
                       work = True
          If s$ = "" Then s$ = " "
          
                 If .curpos >= .mx Then
                 y1 = 1
                    Else
            Select Case .FTEXT
                Case 1
                           '' GetXY scr, X1, y1
                          ''  If s$ = "" Then s$ = " "
                            PlainBaSket scr, prive, Left$(s$ & Space$(.Column - (RealLen(s$) - 1) Mod (.Column + 1)), .Column + 1), W4, W4
                Case 2
                            If RealLen(s$) > .Column + 1 Then s$ = Left$(s$, .Column + 1)
                            PlainBaSket scr, prive, Left$(Space$((.Column + 1 - RealLen(s$)) \ 2) + s$ & Space$(.Column), .Column + 1), W4, W4
                Case 3
                            PlainBaSket scr, prive, Right$(Space$(.Column - (RealLen(s$) - 1) Mod (.Column + 1)) & s$, .Column + 1), W4, W4
                Case 0
                           '' If s$ = "" Then s$ = " "
                        
                            PlainBaSket scr, prive, s$ + Space$(.Column - (RealLen(s$) - 1) Mod (.Column + 1)), W4, W4
                       
                Case 4
                            
                            LCTbasketCur scr, prive
                            scr.CurrentX = scr.CurrentX + (.Xt - TextWidth(scr, Left$(s$, 1))) \ 2
                            
                            W3 = 0
                            wwPlain basestack, prive, s$, scr.Width, 0, , True, 0, , W3, True
                            W3 = W3 \ .Xt + 1
                            ' go to next .Column...
                            
                            .curpos = (.Column + 1) * ((W3 + .Column + 1) \ (.Column + 1))
                        If .curpos >= .mx And Not W4 Then
                                .curpos = 0
                                .currow = .currow + 1
                            End If
                Case 5
                           '' GetXY scr, X1, y1
                            LCTbasketCur scr, prive
                            scr.CurrentX = scr.CurrentX + (.Xt - TextWidth(scr, Left$(s$, 1))) \ 2
                            wwPlain basestack, prive, s$, .Column * .Xt + .Xt - (.Xt - TextWidth(scr, Left$(s$, 1))) \ 2, 0, , True, 3, , , True
                            .curpos = .curpos + .Column + 1
                            If .curpos >= .mx And Not W4 Then
                                .curpos = 0
                                .currow = .currow + 1
                            End If
                Case 6
                        ''    LCTbasketCur scr, prive
                            wwPlain basestack, prive, s$, .Column * .Xt + .Xt, 0, , False, 2, , , True
                                        .curpos = .curpos + .Column + 1
                            If .curpos >= .mx And Not W4 Then
                                .curpos = 0
                                .currow = .currow + 1
                            End If
                Case 7
                            
                            LCTbasketCur scr, prive
                            wwPlain basestack, prive, s$ & vbCrLf, .Column * .Xt + .Xt - (.Xt - TextWidth(scr, Right$(s$, 1))) \ 2, 0, , True, 1, , , True
                            .curpos = .curpos + .Column + 1
                            If .curpos >= .mx And Not W4 Then
                                .curpos = 0
                                .currow = .currow + 1
                            End If
                Case 8
                            LCTbasketCur scr, prive
                            scr.CurrentX = scr.CurrentX + (.Xt - TextWidth(scr, Left$(s$, 1))) \ 2
                            If Not (.mx - 1 <= x1 And W4 <> 0) Then
                                    wwPlain basestack, prive, s$, .Column * .Xt + .Xt - (.Xt - TextWidth(scr, Left$(s$, 1))) \ 2, 0, , True, 0, , , True
                            End If
                            .curpos = .curpos + .Column + 1
                            If .curpos >= .mx And Not W4 Then
                                .curpos = 0
                                .currow = .currow + 1
                            End If
                Case 9
                            LCTbasketCur scr, prive

              wPlain scr, prive, s$, .Column + 1, 0
                            .curpos = .curpos + .Column + 1
                            If .curpos >= .mx And Not W4 Then
                                .curpos = 0
                                .currow = .currow + 1
                            End If
                End Select
                End If
        Else
            PlainBaSket scr, prive, s$
        
        End If
        Else
             If Uni(f) Then
            putUniString f, s$
            Else
            putANSIString f, s$
        'Print #f, S$;
        End If
        End If
    Case 6
        If par Then
                If .FTEXT > 3 Then
            W3 = 0
             x1 = .curpos
             y1 = .currow
                        If .FTXT <> "" Then
                                s$ = Format$(Trim$(Str$(p)), .FTXT)
                                If .FTEXT > 4 And Not work Then scr.CurrentX = scr.CurrentX + (.Xt - TextWidth(scr, Left$(s$, 1))) \ 2
                                If scr.CurrentX < .mx * .Xt Then
                            
                                wwPlain basestack, prive, s$, scr.Width, 0, , True, 0, , W3
                                
                                End If
                                
                        Else
                                 If xa Then
                                        s$ = PACKLNG2$(p)
                                Else
                                        s$ = Trim$(Str$(p))
                                End If

                                If .FTEXT > 4 And Not work Then scr.CurrentX = scr.CurrentX + (.Xt - TextWidth(scr, Left$(s$, 1))) \ 2
                                      If scr.CurrentX < 0 Then
                             
                                
                                
                                End If
                                wwPlain basestack, prive, s$, scr.Width, 0, , True, 0, , W3
                                work = True
                                scr.CurrentX = W3
                         
                                            
                        End If
                      '' Then LCTbasket scr, prive, y1, W3 \ .Xt + 1
                Else
                        If .FTXT = "" Then
                                If xa Then
                                    PlainBaSket scr, prive, PACKLNG2$(p)
                                Else
                                    PlainBaSket scr, prive, Trim$(Str$(p))
                                End If
                        Else
                            PlainBaSket scr, prive, Format$(Trim$(Str$(p)), .FTXT)
                        End If
                End If
        Else
             If Uni(f) Then
            putUniString f, s$
            Else
            putANSIString f, s$
        ' Print #f, S$;
        End If
        End If
    Case 7
        If par Then
        If s$ <> "" Then
           If .FTEXT > 3 Then
            W3 = 0
             x1 = .curpos
             y1 = .currow
            If Not work Then LCTbasketCur scr, prive
              If .FTXT <> "" Then s$ = Format$(s$, .FTXT)
                        If .FTEXT > 4 And Not work Then scr.CurrentX = scr.CurrentX + (.Xt - TextWidth(scr, Left$(s$, 1))) \ 2
                        wwPlain basestack, prive, s$, scr.Width, 0, , True, 0, , W3
                        work = True
                       scr.CurrentX = W3
            Else
                If .FTXT <> "" Then
                PlainBaSket scr, prive, Format$(s$, .FTXT)
                Else
                PlainBaSket scr, prive, s$
                End If
                
            End If
        Else

          
        End If
   
        Else
             If Uni(f) Then
            putUniString f, s$
            Else
            putANSIString f, s$
        ' Print #f, S$;
        End If
        End If
    End Select
    If FastSymbol(rest$, ",") Then
W3 = 1
        pn& = 0
      ''  skiplast = False
        If opn& > 4 Then
        scr.CurrentX = scr.CurrentX + .Xt - dv15
        GetXYb scr, prive, .curpos, .currow
                        If work Then
                       .curpos = .curpos - ColOffset
                      If (.curpos Mod (.Column + 1)) <> 0 Then
                      .curpos = .curpos + (.Column + 1) - (.curpos Mod (.Column + 1)) + ColOffset
                      Else
                       .curpos = .curpos + ColOffset
                      End If
                      If W4 Then LCTbasketCur scr, prive
                       End If
                       
                       work = True
                       Else
                       work = False
        End If
        opn& = 0
        Do While FastSymbol(rest$, ",")
            If par Then
            ' ok I want that
            If .Column > .mx And .FTEXT < 4 Then
            
            Else

            If Not W4 Then
            If Not skiplast Then crNew basestack, prive
            End If
            End If
            Else
                 If Uni(f) Then
            putUniString f, vbCrLf
            Else
            putANSIString f, vbCrLf
            'Print #f,
            End If
            End If
            
        Loop

    End If
    
players(basketcode) = prive
Loop
'
''If Not extreme Then If Not basestack.toprinter Then MyDoEvents2 scr
''If scr.CurrentX <> 0 Then scr.CurrentX = ((scr.CurrentX \ .Xt) + 1) * .Xt

If W4 <> 0 Then
        .FTEXT = oldFTEXT
        .FTXT = oldFTXT
        .Column = oldCol
        If .mypen <> oldpen Then TextColor scr, .mypen
        Else
        If pn& > 4 And opn& = 0 Then
        
                 If pn& < 99 Then
                 If work Then
                 .lastprint = False
                 End If
                 If Not skiplast Then crNew basestack, prive
                 End If
        ElseIf .currow >= .My Or (W3 < 0 And pn& = 0) Then
              crNew basestack, prive
              LCTbasketCur scr, prive
        ElseIf pn& > 4 Then
       
        End If

End If
EXITNOW:
If basestack.IamThread Then
' let thread do the refresh
Else
If Not extreme Then
    If uintnew(timeGetTime) > k1 Then RRCOUNTER = 0
            
            If RRCOUNTER = 0 Then
            k1 = uintnew(timeGetTime + REFRESHRATE): RRCOUNTER = 1
         If scr.Visible Then scr.refresh
                  End If
End If
End If
RevisionPrint = True
players(basketcode) = prive
End With
End Function

Private Function SpeedGroup(bstack As basetask, pppp As mArray, Prefix$, ByVal w$, b$, v As Long) As Long
Dim vars As Long, vname As Long, y1 As Long, subs As Long, snames As Long, I As Long, ec$, ohere$, p As Double
Dim depth As Long, loopthis As Boolean, subspoint As Boolean, RetStackSize As Long

Dim kolpo As Boolean, bb$, Once As Boolean, dd As Variant
vars = var2used: vname = varhash.Count
subs = sb2used: snames = subHash.Count
Dim MM As mStiva, tempRef As Object
If Prefix = "VAL" Then
' we stand as right value...
If pppp Is Nothing Then Exit Function
ec$ = w$ + ")"
        w$ = pppp.CodeName + CStr(v)

        
        y1 = GlobalVar(w$, 0, HERE$ = "")

        UnFloatGroup bstack, w$, y1, pppp.item(v)
        
        var(y1).FloatGroupName = ec$
       Dim r As Double, bs As New basetask
        b$ = w$ + b$
             If IsNumber(bstack, b$, r) Then
        If bstack.LastObj Is Nothing Then
         bstack.LastValue = r
         Else
            bstack.LastValue = 0
           
        End If
         SpeedGroup = 1
   
        CopyGroup var(y1), bs

         Set tempRef = pppp.item(v).Link
        Set pppp.item(v) = bs.LastObj
        Set pppp.item(v).LinkRef = tempRef
        Set bs.LastObj = Nothing
        End If
        CopyGroup var(y1), bstack
        
     Set bstack.LastObj = Nothing
         GoTo fastexit

ElseIf Prefix = "VAL$" Then
ec$ = w$ + ")"
' we stand as right value...
        w$ = pppp.CodeName + CStr(v)
   
        y1 = GlobalVar(w$, 0)
          I = GlobalVar(w$ + "$", CStr(""))
        UnFloatGroup bstack, w$, y1, pppp.item(v)
        var(y1).FloatGroupName = ec$
        b$ = vbCrLf + w$ + "$=" + w$ + b$
     SpeedGroup = Execute(bstack, b$, True)
    CopyGroup var(y1), bstack
       Set tempRef = pppp.item(v).Link
      Set pppp.item(v) = bstack.LastObj
      Set pppp.item(v).LinkRef = tempRef
    Set bstack.LastObj = Nothing
  
        bstack.LastValue = CStr(var(I))
        GoTo fastexit
ElseIf Prefix = "FOR" Then
RetStackSize = bstack.RetStack.Total


    If v = -1 Then
    w$ = myUcase(w$)
        y1 = 0
        If w$ = "THIS" Or w$ = "ÁÕÔÏ" Then
        If bstack.UseGroupname <> "" Then
        'w$ = Left$(bstack.UseGroupname, Len(bstack.UseGroupname) - 1)
        Else
        
        End If
        w$ = "THIS"  ' look this other time..
        End If
            bstack.MoveNameDot w$
       
    Else
        w$ = pppp.CodeName + CStr(v)
        Set dd = New Group
         y1 = GlobalVar(w$, dd)
        UnFloatGroup bstack, w$, y1, pppp.item(v)
        bstack.MoveNameDot myUcase(w$)
    End If

Set MM = New mStiva
MM.DataVal CDbl(y1)
MM.DataVal CDbl(v)
Do While FastSymbol(b$, ",")
I = IsLabelDot("", b$, w$)
If I = 5 Then
w$ = myUcase(w$)
                    If neoGetArray(bstack, w$, pppp) Then

                            If NeoGetArrayItem(pppp, bstack, w$, v, b$) Then
                                    If Typename(pppp.item(v)) = "Group" Then
                                             w$ = pppp.CodeName + CStr(v)
                                                Set dd = New Group
                                                 y1 = GlobalVar(w$, dd)
                                                UnFloatGroup bstack, w$, y1, pppp.item(v)
                                                bstack.MoveNameDot myUcase(w$)
                                                depth = depth + 1
                                                MM.DataVal CDbl(y1)
                                                MM.DataVal CDbl(v)
                                    Else
                                                MissingGroup
                                                GoTo normalexit
                                    End If
                            Else
                                SyntaxError
                                GoTo normalexit
                            End If
                    Else
                            NotExistArray
                            GoTo normalexit
                    End If
ElseIf I = 1 Then
w$ = myUcase(w$)

MM.DataVal CDbl(0)
MM.DataVal CDbl(-1)
        If w$ = "THIS" Or w$ = "ÁÕÔÏ" Then
        If bstack.GroupName = "" Then w$ = ""
        End If

bstack.MoveNameDot myUcase(w$)
        depth = depth + 1
Else
        SyntaxError
        GoTo normalexit
End If
Loop

If FastSymbol(b$, "{") Then

     ec$ = vbCrLf + NLtrim$(block(b$))
  
        If Len(ec$) > 2 Then
                SpeedGroup = 1
                kolpo = False
                Once = True
                I = 1
                ohere$ = HERE$
                Do
                    bb$ = Mid$(ec$, I)
subsentry10:
                    kolpo = False
                    Select Case Execute(bstack, bb$, kolpo, False, loopthis)   ' this is a major point
                    Case 0
                            b$ = bb$ & b$
                            SpeedGroup = 0
                            Set bstack.LastObj = Nothing
                            GoTo normalexit
                    Case 1
                        If LastErNum <> 0 Then
                   b$ = ""
                    End If

                                  If FastSymbol(b$, "}") Then
                                   If Once Then Exit Do
                                   Else
                                   b$ = Right$(ec$, Len(bb$)) + b$
                                ''   MyDoEvents
                                   End If
                                    HERE$ = ohere$
                                   Exit Do
                      Case 2
                            If Not kolpo Then
                                      I = 1
                    If bb$ <> "" Then
                            If bb$ = Chr$(0) Then
                                       If RetStackSize = bstack.RetStack.Total And bstack.RetStack.LookTopVal < 0 Then
                                        ' this is a return form other block
                                         SpeedGroup = 2
                                        b$ = bb$
                                        GoTo fastexit
                                        End If
                                    If bstack.IsInRetStackNumber(p) Then
                                                       If LastErNum = -1 Then
                                                                bstack.RetStack.PushVal p
                                                                SpeedGroup = 0
                                                                GoTo fastexit
                                                        End If
                                                        If p < -1 Then
                                                                subspoint = True
                                                                bstack.IsInRetStackNumber p
                                                        
                                                                bb$ = Mid$(sbf(bstack.Parent.OriginalCode).sb, Len(sbf(bstack.Parent.OriginalCode).sb) - CLng(p) + 1)
                                                        ElseIf p < 0 Then
                                                                subspoint = False
                                                                bstack.IsInRetStackNumber p
                                                        If bstack.RetStack.Total - RetStackSize <= 7 Then
                                                        I = Len(ec$) - CLng(p) + 1
     
                                                       bb$ = Mid$(ec$, I)
                                       

                                                        Else
                                                               bb$ = Mid$(sbf(bstack.OriginalCode).sb, Len(sbf(bstack.OriginalCode).sb) - CLng(p) + 1)
                                                               End If
                                                             ''
                                               
                                               
                                                ''If loopthis Then
                                                    ''            Bb$ = Mid$(ec$, I)
                                                    ''            GoTo subsentry10
                                                    ''    Else
                                                     ''           Bb$ = Mid$(ec$, CLng(p) + 1)
                                                    ''    End If
                                                              
                                                              
                                                              
                                                        End If
                                                
                                               PopStage bstack
                                       GoTo subsentry10
                                       
                                       
                                    ElseIf bstack.IsInRetStackString(bb$) Then
                                                                 If InStr(bb$, " ") > 0 Then
                                                                       If subspoint Then bstack.RetStack.PushVal -2 Else bstack.RetStack.PushVal -1
                                   
                                                                        If searchsub(sbf(bstack.OriginalCode).sb, bb$, I) Then
                                                                          subspoint = False
                                                                            If bb$ <> "" Then
                                                                                    bb$ = "Read NEW " + bb$ + vbCrLf + Mid$(sbf(bstack.OriginalCode).sb, I)
                                                                            Else
                                                                                    bb$ = Mid$(sbf(bstack.OriginalCode).sb, I)
                                                                            End If
                                                       
                                                                            kolpo = False
                                                                            GoTo subsentry10
                                                                        ElseIf bstack.IamChild Then
                                                                        If searchsub(sbf(bstack.Parent.OriginalCode).sb, bb$, I) Then
                                                                         subspoint = True
                                                                            If bb$ <> "" Then
                                                                                    bb$ = "Read NEW " + bb$ + vbCrLf + Mid$(sbf(bstack.Parent.OriginalCode).sb, I)
                                                                            Else
                                                                                    bb$ = Mid$(sbf(bstack.Parent.OriginalCode).sb, I)
                                                                            End If
                                                       
                                                                            kolpo = False
                                                                            GoTo subsentry10
                                                                            
                                                                                   Else
                                                                        bstack.RetStack.drop 8
                                                                                    Exit Do
                                                                        End If
                                                                        Else
                                                                        bstack.RetStack.drop 8
                                                                                    Exit Do
                                                                        End If
                                                        End If
                                    End If
                             Else
                                    I = PosLabel(bb$, ec$)
                                              If I = 0 Or I > Len(ec$) Then
          b$ = bb$
     
          SpeedGroup = 2
          Exit Do
                                    Else
                                    bb$ = Mid$(ec$, I)
                                    GoTo subsentry10
                                    End If
                                    
                            End If
                            Else
                            loopthis = False
                            End If
                                               Else
                                  Once = kolpo
                                SpeedGroup = 2: Set bstack.LastObj = Nothing
                                  GoTo normalexit
                    End If

                            Case Else
                                    If FastSymbol(b$, "}") Then
      
                                   If Once Then Exit Do
                                     Else
                                   b$ = Right$(ec$, Len(bb$)) + b$
                                   End If
                                    HERE$ = ohere$
                                   Exit Do
                            
                            End Select
                            HERE$ = ohere$
                              If myexit(bstack) Then SpeedGroup = 1: Exit Do
                            Loop
            Else
              SpeedGroup = Abs(FastSymbol(b$, "}"))
            End If
  End If
        While MM.Total > 0
        y1 = MM.PopVal
        v = MM.PopVal
        If v <> -1 Then
                        CopyGroup var(y1), bstack
                         Set tempRef = pppp.item(v).Link
                        Set pppp.item(v) = bstack.LastObj
                         Set pppp.item(v).LinkRef = tempRef

      
        End If
        Wend
normalexit:
                bstack.DropNdot depth + 1
Else
I = w$ = "."
        w$ = pppp.CodeName + CStr(v)
        Set dd = New Group
         y1 = GlobalVar(w$, dd)

        UnFloatGroup bstack, w$, y1, pppp.item(v)

        If Prefix <> "" Then
        If I Then
         b$ = vbCrLf + Prefix + " " + w$ + "." + b$
        Else
         b$ = vbCrLf + Prefix + " " + w$ + " " + b$
         End If
         Else
        b$ = vbCrLf + w$ + "." + b$
        End If
      SpeedGroup = Execute(bstack, b$, True)
CONTlastEtnum:
If LastErNum <> 0 Then

If FK$(13) = "" Then FK$(13) = GetNextLine((sbf(bstack.OriginalCode).sb))
    End If
                        CopyGroup var(y1), bstack
                        Set tempRef = pppp.item(v).Link
                        Set pppp.item(v) = bstack.LastObj
                         Set pppp.item(v).LinkRef = tempRef

   
                        
                              Set bstack.LastObj = Nothing

Set var(y1) = New Group
End If

fastexit:

var2used = vars
varhash.ReduceHash vname, var()

 sb2used = subs
 subHash.ReduceHash snames, sbf()
    

End Function
Public Sub Thing(w$, v$)
'' from w$ input this value V$...
'' general input
On Error Resume Next
Dim it As Long, pppp As mArray
If Len(w$) < 2 Then Exit Sub

If Asc(w$) = 65 Then
On Error Resume Next
Err.clear
Set pppp = var(Split(Mid$(w$, 2))(0)) ''  "A...16charRef....ItemNo"
If Err.Number > 0 Then Exit Sub
it = Val(Split(Mid$(w$, 2))(1))
If Typename(pppp.item(it)) = doc Then
pppp.item(it).textDoc = v$  ' no checked yet
Else
pppp.item(it) = pppp.item(it) + v$
End If
ElseIf Asc(w$) = 86 Then
it = Val("0" & Mid$(w$, 2))          ''"VItemNo"
If Typename(var(it)) = doc Then
var(it).textDoc = v$    ' no checked yet
Else
var(it) = var(it) + v$
End If
Else
' CAN'T READ
End If
End Sub
Public Function mytitle$(basestack As basetask)
Static PREVT$

' On Error GoTo t1
If exWnd = 0 Then
PREVT$ = ""
mytitle$ = ""
Exit Function
End If
If PREVT$ <> nnn$ Then
PREVT$ = nnn$

Form1.view1_StatusTextChange11 basestack, Trim$(nnn$)

End If
mytitle$ = Trim$(PREVT$)

Exit Function
t1:
mytitle$ = "???"
End Function
Function PointPos(f$) As Long
Dim er As Long, er2 As Long
While FastSymbol(f$, Chr(34))
f$ = GetStrUntil(Chr(34), f$)
Wend
Dim I As Long, j As Long, oj As Long
If f$ = "" Then
PointPos = 1
Else
er = 3
er2 = 3
For I = 1 To Len(f$)
er = er + 1
er2 = er2 + 1
Select Case Mid$(f$, I, 1)
Case "."
oj = j: j = I
Case "\", "/", ":", Is = Chr(34)
If er = 2 Then oj = 0: j = I - 2: Exit For
er2 = 1
oj = j: j = 0
If oj = 0 Then oj = I - 1: If oj < 0 Then oj = 0
Case " ", ChrW(160)
If j > 0 Then Exit For
If er2 = 2 Then oj = 0: j = I - 1: Exit For
er = 1
Case "|", "'"
j = I - 1
Exit For
Case Is > " "
If j > 0 Then oj = j Else oj = 0
Case Else
If oj <> 0 Then j = oj Else j = I
Exit For
End Select
Next I
If j = 0 Then
If oj = 0 Then
j = Len(f$) + 1
Else
j = oj
End If
End If
While Mid$(f$, j, I) = " "
j = j - 1
Wend
PointPos = j
End If
End Function
Public Function ExtractType(f$, Optional JJ As Long = 0) As String
Dim I As Long, j As Long, d$
If FastSymbol(f$, Chr(34)) Then f$ = GetStrUntil(Chr(34), f$)
If f$ = "" Then ExtractType = "": Exit Function
If JJ > 0 Then
j = JJ
Else


j = PointPos(f$)
End If
d$ = f$ & " "
If j < Len(d$) Then
For I = j To Len(d$)
Select Case Mid$(d$, I, 1)
Case "/", "|", "'", " ", Is = Chr(34)
I = I + 1
Exit For
End Select
Next I
If (I - j - 2) < 1 Then
ExtractType = ""
Else
ExtractType = mylcasefILE(Mid$(d$, j + 1, I - j - 2))
End If
Else
ExtractType = ""
End If
End Function
Public Function LONGNAME(Spath As String) As String
LONGNAME = ExtractPath(Spath, , True)
End Function


Public Function ExtractPath(ByVal f$, Optional Slash As Boolean = True, Optional existonly As Boolean = False) As String
If f$ = "" Then Exit Function
Dim I As Long, j As Long, test$
test$ = f$ & " \/:": I = InStr(test$, " "): j = InStr(test$, "\")
If I < j Then j = InStr(test$, "/"): If I < j Then j = InStr(test$, ":"): If I < j Then Exit Function
If Right(f$, 1) = "\" Or Right(f$, 1) = "/" Then f$ = f$ & " a"
j = PointPos(f$)
If Mid$(f$, j, 1) = "." Then j = j - 1
If Len(f$) < j Then
If ExtractType(Mid$(f$, j) & "\.10") = "10" Then j = j - 1 Else Exit Function
Else

End If

j = j - Len(ExtractNameOnly(f$))
If j <= 3 Then
If Mid$(f$, 2, 1) = ":" Then
If Slash Then
ExtractPath = mylcasefILE(Left$(f$, 2)) & "\"
Else
ExtractPath = mylcasefILE(Left$(f$, 2))
End If
Else
ExtractPath = ""
End If
Else
If Slash Then
ExtractPath = mylcasefILE(Left$(f$, j))
Else
ExtractPath = mylcasefILE(Left$(f$, j - 1))
End If
End If
Dim result As Long
Dim strInput As String, strOutput As String
'' Two calls required, one to get expansion buffer length first then do expansion
strOutput = Space$(250)
result = ExpandEnvironmentStrings(ExtractPath, strOutput, result)
strOutput = Space$(result)
result = ExpandEnvironmentStrings(ExtractPath, strOutput, result)
If existonly Then
ExtractPath = mylcasefILE(StripTerminator(GetLongName(strOutput)))
Else
ExtractPath = StripTerminator(strOutput) 'UCase(GetLongName(strOutput))
End If
Dim ccc() As String, c$
ccc() = Split(ExtractPath, "\..")
If UBound(ccc()) > LBound(ccc()) Then
c$ = ""
For I = LBound(ccc()) To UBound(ccc()) - 1
If ccc(I) = "" Then
c$ = ExtractPath(ExtractPath(c$, False))
Else
c$ = c$ & ExtractPath(ccc(I), True)
End If

Next I
If Left$(ccc(I), 1) = "\" Then
ExtractPath = c$ & Mid$(ccc(I), 2)
Else
ExtractPath = c$ & ccc(I)
End If
End If
End Function
Public Function ExtractName(f$) As String
Dim I As Long, j As Long, k$
If f$ = "" Then Exit Function
j = PointPos(f$)
If Mid$(f$, j, 1) = "." Then
k$ = ExtractType(f$, j)
Else
j = Len(f$)
End If
For I = j To 1 Step -1
Select Case Mid$(f$, I, 1)
Case Is < " ", "\", "/", ":"
Exit For
End Select
Next I
If k$ = "" Then
If Mid$(f$, I + j - I, 1) = "." Then
ExtractName = mylcasefILE(Mid$(f$, I + 1, j - I - 1))
Else
ExtractName = mylcasefILE(Mid$(f$, I + 1, j - I))

End If
Else
ExtractName = mylcasefILE(Mid$(f$, I + 1, j - I)) + k$
End If

'ExtractName = mylcasefILE(Trim$(Mid$(f$, I + 1, j - I)))

End Function
Public Function ExtractNameOnly(ByVal f$) As String
Dim I As Long, j As Long
If f$ = "" Then Exit Function
j = PointPos(f$)
If j > Len(f$) Then j = Len(f$)
For I = j To 1 Step -1
Select Case Mid$(f$, I, 1)
Case Is < " ", "\", "/", ":"
Exit For
End Select
Next I
If Mid$(f$, I + j - I, 1) = "." Then
ExtractNameOnly = mylcasefILE(Mid$(f$, I + 1, j - I - 1))
Else
ExtractNameOnly = mylcasefILE(Mid$(f$, I + 1, j - I))
End If
End Function
Public Function GetCurDir(Optional AppPath As Boolean = False) As String
Dim a$, cd As String

If AppPath Then
cd = App.path
AddDirSep cd
a$ = mylcasefILE(cd)
Else
AddDirSep mcd
a$ = mylcasefILE(mcd)

End If
'If Right$(a$, 1) <> "\" Then a$ = a$ & "\"
GetCurDir = a$
End Function
Public Function CFname(a$, Optional TS As Variant) As String
If Left$(a$, 4) = "cDIB" And Len(a$) > 12 Then Exit Function
Dim b$
Dim mDir As New recDir
Sleep 1
If a$ <> "" Then
On Error GoTo 1
b$ = mDir.Dir1(a$, GetCurDir)
If b$ = "" Then b$ = mDir.Dir1(a$, mDir.GetLongName(App.path))
If b$ <> "" Then CFname = mylcasefILE(b$): If Not IsMissing(TS) Then TS = CDbl(mDir.lastTimeStamp)

Exit Function
End If
1:
CFname = ""
End Function
Function rinstr(a As String, b As String, Optional ByVal fr As Long) As Long
Dim I
I = Len(a)
fr = I - fr
If fr < 0 Or fr > I Then fr = I + 1

If I > 0 Then rinstr = InStrRev(a, b, fr)
End Function
Function rinstrTxt(a As String, b As String, Optional ByVal fr As Long) As Long
' NOT USED....INSTRREV IS THE SANE...WITH VBTEXTCOMPARE
Dim I As Long, j As Long
fr = fr - Len(b) + 1
If fr < 0 Then fr = Len(a) + 1
Do
j = I
I = InStr(j + 1, a, b, vbTextCompare)

Loop Until I = 0 Or I > fr

rinstrTxt = j
End Function
Sub dset()

'USING the temporary path
    strTemp = String(MAX_FILENAME_LEN, Chr$(0))
    'Get
    GetTempPath MAX_FILENAME_LEN, StrPtr(strTemp)
    strTemp = LONGNAME(mylcasefILE(Left$(strTemp, InStr(strTemp, Chr(0)) - 1)))
    If strTemp = "" Then
     strTemp = mylcasefILE(Left$(strTemp, InStr(strTemp, Chr(0)) - 1))
    End If
' NOW COPY
' for mcd
Dim cd As String, DUMMY As Long, q$

''cd = App.Path
''AddDirSep cd
''mcd = mylcasefILE(cd)

' Return to standrad path...for all users
userfiles = GetSpecialfolder(CLng(26)) & "\M2000"
AddDirSep userfiles
If Not isdir(userfiles) Then
MkDir userfiles
End If

mcd = userfiles

' now for locale info changes
q$ = "." & Chr$(0)
DUMMY = SetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_SDECIMAL, q$)
DUMMY = SetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_SMONDECIMALSEP, q$)
q$ = "," & Chr$(0)
DUMMY = SetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_STHOUSAND, q$)
DUMMY = SetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_SMONTHOUSANDSEP, q$)
End Sub
Public Function Originalusername()

Dim ss$
                 ss$ = UCase(userfiles)
                    DropLeft "\M2000_USER\", ss$
If ss$ = "" Then
Originalusername = username
Else
Originalusername = GetStrUntil("\", ss$)
End If
End Function
Public Function IsSupervisor() As Boolean

Dim ss$
                 ss$ = UCase(userfiles)
                    DropLeft "\M2000_USER\", ss$
IsSupervisor = ss$ = ""
End Function


Public Function UserPath() As String

Dim ss$
                 ss$ = UCase(userfiles)
                    DropLeft "\M2000_USER\", ss$
        If ss$ <> "" Then
        If CanKillFile(mcd) Then
        DropLeft "\", ss$
UserPath = Mid$(mcd, Len(userfiles) - Len(ss$) + 1)
If UserPath = "" Then
UserPath = "."
End If
Else
UserPath = mcd
End If
Else
UserPath = mcd
End If
End Function
Public Function UserPath2() As String

Dim ss$
                 ss$ = UCase(userfiles)
                    DropLeft "\M2000_USER\", ss$
        If ss$ <> "" Then
        If CanKillFile(mcd) Then
        DropLeft "\", ss$
UserPath2 = Mid$(mcd, Len(userfiles) - Len(ss$) + 1)
If UserPath2 = "" Then
UserPath2 = "."
End If
Else
UserPath2 = mcd
End If
Else
UserPath2 = mcd
End If
If Right$(UserPath2, 1) = "\" Then UserPath2 = Left$(UserPath2$, Len(UserPath2$) - 1)


End Function
Public Function username()
Dim a$, b$, c$
a$ = GetSpecialfolder(0)
While a$ <> ""
c$ = b$
b$ = GetStrUntil("\", a$)
Wend
username = c$
End Function
Public Function ScanTarget(j() As target, ByVal x As Long, ByVal y As Long, ByVal MyL As Long) As Long
Dim iu&, Id&, I&, XX&, YY&

iu& = LBound(j())
Id& = UBound(j())
ScanTarget = -1
For I& = iu& To Id&
With j(I&)
If .enable And .layer = MyL Then
XX& = x \ .Xt
YY& = y \ .Yt
If .Lx <= XX& And .tx >= XX& And .ly <= YY& And .ty >= YY& Then
ScanTarget = I&
Exit For
End If
End If
End With
Next I&
End Function
Public Sub DisableTargets(j() As target, ByVal MyL As Long)
Dim iu&, Id&, I&
iu& = LBound(j())
Id& = UBound(j())
For I& = iu& To Id&
 If j(I&).layer = MyL Then j(I&).enable = False
Next I&
End Sub

Function RMAX(ByVal q As Single, ByVal w As Single) As Single
If q > w Then
RMAX = q
Else
RMAX = w
End If
End Function

Function RMIN(ByVal q As Single, ByVal w As Single) As Single
If q < w Then
RMIN = q
Else
RMIN = w
End If
End Function


Function BoxTarget(DSTACK As basetask, ByVal xl&, ByVal yl&, ByVal b As Long, ByVal f As Long, ByVal Tag$, ByVal Id&, ByVal COM$, XXT&, YYT&, LineSpace&) As target
Dim x&, y&, d As Object
Set d = DSTACK.Owner
Dim prive As basket
prive = players(GetCode(d))
With prive

x& = .curpos
y& = .currow
xl& = xl& + x&
yl& = yl& + y& - 1
With BoxTarget
.SZ = prive.SZ
.Comm = COM$
.Id = Id&
.Tag = Tag$
.Lx = x&
.ly = y&
.tx = xl& - 1
.ty = yl&
.back = b
.fore = f
.enable = True
.Pen = prive.mypen
.Xt = XXT&
.Yt = YYT&
.sUAddTwipsTop = prive.uMineLineSpace
If d.name = "DIS" Then
.layer = 0
ElseIf d.name = "Form1" Then
.layer = -1
ElseIf d.name = "dSprite" Then
.layer = d.Index
End If
End With
If f <> -1 Then BoxBigNew d, prive, xl& - 1, yl&, f
If b <> -1 Then BoxColorNew d, prive, xl& - 1, yl&, b
If Id& < 100 Then
    Tag$ = Left$(Tag$, xl& - x&)
    If Tag$ <> "" Then
    
    Select Case Id& Mod 10
    Case 4, 5, 6
    y& = (yl& + y&) \ 2
    Case 7, 8, 9
    y& = yl&
    Case Else
    End Select
    Select Case Id& Mod 10
    Case 2, 5, 8
    x& = (xl& + x& - Len(Tag$)) \ 2
    Case 3, 6, 9
    x& = xl& - Len(Tag$)
    Case Else
    End Select
    If (Id& Mod 10) > 0 Then
    LCTbasket d, prive, y&, x&
    d.FontTransparent = True
    PlainBaSket d, prive, Tag$, True, True
    LCTbasket d, prive, BoxTarget.ly, BoxTarget.Lx
    End If
    End If
Else
    If Tag$ <> "" Then
    Id& = Id& Mod 100
    Select Case Id& Mod 10
    Case 4, 5, 6
    y& = (yl& + y&) \ 2
    Case 7, 8, 9
    y& = yl&
    Case Else
    End Select
    f = 3
    Select Case Id& Mod 10
    Case 2, 5, 8
    f = 2
    Case 3, 6, 9
    f = 1
    Case Else
    End Select
    
    If (Id& Mod 10) > 0 Then
    LCTbasket d, prive, y&, x&
    d.FontTransparent = True
    d.CurrentX = d.CurrentX - dv15 * 2
    wwPlain DSTACK, prive, Tag$, xl& - x&, 10000, , True, f, , , True
    LCTbasket d, prive, BoxTarget.ly, BoxTarget.Lx
    End If
End If
    
End If
End With
End Function
Public Function GetTaskId() As Long
taskid = taskid + 1
If taskid = 10000 Then taskid = 1
GetTaskId = taskid

End Function
Sub Dispose()
'use strtemp
On Error Resume Next
Dim r$
While ISSTRINGA(kill2$, r$)
Kill strTemp + r$
Wend
End Sub

Sub Main()
' need to read registry form sub main
On Error Resume Next
dv15 = 1440 / DpiScrX
DisableProcessWindowsGhosting
OperatingSystem
 dv20 = 24.5
Randomize CDbl(timeGetTime)
JetPrefixUser = JetPrefixHelp
JetPostfixUser = JetPostfixHelp
JetPostfix = JetPostfixHelp
JetPrefix = JetPrefixHelp
 
basickey = "Software\m2000v4\"
' by default
'AddTwipsTop = 4 * Screen.TwipsPerPixelY
casesensitive = False
pagio$ = "LATIN"
pagiohtml$ = "DARK"
REFRESHRATE = 40
SizeDialog = 1
helpSizeDialog = 1
Settings = "time,normal,push"
selectorLastX = ScrX() / 4
selectorLastY = ScrY() / 4
AskLastX = ScrX() / 4
AskLastY = ScrY() / 4
sb2used = 0
ReDim sbf(50) As modfun
var2used = 0
ReDim var(50) As Variant

   StartingRes
   ''Dim iccex As tagInitCommonControlsEx
   ''With iccex
   ''    .lngSize = LenB(iccex)
   ''    .lngICC = ICC_USEREX_CLASSES
   ''End With
   ''InitCommonControlsEx iccex

clickMe2 = -1


Dim soros As New mStiva
Dim t As Long
ReDim q(0) As target

Set basestack1.Sorosref = globalstack

taskid = 999
DisableMidi
beat = 400 ' beat of 1/16
baseNote = 23
octava = 4
NOTA = 0
ENTASI = 127   '' volume
voices(0) = "CC#"
Randomize
Set TaskMaster = New TaskMaster
TaskMaster.Interval = 5
beeperBEAT = 300
MediaPlayer1.FileName = ""
defFontname = "Verdana"
my_system = OperatingPlatform
vol = 50
MediaPlayer1.setLeftVolume vol * 10
MediaPlayer1.setRightVolume vol * 10
deep = 10000
' funcdeep set in something
' step one we show the first form
'Form1.Show , Form5
ReDim MyDM(1 To 1) As Byte
DXP = Screen.TwipsPerPixelX
DYP = Screen.TwipsPerPixelY
Load Form5
' Load Form1
' Form1.Hide
If Not l_complete Then
'MsgBox "Loading of Form1 not complete"
End
Else
Form1.something
CloseAllConnections  ' new for ADO we keep objects not the connections
CleanupLibHandles
If Not s_complete Then
MsgBox "Language can't go Up"
End
End If
End If
End Sub



Function IsExp(basestack As basetask, a$, r As Double, Optional ByVal noand1 As Boolean = True) As Boolean
Dim par As Long
If LastErNum = -2 Then LastErNum = 0
IsExp = IsExpA(basestack, a$, r, par, noand1)
If LastErNum = -2 Then IsExp = False
If par > 0 Then IsExp = False
End Function
Function IsExpA(bstack As basetask, aa$, RR As Double, parenthesis As Long, Optional ByVal noand As Boolean = True) As Boolean
Dim r As Double, ac As Double, po As Double, MUL As Long, r1 As Double
Dim logic As Boolean, l As Boolean

IsExpA = False
If aa$ = "" Then Exit Function
RR = 0
Do While FastSymbol(aa$, "(")
parenthesis = parenthesis + 1
Loop
po = 1
ac = 0
' sign

Do
' first loop remove sign(s)
    Do
    If FastSymbol(aa$, "-") Then
            po = -po
        ElseIf Not FastSymbol(aa$, "+") Then
            Exit Do
        End If
    Loop
    
    If logical(bstack, aa$, r) Then
        IsExpA = True
        po = po * r
    ElseIf FastSymbol(aa$, "(") Then
                            If IsExp(bstack, aa$, r) Then
                                IsExpA = True
                                po = po * r
                                If Not FastSymbol(aa$, ")") Then
                                    IsExpA = False
                                    Exit Function
                                End If
                            End If
    Else
    
    IsExpA = False
    Exit Function

   End If
:
r1 = 1
MUL = 0
''second  loop Logic...
Do
    If Fast2Symbol(aa$, "**", "^", "") Then
            ' get from right number or expression
            If IsNumber(bstack, aa$, r) Then ' êïéôÜìå áí åßíáé áñéèìüò Þ ìåôáâëçôÞ
                po = po ^ r
            ElseIf FastSymbol(aa$, "(") Then  ' ðñþôá áíïßãåé ôçí ðáñÝíèåóç þóôå íá ìçí ðñï÷ùñÞóåé üôáí ç IsExp âñåß ôçí ðáñÝíèåóç )
                If IsExp(bstack, aa$, r) Then ' Ôþñá øÜ÷íïõìå ãéá ðáñÜóôáóç (ç IsExp êÜëåóç ôçí IsExpA êáé ôþñá êáëïýìå íÝá IsExp
                    po = po ^ r
                    If Not FastSymbol(aa$, ")") Then ' Ôçí ïðïßá ôçí øÜ÷íïõìå  åìåßò êáé ôçí ðåôÜìå
                        IsExpA = False
                        Exit Function
                    End If
                End If
            Else
                IsExpA = False
                Exit Function
            End If
    
    ElseIf MUL > 0 Then
            ' do it before we find next / or *
            Select Case MUL
            Case 1
                po = r1 * po
            
            Case 2
                If po = 0 Then
                    'DIVISION BY ZERO
                
                    MyErMacro aa$, "division by zero", "äéáßñåóç ìå ôï ìçäÝí"
                
                    IsExpA = False
                    Exit Function
                Else
                    po = r1 / po
                End If
            Case 3
                po = r1 * po
            Case 4
                If Int(po) = 0 Then
                    'DIVISION BY ZERO
                    MyErMacro aa$, "division by zero", "äéáßñåóç ìå ôï ìçäÝí"
                    IsExpA = False
                    Exit Function
                Else
                    po = Int(Int(r1) / Int(po))
                End If
            Case 5
                If Int(po) = 0 Then
                    'DIVISION BY ZERO
                    MyErMacro aa$, "division by zero", "äéáßñåóç ìå ôï ìçäÝí"
            
                    IsExpA = False
                    Exit Function
                Else
                    po = Sgn(r1) * (Int(Abs(r1)) - Int(Int(Abs(r1) / Abs(Int(po))) * Abs(Int(po))))
                End If
            End Select
            r1 = 1
            MUL = 0
             
    ElseIf FastSymbol(aa$, "*") Then
            If logical(bstack, aa$, r) Then
                MUL = 1
                r1 = po
                po = r
            ElseIf FastSymbol(aa$, "(") Then
                If IsExp(bstack, aa$, r) Then
                    MUL = 1
                    r1 = po
                    po = r
                    If Not FastSymbol(aa$, ")") Then
                        IsExpA = False
                        Exit Function
                    End If
                End If
            Else
                IsExpA = False
                Exit Function
            End If
    ElseIf FastSymbol(aa$, "/") Then
            If logical(bstack, aa$, r) Then
                MUL = 2
                r1 = po
                po = r
            ElseIf FastSymbol(aa$, "(") Then
                If IsExp(bstack, aa$, r) Then
                    MUL = 2
                    r1 = po
                    po = r
                    If Not FastSymbol(aa$, ")") Then
                        IsExpA = False
                        Exit Function
                    End If
                End If
            Else
                IsExpA = False
                Exit Function
            End If
    ' ElseIf IsLabelSymbolLatin(aa$, "DIV") Or IsLabelSymbol(aa$, "ÄÉÁ") Then
      ElseIf Fast2Label(aa$, "DIV", "ÄÉÁ", "", 3) Then
            If logical(bstack, aa$, r) Then
                MUL = 4
                r1 = po
                po = r
            ElseIf FastSymbol(aa$, "(") Then
                If IsExp(bstack, aa$, r) Then
                    MUL = 4
                    r1 = po
                    po = r
                    If Not FastSymbol(aa$, ")") Then
                        IsExpA = False
                        Exit Function
                    End If
                End If
            Else
                IsExpA = False
                Exit Function
            End If
ElseIf Fast2Label(aa$, "MOD", "ÕÐÏËÏÉÐÏ", "ÕÐÏË", 9) Then

            If logical(bstack, aa$, r) Then
                MUL = 5
                r1 = po
                po = r
            ElseIf FastSymbol(aa$, "(") Then
                If IsExp(bstack, aa$, r) Then
                    MUL = 5
                    r1 = po
                    po = r
                    If Not FastSymbol(aa$, ")") Then
                        IsExpA = False
                        Exit Function
                    End If
                End If
            Else
                IsExpA = False
                Exit Function
            End If
ElseIf FastSymbol(aa$, ")") Then
            If parenthesis > 0 Then
                parenthesis = parenthesis - 1
                po = ac + po
                ac = 0
            Else
                aa$ = ")" & aa$
                RR = ac + po
                Exit Function
            End If
ElseIf Fast2Label(aa$, "XOR", "ÁÐÏ", "", 3, Not noand) Then
'  good
  MUL = 3
If FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
    po = (ac + po)
    If po <> 0 Then po = -1
    If r <> 0 Then r = -1
  po = po Xor r
     ac = 0
        If Not FastSymbol(aa$, ")") Then
        IsExpA = False: Exit Function
        End If
   Else
   IsExpA = False: Exit Function
        End If
  ElseIf IsExp(bstack, aa$, r, False) Then
     po = (ac + po)
    If po <> 0 Then po = -1
    If r <> 0 Then r = -1
  po = po Xor r
     ac = 0
     Else
    IsExpA = False
    Exit Function
 End If


ElseIf Fast2Label(aa$, "OR", "Ç", "", 2, Not noand) Then
'  good
  MUL = 3
If FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
    po = (ac + po)
    If po <> 0 Then po = -1
    If r <> 0 Then r = -1
  po = po Or r
     ac = 0
        If Not FastSymbol(aa$, ")") Then
        IsExpA = False: Exit Function
        End If
   Else
   IsExpA = False: Exit Function
        End If
  ElseIf IsExp(bstack, aa$, r, False) Then
     po = (ac + po)
    If po <> 0 Then po = -1
    If r <> 0 Then r = -1
  po = po Or r
     ac = 0
     Else
    IsExpA = False
    Exit Function
 End If


ElseIf Fast2Label(aa$, "AND", "ÊÁÉ", "", 3, Not noand) Then
'  good
  MUL = 3
If FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
    po = (ac + po)
    If po <> 0 Then po = -1
    If r <> 0 Then r = -1
  po = po And r
     ac = 0
        If Not FastSymbol(aa$, ")") Then
        IsExpA = False: Exit Function
        End If
   Else
   IsExpA = False: Exit Function
        End If
  ElseIf IsExp(bstack, aa$, r, False) Then
     po = (ac + po)
    If po <> 0 Then po = -1
    If r <> 0 Then r = -1
  po = po And r
     ac = 0
 End If
ElseIf FastSymbol(aa$, "<>") Then
'  good
  MUL = 3
If FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
  po = (ac + po) <> r
     ac = 0
        If Not FastSymbol(aa$, ")") Then
        IsExpA = False: Exit Function
        End If
   Else
   IsExpA = False: Exit Function
        End If
  ElseIf IsExp(bstack, aa$, r, False) Then
  po = (ac + po) <> r
     ac = 0
     Else
    IsExpA = False
    Exit Function
 End If
 
ElseIf FastSymbol(aa$, "<=") Then
'  good
  MUL = 3
   
    

If FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
  po = (ac + po) <= r
     ac = 0
        If Not FastSymbol(aa$, ")") Then
        IsExpA = False: Exit Function
        End If
   Else
   IsExpA = False: Exit Function
        End If
  ElseIf IsExp(bstack, aa$, r, False) Then
  po = (ac + po) <= r
     ac = 0
     Else
    IsExpA = False
    Exit Function
 End If

ElseIf FastSymbol(aa$, ">=") Then
'  good
  MUL = 3
   
    

If FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
  po = (ac + po) >= r
     ac = 0
        If Not FastSymbol(aa$, ")") Then
        IsExpA = False: Exit Function
        End If
   Else
   IsExpA = False: Exit Function
        End If
  ElseIf IsExp(bstack, aa$, r, False) Then
  po = (ac + po) >= r
     ac = 0
     Else
    IsExpA = False
    Exit Function
 End If
    
ElseIf FastSymbol(aa$, ">") Then
'  good
  MUL = 3
   
    

If FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
  po = (ac + po) > r
     ac = 0
        If Not FastSymbol(aa$, ")") Then
        IsExpA = False: Exit Function
        End If
   Else
   IsExpA = False: Exit Function
        End If
  ElseIf IsExp(bstack, aa$, r, False) Then
  po = (ac + po) > r
     ac = 0
     Else
    IsExpA = False
    Exit Function
 End If
    
ElseIf FastSymbol(aa$, "<") Then
'  good
  MUL = 3
   
    

If FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
  po = (ac + po) < r
     ac = 0
        If Not FastSymbol(aa$, ")") Then
        IsExpA = False: Exit Function
        End If
   Else
   IsExpA = False: Exit Function
        End If
  ElseIf IsExp(bstack, aa$, r, False) Then
  po = (ac + po) < r
     ac = 0
     Else
    IsExpA = False
    Exit Function
 End If
ElseIf FastSymbol(aa$, "==") Then
'  good
  MUL = 3
   
    

If FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
    If r = 0 Then
            po = (ac + po)
            If po = 0 Then
                po = True
            Else
                po = MyRound(po, 10) = 0
            End If
    Else
  po = MyRound((((ac + po) - r) / r), 10) = 0
  End If
     ac = 0
        If Not FastSymbol(aa$, ")") Then
        IsExpA = False: Exit Function
        End If
   Else
   IsExpA = False: Exit Function
        End If
  ElseIf IsExp(bstack, aa$, r, False) Then
    If r = 0 Then
            po = (ac + po)
            If po = 0 Then
                po = True
            Else
                po = MyRound(po, 10) = 0
            End If
    Else
  po = MyRound((((ac + po) - r) / r), 10) = 0
  End If
     ac = 0
     Else
    IsExpA = False
    Exit Function
 End If

ElseIf FastSymbol(aa$, "=") Then
'  good
  MUL = 3
   
    

If FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
  po = (ac + po) = r
     ac = 0
        If Not FastSymbol(aa$, ")") Then
        IsExpA = False: Exit Function
        End If
   Else
   IsExpA = False: Exit Function
        End If
  ElseIf IsExp(bstack, aa$, r, False) Then
  po = (ac + po) = r
     ac = 0
     Else
    IsExpA = False
    Exit Function
 End If
ElseIf FastSymbol(aa$, "-") Then
  ' second parameter push old value to ac
  ' get new one to r
  ' check if we have string logical
  ' or we have parenthesis (....
  ' or just a perform a -1*
If logical(bstack, aa$, r) Then
    r1 = -r1
    MUL = 3
    ac = ac + po
    po = r
    
 ElseIf FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
    r1 = -r1
    MUL = 3
    ac = ac + po
    po = r
    If Not FastSymbol(aa$, ")") Then
    IsExpA = False
    Exit Function
    End If
    End If
  Else
    r1 = -r1
  End If
ElseIf FastSymbol(aa$, "+") Then
If logical(bstack, aa$, r) Then
    
    MUL = 3
    ac = ac + po
    po = r
    ElseIf FastSymbol(aa$, "(") Then
    If IsExp(bstack, aa$, r) Then
    MUL = 3
    ac = ac + po
    po = r
    If Not FastSymbol(aa$, ")") Then
    IsExpA = False
    Exit Function
    End If
    End If
    
End If
Else
logic = True
Exit Do
End If
Loop
ac = ac + po
po = 1
Loop Until logic

RR = ac

Do While parenthesis > 0
If FastSymbol(aa$, ")") Then
parenthesis = parenthesis - 1
Else
Exit Do
End If
Loop
End Function
Function IsNumberA(a$, k As Long) As Boolean
If a$ <> "" Then
k = Val("0" & Left$(a$, InStr(2, a$ & " ", " ") - 1))


a$ = Mid$(a$, InStr(2, a$ & " ", " "))
IsNumberA = True
Else
IsNumberA = False
End If
End Function

Function IsNumberD(a$, d As Double) As Boolean
Dim a1 As Long
If a$ <> "" Then
For a1 = 1 To Len(a$) + 1
Select Case Mid$(a$, a1, 1)
Case " ", ",", ChrW(160)
If a1 > 1 Then Exit For
Case Is = Chr(2)
If a1 = 1 Then Exit Function
Exit For
End Select
Next a1
If a1 > Len(a$) Then a1 = Len(a$) + 1
d = CDbl(Val("0" & Left$(a$, a1 - 1)))
a$ = Mid$(a$, a1)
IsNumberD = True
Else
IsNumberD = False
End If
End Function
Function IsNumberLabel(a$, Label$) As Boolean
Dim a1 As Long, LI As Long, a2 As Long
LI = Len(a$)
' No zero number.
' First 1....9
' second ...to fifth (0 to 9) 99999 is the maximum
'
If LI > 0 Then
a1 = 1

While Mid$(a$, a1, 1) = " ": a1 = a1 + 1: Wend
' we start from a1
a2 = a1
If a1 > LI Then a$ = "": Exit Function
If LI > 5 + a2 Then LI = 4 + a2
If Mid$(a$, a1, 1) Like "[0-9]" Then
Do While a1 <= LI
a1 = a1 + 1
If Not Mid$(a$, a1, 1) Like "[0-9]" Then Exit Do

Loop
Label$ = Mid$(a$, a2, a1 - a2): a$ = Mid$(a$, a1)
IsNumberLabel = True
End If

End If
End Function
Function IsNumberQuery(a$, fr As Long, r As Double, lR As Long) As Boolean
Dim SG As Long, sng As Long, n$, ig$, DE$, sg1 As Long, ex$   ', e$
' ti kanei to e$
If a$ = "" Then IsNumberQuery = False: Exit Function
SG = 1
sng = fr - 1
    Do While sng < Len(a$)
    sng = sng + 1
    Select Case Mid$(a$, sng, 1)
    Case " ", "+", ChrW(160)
    Case "-"
    SG = -SG
    Case Else
    Exit Do
    End Select
    Loop
n$ = Mid$(a$, sng)

If Val("0" & Mid$(a$, sng, 1)) = 0 And Left(Mid$(a$, sng, 1), sng) <> "0" And Left(Mid$(a$, sng, 1), sng) <> "." Then
IsNumberQuery = False

Else
'compute ig$
    If Mid$(a$, sng, 1) = "." Then
    ' no long part
    ig$ = "0"
    DE$ = "."

    Else
    Do While sng <= Len(a$)
        
        Select Case Mid$(a$, sng, 1)
        Case "0" To "9"
        ig$ = ig$ & Mid$(a$, sng, 1)
        Case "."
        DE$ = "."
        Exit Do
        Case Else
        Exit Do
        End Select
       sng = sng + 1
    Loop
    End If
    ' compute decimal part
    If DE$ <> "" Then
      sng = sng + 1
        Do While sng <= Len(a$)
       
        Select Case Mid$(a$, sng, 1)
        Case " ", ChrW(160)
        If Not (sg1 And Len(ex$) = 1) Then
        Exit Do
        End If
        Case "0" To "9"
        If sg1 Then
        ex$ = ex$ & Mid$(a$, sng, 1)
        Else
        DE$ = DE$ & Mid$(a$, sng, 1)
        End If
        Case "E", "e" ' ************check it
             If ex$ = "" Then
               sg1 = True
        ex$ = "E"
        Else
        Exit Do
        End If
   
               Case "Å", "å" ' ************check it
                         If ex$ = "" Then
               sg1 = True
        ex$ = "E"
        Else
        Exit Do
        End If
        
        
        Case "+", "-"
        If sg1 And Len(ex$) = 1 Then
         ex$ = ex$ & Mid$(a$, sng, 1)
        Else
        Exit Do
        End If
        Case Else
        Exit Do
        End Select
         sng = sng + 1
        Loop
        If ex$ = "E" Or ex$ = "E-" Or ex$ = "E+" Then
        sng = sng - Len(ex$)
        End If
    End If
    If ig$ = "" Then
    IsNumberQuery = False
    lR = 1
    Else
    If SG < 0 Then ig$ = "-" & ig$
    Err.clear
    On Error Resume Next
    If Len(ex$) = 1 Then
    n$ = ig$ & DE$ & ex$ + "1"
     If IsExp(basestack1, n$, r) Then
    sng = Len(ig$ & DE$ & ex$) - Len(n$)
        fr = 0
    End If
       Else
    n$ = ig$ & DE$ & ex$
    If IsExp(basestack1, n$, r) Then
    sng = Len(ig$ & DE$ & ex$) - Len(n$)
        fr = 0
    Else
    End If
    r = Val(ig$ & DE$ & ex$)
    End If
    If Err > 0 Then
    lR = 0
    Else
      'A$ = Mid$(A$, sng)
    lR = sng - fr + 1
       IsNumberQuery = True
    End If
    End If
End If
End Function


Function IsNumberOnly(a$, fr As Long, r As Double, lR As Long) As Boolean
Dim SG As Long, sng As Long, n$, ig$, DE$, sg1 As Long, ex$   ', e$
' ti kanei to e$
If a$ = "" Then IsNumberOnly = False: Exit Function
SG = 1
sng = fr - 1
    Do While sng < Len(a$)
    sng = sng + 1
    Select Case Mid$(a$, sng, 1)
    Case " ", "+", ChrW(160)
    Case "-"
    SG = -SG
    Case Else
    Exit Do
    End Select
    Loop
n$ = Mid$(a$, sng)

If Val("0" & Mid$(a$, sng, 1)) = 0 And Left(Mid$(a$, sng, 1), sng) <> "0" And Left(Mid$(a$, sng, 1), sng) <> "." Then
IsNumberOnly = False

Else
'compute ig$
    If Mid$(a$, sng, 1) = "." Then
    ' no long part
    ig$ = "0"
    DE$ = "."

    Else
    Do While sng <= Len(a$)
        
        Select Case Mid$(a$, sng, 1)
        Case "0" To "9"
        ig$ = ig$ & Mid$(a$, sng, 1)
        Case "."
        DE$ = "."
        Exit Do
        Case Else
        Exit Do
        End Select
       sng = sng + 1
    Loop
    End If
    ' compute decimal part
    If DE$ <> "" Then
      sng = sng + 1
        Do While sng <= Len(a$)
       
        Select Case Mid$(a$, sng, 1)
        Case " ", ChrW(160)
        If Not (sg1 And Len(ex$) = 1) Then
        Exit Do
        End If
        Case "0" To "9"
        If sg1 Then
        ex$ = ex$ & Mid$(a$, sng, 1)
        Else
        DE$ = DE$ & Mid$(a$, sng, 1)
        End If
        Case "E", "e" ' ************check it
             If ex$ = "" Then
               sg1 = True
        ex$ = "E"
        Else
        Exit Do
        End If
   
               Case "Å", "å" ' ************check it
                         If ex$ = "" Then
               sg1 = True
        ex$ = "E"
        Else
        Exit Do
        End If
        
        
        Case "+", "-"
        If sg1 And Len(ex$) = 1 Then
         ex$ = ex$ & Mid$(a$, sng, 1)
        Else
        Exit Do
        End If
        Case Else
        Exit Do
        End Select
         sng = sng + 1
        Loop
        If ex$ = "E" Or ex$ = "E-" Or ex$ = "E+" Then
        sng = sng - Len(ex$)
        End If
    End If
    If ig$ = "" Then
    IsNumberOnly = False
    lR = 1
    Else
    If SG < 0 Then ig$ = "-" & ig$
    r = Val(ig$ & DE$ & ex$)
      'A$ = Mid$(A$, sng)
    lR = sng - fr + 1
    IsNumberOnly = True
    End If
End If
End Function


Function IsNumberD2(a$, d As Double) As Boolean
' for inline stacitems
Dim a1 As Long
If a$ <> "" Then
For a1 = 1 To Len(a$) + 1
Select Case Mid$(a$, a1, 1)
Case " ", ChrW(160)
If a1 > 1 Then Exit For
Case Is = Chr(2)
If a1 = 1 Then Exit Function
Exit For
End Select
Next a1
If a1 > Len(a$) Then a1 = Len(a$) + 1
If IsNumberOnly(a$, 1, d, a1) Then
a$ = Mid$(a$, a1)
IsNumberD2 = True
Else
IsNumberD2 = False
End If
Else
IsNumberD2 = False
End If

End Function

Function IsNumberD3(a$, fr As Long, a1 As Long) As Boolean
' for inline stacitems
Dim d As Double
If a$ <> "" Then
For a1 = fr To Len(a$) + 1
Select Case Mid$(a$, a1, 1)
Case " ", ChrW(160)
If a1 > fr Then Exit For
Case Is = Chr(2)
If a1 = fr Then Exit Function
Exit For
End Select
Next a1
If a1 > Len(a$) Then a1 = Len(a$) + 1
If IsNumberOnly(a$, fr, d, a1) Then
IsNumberD3 = True
Else
a1 = fr
IsNumberD3 = False
End If
Else
a1 = fr
IsNumberD3 = False
End If

End Function

Sub tsekme()
Dim b$, l As Double
b$ = " 12323 45.44545 -2345.343 .345 345.E-45 34.53 434 534 534 534 345"
'b$ = ""
Debug.Print b$
While IsNumberD2(b$, l)
Debug.Print l
Wend
End Sub
Function IsNumberCheck(a$, r As Double) As Boolean
Dim sng&, SG As Double, ig$, DE$, sg1 As Boolean, ex$, s$
SG = 1
Do While sng& < Len(a$)
sng& = sng& + 1
Select Case Mid$(a$, sng&, 1)
Case "#"
    If Len(a$) > sng& Then
    If MaybeIsSymbolNoSpace(Mid$(a$, sng& + 1, 1), "[0123456789ABCDEFabcdef]") Then
    s$ = "0x00" + Mid$(a$, sng& + 1, 6)
    If Len(s$) < 10 Then Exit Function
        If IsNumberCheck(s$, r) Then
        If s$ <> "" Then
          
             
        Else
            s$ = Right$("00000000" & Mid$(a$, sng& + 1, 6), 8)
            a$ = Mid$(a$, sng& + 7)
   r = SG * -(CDbl(UNPACKLNG(Right$(s$, 2)) * 65536#) + CDbl(UNPACKLNG(Mid$(s$, 5, 2)) * 256#) + CDbl(UNPACKLNG(Mid$(s$, 3, 2))))
   IsNumberCheck = True
   Exit Function
        End If
        End If
        Else
        
    End If
    Else

    '' out
    End If
    Exit Function
Case " ", "+", ChrW(160)
Case "-"
SG = -SG
Case Else
Exit Do
End Select
Loop
a$ = Mid$(a$, sng&)
sng& = 1
If Val("0" & Mid$(a$, sng&, 1)) = 0 And Left(Mid$(a$, sng&, 1), sng&) <> "0" And Left(Mid$(a$, sng&, 1), sng&) <> "." Then
IsNumberCheck = False
Else

    If Mid$(a$, sng&, 1) = "." Then

    ig$ = "0"
    DE$ = "."
    ElseIf LCase(Mid$(a$, sng&, 2)) Like "0[x÷]" Then
    ig$ = "0"
    DE$ = "0x"
  sng& = sng& + 1
Else
    Do While sng& <= Len(a$)
        
        Select Case Mid$(a$, sng&, 1)
        Case "0" To "9"
        ig$ = ig$ & Mid$(a$, sng&, 1)
        Case "."
        DE$ = "."
        Exit Do
        Case Else
        Exit Do
        End Select
       sng& = sng& + 1
    Loop
    End If
    ' compute decimal part
    If DE$ <> "" Then
      sng& = sng& + 1
        Do While sng& <= Len(a$)
       
        Select Case Mid$(a$, sng&, 1)
        Case " ", ChrW(160)
        If Not (sg1 And Len(ex$) = 1) Then
        Exit Do
        End If
        Case "A" To "D", "a" To "d", "F", "f"
        If Left$(DE$, 2) = "0x" Then
        DE$ = DE$ & Mid$(a$, sng&, 1)
        End If
        Case "0" To "9"
        If sg1 Then
        ex$ = ex$ & Mid$(a$, sng&, 1)
        Else
        DE$ = DE$ & Mid$(a$, sng&, 1)
        End If
        Case "E", "e"
         If Left$(DE$, 2) = "0x" Then
         DE$ = DE$ & Mid$(a$, sng&, 1)
         Else
              If ex$ = "" Then
               sg1 = True
        ex$ = "E"
        Else
        Exit Do
        End If
        End If
        Case "Å", "å"
                         If ex$ = "" Then
               sg1 = True
        ex$ = "E"
        Else
        Exit Do
        End If
        ex$ = "E"
        
        Case "+", "-"
        If sg1 And Len(ex$) = 1 Then
         ex$ = ex$ & Mid$(a$, sng&, 1)
        Else
        Exit Do
        End If
        Case Else
        Exit Do
        End Select
         sng& = sng& + 1
        Loop
        If ex$ = "E" Or ex$ = "E-" Or ex$ = "E+" Then sng& = sng& - Len(ex$)
    End If
    If ig$ = "" Then
    IsNumberCheck = False
    Else
  ''  If SG < 0 Then ig$ = "-" & ig$
    If Left$(DE$, 2) = "0x" Then
           ' r = UNPACKLNG(Left$(ex$, 8))
            If Mid$(DE$, 3) = "" Then
            r = 0
            Else
            DE$ = Right$("00000000" & Mid$(DE$, 3), 8)
            r = CDbl(UNPACKLNG(Left$(DE$, 4)) * 65536#) + CDbl(UNPACKLNG(Right$(DE$, 4)))
            End If
    Else
        If SG < 0 Then ig$ = "-" & ig$
                   On Error Resume Next
                           If ex$ = "E" Or ex$ = "E-" Or ex$ = "E+" Then
                               r = Val(ig$ & DE$ & ex$ & "0")
                               sng = sng + Len(ex$)
                           ElseIf ex$ <> "" Then
                               If Val(Mid$(ex$, 2)) > 308 Or Val(Mid$(ex$, 2)) < -324 Then
                                   r = Val(ig$ & DE$)
                                   sng = sng - Len(ex$)
                                   ex$ = ""
                                   
                               Else
                                   r = Val(ig$ & DE$ & ex$)
                               End If
                           Else
                       
                               r = Val(ig$ & DE$)
                           End If
                     If Err.Number = 6 Then
                         If Len(ex$) > 2 Then
                             ex$ = Left$(ex$, Len(ex$) - 1)
                             sng = sng - 1
                             Err.clear
                             r = Val(ig$ & DE$ & ex$)
                             If Err.Number = 6 Then
                                 sng = sng - Len(ex$)
                                  r = Val(ig$ & DE$)
                             End If
                         End If
                       MyEr "Error in exponet", "ËÜèïò óôïí åêèÝôç"
                       IsNumberCheck = False
                       Exit Function
                     End If
           
         End If
           a$ = Mid$(a$, sng&)
           IsNumberCheck = True
End If
End If
End Function
Function IsNumber(bstack As basetask, a$, r As Double) As Boolean
Dim VR As Long, v$, n$, V1&, w1 As Long, w2 As Long, p As Double, s1$, dd As Long, dn As Long, W3 As Long
Dim PP As Double, pppp As mArray, nBstack As basetask, pppp1 As mArray
Dim anything As Object

If a$ = "" Then IsNumber = False: Exit Function
On Error Resume Next
Dim sng&, SG As Double, ig$, DE$, sg1 As Boolean, ex$, s$
Dim r2 As Double, r3 As Double, r4 As Double, par As Boolean
SG = 1

Set bstack.LastObj = Nothing
'compute the sign portion
againfordot:
Do While sng& < Len(a$)
sng& = sng& + 1
Select Case Mid$(a$, sng&, 1)
Case "#"
    If Len(a$) > sng& Then
    If MaybeIsSymbolNoSpace(Mid$(a$, sng& + 1, 1), "[0123456789ABCDEFabcdef]") Then
    s$ = "0x00" + Mid$(a$, sng& + 1, 6)
    If Len(s$) < 10 Then Exit Function
        If IsNumberCheck(s$, r) Then
        If s$ <> "" Then
          
             
        Else
            s$ = Right$("00000000" & Mid$(a$, sng& + 1, 6), 8)
            a$ = Mid$(a$, sng& + 7)
   r = SG * -(CDbl(UNPACKLNG(Right$(s$, 2)) * 65536#) + CDbl(UNPACKLNG(Mid$(s$, 5, 2)) * 256#) + CDbl(UNPACKLNG(Mid$(s$, 3, 2))))
   IsNumber = True
   Exit Function
        End If
        End If
        Else
        
    End If
    Else

    '' out
    End If
    Exit Function
Case " ", "+", ChrW(160)
Case "-"
SG = -SG
Case Else
Exit Do
End Select
Loop
a$ = Mid$(a$, sng&)
n$ = a$
w2 = Len(n$)
sng& = 1
V1& = IsLabelBig(bstack, n$, v$, par)

If V1& = 0 Then GoTo zerohere
''''''''''''''''''If NoOptimum Then If v1& > 0 Then par = False
If par Then
par = False
removethis:
V1& = Abs(V1&)
 
 If V1& = 1 Then
 GoTo LOOKFORVARNUM
 ElseIf V1& = 4 Then
 GoTo LOOKFORVARNUM4
 ElseIf V1& = 5 Or V1& = 7 Then
 GoTo LOOKFORSUBNUM
 Else
 '
 IsNumber = False
    Exit Function
 End If
 ''
End If
Select Case V1&
Case 1
Select Case v$
Case "THIS", "ÁÕÔÏ"
Set bstack.LastObj = Nothing

 If bstack.UseGroupname <> "" Then
     s1$ = Left$(bstack.UseGroupname, Len(bstack.UseGroupname) - 1)
     If GetVar(bstack, s1$, W3) Then
          CopyGroup var(W3), bstack
          
    End If
    Else
    s1$ = ".DELETEME"
    If IsLabel(bstack, s1$, v$) < 0 Then
    If Len(v$) = 8 Then a$ = n$: IsNumber = False: Exit Function
    v$ = Left$(v$, Len(v$) - 9)
     If GetVar(bstack, v$, W3) Then
          CopyGroup var(W3), bstack
          
    End If
    End If
    End If
     r = SG * 0
IsNumber = True
a$ = n$
Exit Function
Case "PEN", "ÐÅÍÁ"
a$ = n$
With players(GetCode(bstack.Owner))
For w1 = 0 To 15
If QBColor(w1) = .mypen Then
r = SG * w1
IsNumber = True
Exit Function
End If
Next w1
r = SG * -.mypen
IsNumber = True

Exit Function
End With
'myCompEq("ó","ò")
Case "HWND", "ÐÁÑÁÈÕÑÏ"
r = SG * bstack.Owner.hWnd
a$ = n$
IsNumber = True
Exit Function
Case "LOCALE", "ÔÏÐÉÊÏ"
r = SG * cLid
    a$ = n$
    IsNumber = True
    Exit Function

Case "CODEPAGE", "ÊÙÄÉÊÏÓÅËÉÄÁ"
r = SG * UserCodePage
    a$ = n$
    IsNumber = True
    Exit Function
Case "SPEECH", "ËÏÃÏÓ"
  r = SG * NumVoices

    a$ = n$
    IsNumber = True
    Exit Function
Case "ERROR", "ËÁÈÏÓ"
  r = SG * LastErNum1
 LastErNum1 = 0  'reset when readed
    a$ = n$
    IsNumber = True
    Exit Function
Case "SCREEN.Y", "ÁÍÁËÕÓÇ.Õ"
  r = SG * ScrY()
    a$ = n$
    IsNumber = True
    Exit Function
Case "SCREEN.X", "ÁÍÁËÕÓÇ.×"
  r = SG * ScrX()
     a$ = n$
    IsNumber = True
    Exit Function
Case "TWIPSY", "ÕØÏÓ.ÓÇÌÅÉÏÕ"
  r = SG * Screen.TwipsPerPixelY

    a$ = n$
    IsNumber = True
    Exit Function
Case "TWIPSX", "ÐËÁÔÏÓ.ÓÇÌÅÉÏÕ"
  r = SG * Screen.TwipsPerPixelX
    a$ = n$
    IsNumber = True
    Exit Function
Case "REPORTLINES", "ÃÑÁÌÌÅÓÁÍÁÖÏÑÁÓ"
  r = SG * players(GetCode(bstack.Owner)).LastReportLines
    a$ = n$
    IsNumber = True
    Exit Function
Case "LINESPACE", "ÄÉÁÓÔÉ×Ï"
    r = SG * players(GetCode(bstack.Owner)).uMineLineSpace '' bstack.linespace
    a$ = n$
    IsNumber = True
    Exit Function
Case "MODE", "ÔÕÐÏÓ"
With players(GetCode(bstack.Owner))
If bstack.toprinter Then
    If .uMineLineSpace > .MineLineSpace Then
        r = SG * .SZ / 6
    Else
         r = SG * .SZ / 3
    End If
    Else
    If .uMineLineSpace > .MineLineSpace Then
        r = SG * .SZ / 2
    Else
         r = SG * .SZ
    End If
    
    
    End If
    End With
    a$ = n$
    IsNumber = True
    Exit Function
Case "MEMORY", "ÌÍÇÌÇ"
    r = SG * check_mem
    a$ = n$
    IsNumber = True
    Exit Function
Case "CHARSET", "×ÁÑÁÊÔÇÑÅÓ"   ' charset of the object to display
  r = SG * players(GetCode(bstack.Owner)).charset
    a$ = n$
    IsNumber = True
    Exit Function
    Case "ITALIC", "ÐËÁÃÉÁ"  ' charset of the object to display
    
    r = SG * players(GetCode(bstack.Owner)).italics
    a$ = n$
    IsNumber = True
    Exit Function
    Case "BOLD", "ÖÁÑÄÉÁ"  ' charset of the object to display

    r = SG * players(GetCode(bstack.Owner)).bold
    a$ = n$
    IsNumber = True
    Exit Function

Case "COLORS", "×ÑÙÌÁÔÁ"
    r = SG * 2# ^ bitsPerPixel
    a$ = n$
    IsNumber = True
    Exit Function
Case "ÁÕÎÏÕÓÁ", "ASCENDING"
    r = 0
    a$ = n$
    IsNumber = True
    Exit Function
Case "ÖÈÉÍÏÕÓÁ", "DESCENDING"
    r = SG
    a$ = n$
    IsNumber = True
    Exit Function
'Case "ÐÑÏÓÁÑÌÏÃÇÓ", "UPDATABLE"
  '  r = sg * dbUpdatableField
   ' a$ = N$
   ' IsNumber = True
   ' Exit Function

' 1 for boolean
' 2 for byte number
' 3 for long
' 4 for long long
' 5 for currency
' 6 float single
' 7 float double
' 8 date
' 9 binary
' 10 text
' 11 ole
' 12 memo
Case "BOOLEAN", "ËÏÃÉÊÏÓ"
    r = SG * 1
        a$ = n$
    IsNumber = True
    Exit Function
Case "BYTE", "ØÇÖÉÏ"
    r = SG * 2
        a$ = n$
    IsNumber = True
    Exit Function
Case "INTEGER", "ÁÊÅÑÁÉÏÓ"
    r = SG * 3
        a$ = n$
    IsNumber = True
    Exit Function
Case "LONG", "ÌÁÊÑÕÓ"
    r = SG * 4
        a$ = n$
    IsNumber = True
    Exit Function
Case "CURRENCY", "ËÏÃÉÓÔÉÊÏ"
    r = SG * 5
        a$ = n$
    IsNumber = True
    Exit Function
Case "SINGLE", "ÁÐËÏÓ"
    r = SG * 6
        a$ = n$
    IsNumber = True
    Exit Function
Case "DOUBLE", "ÄÉÐËÏÓ"
    r = SG * 7
        a$ = n$
    IsNumber = True
    Exit Function
Case "DATEFIELD", "ÇÌÅÑÏÌÇÍÉÁ"
    r = SG * 8
        a$ = n$
    IsNumber = True
    Exit Function
Case "BINARY", "ÄÕÁÄÉÊÏ"
    r = SG * 9
        a$ = n$
    IsNumber = True
    Exit Function
Case "TEXT", "ÊÅÉÌÅÍÏ"
    r = SG * 10
        a$ = n$
    IsNumber = True
    Exit Function
Case "OLE"
    r = SG * 11
        a$ = n$
    IsNumber = True
    Exit Function
Case "MEMO", "ÕÐÏÌÍÇÌÁ"
    r = SG * 12
        a$ = n$
    IsNumber = True
    Exit Function
Case "REVISION", "ÁÍÁÈÅÙÑÇÓÇ"
    r = SG * Revision
    a$ = n$
    IsNumber = True
    Exit Function
  Case "BROWSER", "ÁÍÁËÏÃÉÏ"
        
        r = SG * (Trim(LCase(Form1.view1.LocationURL)) = "about:blank" Or Form1.view1.Visible = False)
    a$ = n$
    IsNumber = True
    Exit Function
Case "VERSION", "ÅÊÄÏÓÇ"
    r = SG * Val(CStr(VerMajor) & "." & CStr(VerMinor))
    a$ = n$
    IsNumber = True
    Exit Function
Case "MOTION.X", "ÊÉÍÇÓÇ.×"
With bstack
If .toprinter Then
    r = 0
Else
    r = SG * bstack.Owner.Left
    End If
    End With
    a$ = n$
    IsNumber = True
    Exit Function
Case "MOTION.Y", "ÊÉÍÇÓÇ.Õ"
With bstack
If .toprinter Then
    r = 0
Else
    r = SG * .Owner.top
    End If
    
    End With
    a$ = n$
    IsNumber = True

    Exit Function
Case "MOTION.XW", "ÊÉÍÇÓÇ.×Ð", "MOTION.WX", "ÊÉÍÇÓÇ.Ð×"
    r = SG * Form1.Left
    a$ = n$
    IsNumber = True
    Exit Function
Case "MOTION.YW", "ÊÉÍÇÓÇ.ÕÐ", "MOTION.WY", "ÊÉÍÇÓÇ.ÐÕ"
    r = SG * Form1.top
    a$ = n$
    IsNumber = True
    Exit Function
Case "FIELD", "ÐÅÄÉÏ"
    r = SG * result
    
    a$ = n$
    IsNumber = True
    Exit Function
Case "MOUSE.KEY", "ÄÅÉÊÔÇÓ.ÊÏÌ"
  
    r = SG * mouse


       a$ = n$
    IsNumber = True
    Exit Function
Case "MOUSE", "ÄÅÉÊÔÇÓ"

If Not releasemouse Then
If Not Form1.Visible Then Form1.Visible = True
End If
MyDoEvents

     r = SG * MOUB

    

a$ = n$
    IsNumber = True
    Exit Function
Case "MOUSE.X", "ÄÅÉÊÔÇÓ.×"

With bstack
If .toprinter Then
'mouyb = Printer.CurrentY
r = Form1.PrinterDocument1.CurrentX
ElseIf .toback Then
'mouyb = mouy
r = MOUSEX(Form1.Left)
Else
'mouyb = mouy - di.top
r = MOUSEX(Form1.Left + bstack.Owner.Left)
End If
End With
      a$ = n$
    IsNumber = True
    Exit Function
Case "MOUSE.Y", "ÄÅÉÊÔÇÓ.Õ"
With bstack
If .toprinter Then

r = Form1.PrinterDocument1.CurrentY
ElseIf .toback Then
'mouyb = mouy
r = MOUSEY(Form1.top)
Else
'mouyb = mouy - di.top
r = MOUSEY(Form1.top + bstack.Owner.top)
End If
End With
       a$ = n$
    IsNumber = True
    Exit Function
Case "MOUSEA.X", "ÄÅÉÊÔÇÓÁ.×"
  
    r = SG * MOUSEX(Form1.Left)
    
      a$ = n$
    IsNumber = True
    Exit Function
Case "MOUSEA.Y", "ÄÅÉÊÔÇÓÁ.Õ"
 
    r = SG * MOUSEY(Form1.top)
   
       a$ = n$
    IsNumber = True
    Exit Function

Case "TRUE", "ÁËÇÈÅÓ", "ÁËÇÈÇÓ"
    r = SG * -1
    a$ = n$
    IsNumber = True
    Exit Function
Case "FALSE", "ØÅÕÄÅÓ", "ØÅÕÄÇÓ"
    r = 0
    a$ = n$
    IsNumber = True
    Exit Function
Case "STACK.SIZE", "ÌÅÃÅÈÏÓ.ÓÙÑÏÕ"
    IsNumber = True
    r = SG * bstack.soros.Total
    a$ = n$
    Exit Function
Case "ISNUM", "ÅÉÍÁÑ"
    IsNumber = True
      If bstack.soros.Total > 0 Then
    If bstack.soros.PopType = "N" Then r = SG * True Else r = 0
    Else
    r = 0
    End If
    a$ = n$
    Exit Function
Case "PI", "ÐÉ"
    r = SG * Pi
    a$ = n$
    IsNumber = True
    Exit Function
Case "NOT", "Ï×É", "ÄÅÍ"
    r = SG * -1
    a$ = "-" & n$
    IsNumber = True
    Exit Function
Case "ISLET", "ÅÉÍÃÑ"
    IsNumber = True
    If bstack.soros.Total > 0 Then
    If bstack.soros.PopType = "S" Then r = SG * True Else r = 0
    End If
    a$ = n$
    Exit Function
Case "WIDTH", "ÐËÁÔÏÓ"
    IsNumber = True
    r = SG * players(GetCode(bstack.Owner)).mx
    a$ = n$
    Exit Function
Case "POINT", "ÓÇÌÅÉÏ"
'  dsprite ??
    IsNumber = True
    
    With players(GetCode(bstack.Owner))
       r = SG * -(GetPixel(bstack.Owner.hDC, .XGRAPH \ dv15, .YGRAPH \ dv15) And &HFFFFFF)
    End With
    a$ = n$
    Exit Function
Case "POS.X", "ÈÅÓÇ.×"
    IsNumber = True
    r = SG * players(GetCode(bstack.Owner)).XGRAPH
    a$ = n$
    Exit Function
Case "POS.Y", "ÈÅÓÇ.Õ"
    IsNumber = True
    r = SG * players(GetCode(bstack.Owner)).YGRAPH
    a$ = n$
    Exit Function
Case "SCALE.X", "ÊËÉÌÁÎ.×", "×.ÓÇÌÅÉÁ", "X.TWIPS"
    IsNumber = True
    If bstack.toprinter Then
    r = SG * Form1.PrinterDocument1.ScaleWidth
    Else
    r = SG * players(GetCode(bstack.Owner)).MAXXGRAPH
    End If
    a$ = n$
    Exit Function
Case "SCALE.Y", "ÊËÉÌÁÎ.Õ", "Õ.ÓÇÌÅÉÁ", "Y.TWIPS"
    IsNumber = True
    If bstack.toprinter Then
    r = SG * Form1.PrinterDocument1.ScaleHeight
    Else
    r = SG * players(GetCode(bstack.Owner)).MAXYGRAPH
    End If
    a$ = n$
    Exit Function
Case "EMPTY", "ÊÅÍÏ"
    IsNumber = True
    r = SG * (bstack.soros.Total = 0)
    a$ = n$
    Exit Function
Case "MOVIE.COUNTER", "MEDIA.COUNTER", "MUSIC.COUNTER", "ÔÁÉÍÉÁ.ÌÅÔÑÇÔÇÓ", "ÌÏÕÓÉÊÇ.ÌÅÔÑÇÔÇÓ"
    IsNumber = True
    r = SG * MediaPlayer1.getPositionInSec
    If MediaPlayer1.error > 0 Then
    r = SG * -1
    End If
    a$ = n$
    Exit Function
Case "PLAYSCORE", "ÐÁÉÆÅÉÖÙÍÇ"
    IsNumber = True
    
       r = SG * TaskMaster.PlayMusic
    a$ = n$
    Exit Function
Case "MOVIE", "MEDIA", "MUSIC", "ÔÁÉÍÉÁ", "ÌÏÕÓÉÊÇ"
    IsNumber = True
    AVIRUN = MediaPlayer1.isMoviePlaying
    r = SG * AVIRUN
    a$ = n$
    Exit Function
Case "DURATION", "ÄÉÁÑÊÅÉÁ"
    IsNumber = True
    r = SG * MediaPlayer1.getLengthInMS / 1000
   
    a$ = n$
    Exit Function
Case "VOLUME", "ÅÍÔÁÓÇ"
    IsNumber = True
    r = SG * CDbl(CLng(vol))
    a$ = n$
    Exit Function
Case "TAB", "ÓÔÇËÇ"
    IsNumber = True
    r = SG * players(GetCode(bstack.Owner)).Column + 1  'CHANGED FROM Ver 7.1
    a$ = n$
    Exit Function
Case "HEIGHT", "ÕØÏÓ"
    IsNumber = True
    r = SG * players(GetCode(bstack.Owner)).My
    a$ = n$
    Exit Function
Case "POS", "ÈÅÓÇ"
    IsNumber = True
    
    
    
    r = SG * GetRealPos(bstack.Owner)
    a$ = n$
    Exit Function
Case "ROW", "ÃÑÁÌÌÇ"
    IsNumber = True
    r = SG * GetRealRow(bstack.Owner)
    a$ = n$
    Exit Function
    Case "TIMECOUNT", "ÖÏÑÔÏÓ" ' ****************************
  IsNumber = True
    r = SG * prof.MARKTWO
    a$ = n$
    Exit Function

Case "TICK", "ÔÉÊ" ' ****************************
  IsNumber = True
    r = SG * MasterTimer
    a$ = n$
    Exit Function
Case "TODAY", "ÓÇÌÅÑÁ"
    IsNumber = True
    r = SG * CDbl(Date)
    a$ = n$
    Exit Function
Case "NOW", "ÔÙÑÁ"
    IsNumber = True
    r = SG * CDbl(CDate(time))
    a$ = n$
     Exit Function
Case "MENU.VISIBLE", "ÅÐÉËÏÃÅÓ.ÖÁÍÅÑÅÓ"  ' NEW 6.5 REV 8
    IsNumber = True
    r = SG * Form1.List1.Visible
    a$ = n$
    Exit Function
Case "MENUITEMS", "ÅÐÉËÏÃÅÓ"
    IsNumber = True
    r = SG * Form1.List1.listcount
    a$ = n$
    Exit Function
Case "MENU", "ÅÐÉËÏÃÇ"
    IsNumber = True
    r = 0
    With Form1.List1
    If .listcount > 0 Then
 
     r = SG * CDbl(.listindex + 1)
    End If
    End With
    a$ = n$
    Exit Function
Case "NUMBER", "ÁÑÉÈÌÏÓ", "ÔÉÌÇ"
    If bstack.soros.Total = 0 Then
    a$ = n$
            MyErMacro a$, "Stack is empty", "O óùñüò åßíáé Üäåéïò"
  
        IsNumber = False: Exit Function

    ElseIf bstack.soros.PopType = "N" Then
    r = SG * bstack.soros.PopVal
    a$ = n$
    IsNumber = True
    Exit Function
    Else
     a$ = n$
            MyErMacro a$, "Stack top isn't number", "Ç êïñõöÞ ôïõ óùñïý äåí åßíáé áñéèìüò"
  
    IsNumber = False
    End If
    Exit Function
Case Else

LOOKFORVARNUM:

If GetVar(bstack, v$, VR) Then
If Typename(var(VR)) = "Group" Then


CopyGroup var(VR), bstack


End If

r = SG * var(VR)



a$ = n$
IsNumber = True
ElseIf VR = -1 Then
r = SG * ReadVarDouble(bstack, v$)
a$ = n$
IsNumber = True
Exit Function
Else
If Len(v$) > 5 Then
If Left$(v$, 5) = "THIS." Or Left$(v$, 5) = "ÁÕÔÏ." Then
v$ = Mid$(v$, 5)
V1& = IsLabel(bstack, (v$), v$)
If v$ <> "" Then GoTo removethis
End If
End If
IsNumber = False  ''         " " + & String$(w2 - Len(n$), " ")
 ''If w2 >= Len(n$) Then a$ = " " & String$(w2 - Len(n$), " ") + n$ Else a$ = n$
  If w2 >= Len(n$) Then a$ = NLtrim$(a$) Else a$ = n$
   
 If FindNameForGroup(bstack, v$) Then
 MyErMacro a$, "Unknown Property " & v$, "¢ãíùóôç éäéüôçôá " & v$
 Else
MyErMacro a$, "Unknown Variable " & v$, "¢ãíùóôç ìåôáâëçôÞ " & v$
End If
End If
Exit Function


End Select
Case 4
LOOKFORVARNUM4:
If GetVar(bstack, v$, VR) Then
r = SG * var(VR)
a$ = n$
IsNumber = True
Else
If VR = -1 Then
r = SG * ReadVarInt(bstack, v$)
a$ = n$
IsNumber = True
Exit Function
End If
IsNumber = False
   If w2 >= Len(n$) Then a$ = " " & String$(w2 - Len(n$), " ") + n$ Else a$ = n$
 If FindNameForGroup(bstack, v$) Then
 MyErMacro a$, "Unknown Property " & v$, "¢ãíùóôç éäéüôçôá " & v$
 Else
MyErMacro a$, "Unknown Variable " & v$, "¢ãíùóôç ìåôáâëçôÞ " & v$
End If
End If


Exit Function
Case 7
 GoTo LOOKFORSUBNUM
Case 5
On Error Resume Next
Select Case v$
Case "PARAM(", "ÐÁÑÁÌ("
v$ = ""
If IsStrExp(bstack, n$, s1$) Then

Do
w1 = Len(s1$)
      If IsNumberD2(s1$, p) Then
      If v$ = "" Then
        r = SG * p
        v$ = ","
      Else
        v$ = v$ + "," + CStr(p)
      End If
      Else
             ISSTRINGA s1$, s$
        If v$ = "" Then Exit Do Else v$ = v$ + ",{" + s$ + "}"
    End If
    FastSymbol s1$, ","
Loop Until Trim$(s1) = "" Or w1 = Len(s1$)
    

End If
    IsNumber = FastSymbol(n$, ")", True)
    a$ = Mid$(v$, 2) + n$
    Exit Function

Case "STACKITEM(", "ÔÉÌÇÓÙÑÏÕ("

If IsExp(bstack, n$, p) Then
W3 = Abs(CLng(p))
backitem:
    If bstack.soros.Total < W3 Then
    a$ = n$
            MyErMacro a$, "Stack item not found at position " & CStr(W3), "Äåí õðÜñ÷åé ôéìÞ óùñïý óôç èÝóç " & CStr(W3)
  
        IsNumber = False: Exit Function

    ElseIf bstack.soros.StackItemType(W3) = "N" Then
    r = SG * bstack.soros.StackItem(W3)
    a$ = n$
    IsNumber = FastSymbol(a$, ")", True)
    Exit Function
    Else
     a$ = n$
            MyErMacro a$, "Stack item isn't number at position " & CStr(W3), "Ç ôéìÞ ôïõ óùñïý äåí åßíáé áñéèìüò óôç èÝóç " & CStr(W3)
  
    IsNumber = False
    End If
    Exit Function
Else
W3 = 1
GoTo backitem
End If
Case "SGN(", "ÓÇÌ("
If IsExp(bstack, n$, p) Then
r = SG * Sgn(MyRound(p, 13))

a$ = n$
 IsNumber = FastSymbol(a$, ")", True)
 Else
 a$ = n$: MissParam a$: IsNumber = False
End If
Exit Function

Case "FRAC(", "ÄÅÊ("
If IsExp(bstack, n$, p) Then
r = SG * MyRound(Abs(Abs(p) - Int(Abs(p))), 13)

a$ = n$
 IsNumber = FastSymbol(a$, ")", True)
 Else
 a$ = n$: MissParam a$: IsNumber = False
End If
Exit Function
Case "MATCH(", "ÔÁÕÔÉÓÇ("
If IsStrExp(bstack, n$, s1$) Then
If s1$ = "" Then
r = 0
a$ = n$
               IsNumber = FastSymbol(a$, ")", True)
ElseIf VALIDATEmStiva(bstack, UCase$(s1$), s$) Then   ' Only S and N
                If s$ = "" Then
                    r = 0
                Else
                   r = -SG
               End If
               Else
               r = 0
               End If
               a$ = n$
               IsNumber = FastSymbol(a$, ")", True)
Else
a$ = n$: MissParam a$
End If
Exit Function
Case "LOCALE(", "ÔÏÐÉÊÏ("
If IsStrExp(bstack, n$, s1$) Then
If FastSymbol(n$, ",") Then
If IsExp(bstack, n$, p) Then
r = SG * FoundSpecificLocaleId(s1$, CLng(p))
Else
a$ = n$: MissParam a$: IsNumber = False: Exit Function
End If
Else
r = SG * FoundLocaleId(s1$)
End If
   a$ = n$

    IsNumber = FastSymbol(a$, ")", True)
End If
Exit Function
Case "FILELEN(", "ÁÑ×ÅÉÏÕ.ÌÇÊÏÓ("
If IsStrExp(bstack, n$, s1$) Then
If s1$ = "" Then
r = 0
a$ = n$
               IsNumber = FastSymbol(a$, ")", True)
Else
If ExtractPath(s1$) = "" Then
                If CFname(s1$) <> "" Then
                    s1$ = CFname(s1$)
                ElseIf mylcasefILE(s1$) = ExtractName(s1$) Then
                    s1$ = mcd + s1$
                End If
End If
       r = SG * FileLen(GetDosPath(s1$))
               a$ = n$
               IsNumber = FastSymbol(a$, ")", True)
End If
Else
a$ = n$: MissParam a$
End If
Exit Function
Case "TAB(", "ÓÔÇËÇ("
If IsExp(bstack, n$, p) Then

r = SG * p * (players(GetCode(bstack.Owner)).Column + 1)
   a$ = n$
    IsNumber = FastSymbol(a$, ")", True)
End If
Exit Function
Case "KEYPRESS(", "ÐÁÔÇÌÅÍÏ("
If Not IsExp(bstack, n$, p) Then
r = 0
Else
r = SG * CLng(KeyPressed(CLng(p)))

End If
 a$ = n$

    IsNumber = FastSymbol(a$, ")", True)
    Exit Function
Case "INKEY(", "ÅÍÊÏÌ("

BLOCKkey = True
If Not IsExp(bstack, n$, p) Then p = 50: dn = 1
If p < 50 Then p = 50
p = p / 2
    p = uintnew(p + timeGetTime)
   If dn = 1 Then r = 0 Else r = clickMe

If Not (bstack.IamThread And dn = 1) Then clickMe2 = -2
               w1 = -1
                    Do While p > uintnew(timeGetTime)
                  
                  
                 If Not bstack.IamThread Then
                    MyDoEvents
                    mywait bstack, 1
                    Else
                    
                    p = 0
                    ''If (dn = 0) Then
                    If r = clickMe2 Then Exit Do
                    
                    r = -3
                      clickMe2 = clickMe
                      
                      
                    End If
                    If clickMe2 = r Then clickMe2 = -2
                    If w1 = -1 Then
                    If clickMe2 <> -2 Then
             
              
                    w1 = clickMe2
              
                    If w1 = 19 Or w1 = 131139 Then
                    'this IS A BREAK
                    BLOCKkey = False
                  
                   Form1.GiveASoftBreak (w1 = 19)
                    End If
                    p = 0
                    End If
                    End If
                     
                Loop
                If bstack.IamThread Then
        If bstack.LastClick = w1 Then
            w1 = -1
        Else
            bstack.LastClick = w1
        End If
End If
  r = SG * w1
    
  clickMe2 = -1


a$ = n$
IsNumber = FastSymbol(a$, ")", True)
BLOCKkey = False
Exit Function
Case "ÔÌÇÌÁ(", "MODULE("
  MakeThisSub bstack, n$
If IsLabel(bstack, n$, s$) Then

    r = SG * True
  
    If GetlocalSub(s$, w1) Then
  ' ElseIf GetlocalSubExtra(s$, w1) Then
    ElseIf Not GetSub(s$, w1) Then
    
  
    r = False
    
    End If
    a$ = n$
    IsNumber = FastSymbol(a$, ")", True)
Else
    a$ = n$
    IsNumber = False
End If
Exit Function
Case "ÂÁÓÇ(", "MDB("
If IsStrExp(bstack, n$, s$) Then
If ExtractType(s$) = "" Then s$ = s$ & ".MDB"
s$ = CFname(s$)
If s$ <> "" Then
r = CheckMine(s$)
Else
r = 0
End If
   a$ = n$
    IsNumber = FastSymbol(a$, ")", True)
End If
Exit Function
Case "ASK(", "ÑÙÔÁ("
If IsStrExp(bstack, n$, AskText$) Then
If UCase(v$) = "ASK(" Then
DialogSetupLang 1
Else
DialogSetupLang 0
End If
If AskText$ = "" Then a$ = n$: ZeroParam a$: IsNumber = False: Exit Function
If FastSymbol(n$, ",") Then IsStrExp bstack, n$, AskTitle$
If FastSymbol(n$, ",") Then IsStrExp bstack, n$, AskOk$
If FastSymbol(n$, ",") Then IsStrExp bstack, n$, AskCancel$
If FastSymbol(n$, ",") Then IsStrExp bstack, n$, AskDIB$
If FastSymbol(n$, ",") Then IsStrExp bstack, n$, AskStrInput$: AskInput = True

olamazi

r = SG * Form3.NeoASK(bstack)
AskInput = False
   a$ = n$
    IsNumber = FastSymbol(a$, ")", True)
End If
Exit Function
Case "ÓÕÃÊÑÏÕÓÇ(", "COLLIDE("
If IsExp(bstack, n$, r) Then
If FastSymbol(n$, ",") Then
    If Not IsExp(bstack, n$, r2) Then a$ = n$: MissParam a$: IsNumber = False: Exit Function
 
    If FastSymbol(n$, ",") Then
    r = SG * CollideArea(CLng(r), CLng(r2), bstack, n$)
    Else
    r = SG * CollidePlayers(CLng(r), CLng(r2))
    End If
Else
r = SG * CollidePlayers(CLng(r), CLng(100))
End If
   a$ = n$
    IsNumber = FastSymbol(a$, ")", True)
End If
Exit Function
Case "ÌÅÃÅÈÏÓ.Õ(", "SIZE.Y("

    If IsStrExp(bstack, n$, s$) Then
    If Not FastSymbol(n$, ",") Then a$ = n$: MissParam a$: IsNumber = False: Exit Function
    If Not IsStrExp(bstack, n$, s1$) Then a$ = n$: MissParam a$: IsNumber = False: Exit Function
    If Not FastSymbol(n$, ",") Then a$ = n$: MissParam a$: IsNumber = False: Exit Function
    If Not IsExp(bstack, n$, r2) Then a$ = n$: MissParam a$: IsNumber = False: Exit Function
    r3 = 0
    If FastSymbol(n$, ",") Then
    If Not IsExp(bstack, n$, r3) Then
     a$ = n$: MissParam a$: IsNumber = False: Exit Function
    End If

    End If
    On Error Resume Next
    r = nTextY(bstack, s$, s1$, CSng(r2), r3)
    If Err.Number > 0 Then r = 0
    r = SG * r
    a$ = n$
 
    
    IsNumber = FastSymbol(a$, ")", True)
    End If
    Exit Function
Case "ÌÅÃÅÈÏÓ.×(", "SIZE.X("
    If IsStrExp(bstack, n$, s$) Then
    If Not FastSymbol(n$, ",") Then IsNumber = False: Exit Function
    If Not IsStrExp(bstack, n$, s1$) Then IsNumber = False: Exit Function
    If Not FastSymbol(n$, ",") Then IsNumber = False: Exit Function
    If Not IsExp(bstack, n$, r2) Then IsNumber = False: Exit Function
    r3 = 0
    If FastSymbol(n$, ",") Then If Not IsExp(bstack, n$, r3) Then IsNumber = False: Exit Function
    On Error Resume Next
    r = nText(bstack, s$, s1$, CSng(r2), r3)
    If Err.Number > 0 Then r = 0
    r = SG * r
    a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
    End If
    Exit Function
Case "WRITABLE(", "ÅÃÃÑÁØÉÌÏ("  ' áí ìðïñþ íá ãñÜøù óôï öÜêåëï
    If IsStrExp(bstack, n$, s$) Then
      r = SG * WeCanWrite(s$)
   
    a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
    Exit Function
    End If
    IsNumber = False
    Exit Function
Case "COLOR(", "COLOUR(", "×ÑÙÌÁ("
    
            
    If Not ColorRGB(bstack, n$, r) Then Exit Function
     a$ = n$
    r = SG * -r

        IsNumber = FastSymbol(a$, ")", True)
        Exit Function
Case "DIMENSION(", "ÄÉÁÓÔÁÓÇ("
IsNumber = False
a$ = n$

If Abs(IsLabel(bstack, n$, s$)) > 4 Then
''  If Right$(s$, 1) = "(" Then s$ = s$ + ")"
  
 If FastSymbol(n$, ")", True) And neoGetArray(bstack, s$, pppp) Then
    If FastSymbol(n$, ",") Then
          If IsExp(bstack, n$, p) Then
          
          pppp.SerialItem PP, CLng(p - 1), 6
          r = SG * PP
              a$ = n$
               IsNumber = FastSymbol(a$, ")", True)
          Else
              a$ = n$
           MyErMacro a$, "Can't read dimension index from array " & s$, "Äåí ìðïñþ íá äéáâÜóù ôïí äåßêôç äéÜóôáóçò ôïõ ðßíáêá " & s$
          End If
      Else ' dimensions
      p = 0
      pppp.SerialItem PP, CLng(p), 5
         r = SG * PP
              a$ = n$
              IsNumber = FastSymbol(a$, ")", True)
      End If
      Exit Function
      Else
       n$ = a$
       End If
 Else
 n$ = a$
 End If
If IsStrExp(bstack, n$, s$) Then
    s$ = s$ & "("
    If neoGetArray(bstack, s$, pppp) Then
        If FastSymbol(n$, ",") Then
          If IsExp(bstack, n$, p) Then
            pppp.SerialItem PP, CLng(p - 1), 6
            r = SG * PP
            a$ = n$
            IsNumber = FastSymbol(a$, ")", True)
          Else
            a$ = n$
            MyErMacro a$, "Can't read dimension index from array " & s$, "Äåí ìðïñþ íá äéáâÜóù ôïí äåßêôç äéÜóôáóçò ôïõ ðßíáêá " & s$
          End If
        Else ' dimensions
            p = 0
            pppp.SerialItem PP, CLng(p), 5
            r = SG * PP
            a$ = n$
            IsNumber = FastSymbol(a$, ")", True)
        End If
        Else
        MyErMacro a$, "Can't find array " & s$, "Äåí âñßóêù ðßíáêá " & s$
    End If
End If
    Exit Function
Case "ARRAY(", "ÐÉÍÁÊÁÓ("
    IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    If FastSymbol(n$, ",") Then
            w1 = InStr("!" & s$, "(")
            If w1 > 0 And w1 <= Len(s$) Then
            s$ = Left$(s$, w1 - 2)
            End If
            s$ = s$ & "("
                If neoGetArray(bstack, s$, pppp) Then
                IsNumber = NeoGetArrayItem(pppp, bstack, s$, w1, n$)
                r = SG * pppp.item(w1)
                a$ = n$
                Else
                a$ = n$
                MyErMacro a$, "Can't find array " & s$, "Äåí âñßóêù ðßíáêá " & s$
                End If
    Else
    a$ = n$: MissParam a$
    End If
    Else
    a$ = n$: MissParam a$
    End If
    Exit Function
Case "FUNCTION(", "ÓÕÍÁÑÔÇÓÇ("
IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    If IsSymbol(s$, "{") Then
            PushStage bstack, False
            s1$ = block(s$)
            FastSymbol s$, "}"
            GlobalSub "A_()", s1$, Trim$(s$)
            IsSymbol3 n$, ","
              a$ = "A_(@" & n$
            IsNumber = IsExp(bstack, a$, p)
            r = SG * p
            PopStage bstack
Else
If MaybeIsSymbol(n$, ".") Then
dd = 1
      s1$ = aheadstatus(n$, , dd)
s$ = s$ + Left$(n$, dd - 1)
n$ = Mid$(n$, dd)
End If
    If FastSymbol(n$, ",") Then
    End If
     If Right$(s$, 1) = ")" Then
        a$ = Left$(s$, Len(s$) - 1) & n$
    ElseIf InStr(s$, ").") > 0 Then
    If Not FastSymbol(n$, ")") Then
        a$ = s$ & "(@" & n$
    Else
        a$ = s$ & n$
        End If
     Else
      a$ = s$ & "(@" & n$
      End If
    IsNumber = IsExp(bstack, a$, p)
    r = SG * p
  End If
    Else
    a$ = n$: MissParam a$
    
    End If
    Exit Function
Case "DRIVE.SERIAL(", "ÓÅÉÑÉÁÊÏÓ.ÄÉÓÊÏÕ("
IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    r = SG * DriveSerial(Left$(s$, 3))
  
    a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
    Else
    a$ = n$: MissParam a$
    End If
    Exit Function
Case "FILE.STAMP(", "ÁÑ×ÅÉÏÕ.ÓÔÁÌÐÁ("
IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    If CFname(s$, p) <> vbNullString Then
    If p = 0 Then
    a$ = n$
    MyErMacro a$, "Can't Read File TimeStamp", "Äåí ìðïñþ íá äéáâÜóù ôçí ×ñïíïóÞìáíóç ôïõ áñ÷åßïõ"
    Else
     r = SG * p
     End If
     Else
       a$ = n$: BadFilename: Exit Function
     
     End If
     a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
    Else
    a$ = n$: MissParam a$
    End If
    Exit Function
Case "EXIST.DIR(", "ÕÐÁÑ×ÅÉ.ÊÁÔÁËÏÃÏÓ("
IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    r = SG * isdir(s$)
     a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
    Else
    a$ = n$: MissParam a$
    End If
    Exit Function
Case "EXIST(", "ÕÐÁÑ×ÅÉ("
IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    s$ = CFname(s$)
    If s$ <> "" Then
      r = SG * (InStr(s$, "*") = 0 And InStr(s$, "?") = 0)
      Else
  
    r = 0
    End If
   
    a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
    Else
    a$ = n$: MissParam a$
    End If
    Exit Function
    
Case "JOYPAD(", "ËÁÂÇ("
  IsNumber = False
    If IsExp(bstack, n$, r) Then
        
    r = SG * Int(r)
    a$ = n$
    
    If r < 0 Or r > 15 Then
    
    MyErMacro a$, "Joypad number 0 to 15", "Áñéèìüò ëáâÞò áðü 0 Ýùò 15"

    Exit Function
    End If
    If Not MYJOYSTAT(r).Enabled Then
    IsNumber = False
        MyErMacro a$, "Joypad number " & CStr(r) & " isn't ready", "Ôï íïýìåñï ËáâÞò " & CStr(r) & " äåí åßíáé Ýôïéìï"
    Exit Function
    End If
    If Not MYJOYSTAT(r).Wait2Read Then
    PollJoypadk  ' íá ôï äù Üìåóá
    
    If Not MYJOYSTAT(r).Wait2Read Then
        MyErMacro a$, "Joypad number " & CStr(r) & " isn't ready", "Ôï íïýìåñï ËáâÞò " & CStr(r) & " äåí åßíáé Ýôïéìï"
        
    Exit Function
    End If
    End If
    r = SG * MYJOYSTAT(r).lngButton
IsNumber = FastSymbol(a$, ")", True)
       Else
       IsNumber = False
        a$ = n$: MissParam a$
         ' IsNumber = FastSymbol(a$, ")")
  End If
  Exit Function
Case "JOYPAD.DIRECTION(", "ËÁÂÇ.ÊÁÔÅÕÈÕÍÓÇ("
  IsNumber = False
    If IsExp(bstack, n$, r) Then
    r = SG * Int(r)
    a$ = n$
    If r < 0 Or r > 15 Then
    
    MyErMacro a$, "Joypad number 0 to 15", "Áñéèìüò ËáâÞò áðü 0 Ýùò 15"
    
    Exit Function
    End If
    If Not MYJOYSTAT(r).Enabled Then
        MyErMacro a$, "Joypad number " & CStr(r) & " isn't ready", "Ôï íïýìåñï ËáâÞò " & CStr(r) & " äåí åßíáé Ýôïéìï"
    
    Exit Function
    End If
    If Not MYJOYSTAT(r).Wait2Read Then
    PollJoypadk  ' íá ôï äù Üìåóá
    
    If Not MYJOYSTAT(r).Wait2Read Then
        MyErMacro a$, "Joypad number " & CStr(r) & " isn't ready", "Ôï íïýìåñï ËáâÞò " & CStr(r) & " äåí åßíáé Ýôïéìï"
    
    Exit Function
    End If
    End If
    r = SG * MYJOYSTAT(r).joyPaD
    IsNumber = FastSymbol(a$, ")", True)
       Else
        a$ = n$: MissParam a$
  End If
Case "JOYPAD.ANALOG.X(", "ËÁÂÇ.ÁÍÁËÏÃÉÊÏ.×("
  IsNumber = False
    If IsExp(bstack, n$, r) Then
    r = SG * Int(r)
    a$ = n$
    If r < 0 Or r > 15 Then
    
    MyErMacro a$, "Joypad number 0 to 15", "Áñéèìüò ËáâÞò áðü 0 Ýùò 15"
    Exit Function
    End If
    If Not MYJOYSTAT(r).Enabled Then
        MyErMacro a$, "Joypad number " & CStr(r) & " isn't ready", "Ôï íïýìåñï ËáâÞò " & CStr(r) & " äåí åßíáé Ýôïéìï"
            Exit Function
    End If
    If Not MYJOYSTAT(r).Wait2Read Then
    PollJoypadk  ' íá ôï äù Üìåóá
    
    If Not MYJOYSTAT(r).Wait2Read Then
        MyErMacro a$, "Joypad number " & CStr(r) & " isn't ready", "Ôï íïýìåñï ËáâÞò " & CStr(r) & " äåí åßíáé Ýôïéìï"
    Exit Function
    End If
    End If
    r = SG * MYJOYSTAT(r).AnalogX
    IsNumber = FastSymbol(a$, ")", True)
       Else
        a$ = n$: MissParam a$
  End If
Case "JOYPAD.ANALOG.Y(", "ËÁÂÇ.ÁÍÁËÏÃÉÊÏ.Õ("
  IsNumber = False
    If IsExp(bstack, n$, r) Then
    r = SG * Int(r)
    a$ = n$
    If r < 0 Or r > 15 Then
    
    MyErMacro a$, "Joypad number 0 to 15", "Áñéèìüò ËáâÞò áðü 0 Ýùò 15"
    Exit Function
    End If
    If Not MYJOYSTAT(r).Enabled Then
        MyErMacro a$, "Joypad number " & CStr(r) & " isn't ready", "Ôï íïýìåñï ËáâÞò " & CStr(r) & " äåí åßíáé Ýôïéìï"
    Exit Function
    End If
    If Not MYJOYSTAT(r).Wait2Read Then
    PollJoypadk  ' íá ôï äù Üìåóá
    
    If Not MYJOYSTAT(r).Wait2Read Then
        MyErMacro a$, "Joypad number " & CStr(r) & " isn't ready", "Ôï íïýìåñï ËáâÞò " & CStr(r) & " äåí åßíáé Ýôïéìï"
    Exit Function
    End If
    End If
    r = SG * MYJOYSTAT(r).AnalogY
    IsNumber = FastSymbol(a$, ")", True)
       Else
        a$ = n$: MissParam a$
  End If
Case "IMAGE.X(", "ÅÉÊÏÍÁ.×("
IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    If Left$(s$, 4) = "cDIB" And Len(s$) > 12 Then
    r = SG * cDIBwidth(s$) * DXP
    a$ = n$
    IsNumber = FastSymbol(a$, ")", True)
     Else
            a$ = n$
            MyErMacro a$, "Íï image in string", "Äåí õðÜñ÷åé åéêüíá óôï áëöáñéèìçôéêü"
        End If
    Else
        a$ = n$: MissParam a$
    End If
    Exit Function
Case "IMAGE.Y(", "ÅÉÊÏÍÁ.Õ("
IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
        If Left$(s$, 4) = "cDIB" And Len(s$) > 12 Then
            r = SG * cDIBheight(s$) * DYP
            a$ = n$
            IsNumber = FastSymbol(a$, ")", True)
        Else
            a$ = n$
            MyErMacro a$, "Íï image in string", "Äåí õðÜñ÷åé åéêüíá óôï áëöáñéèìçôéêü"
        End If
    Else
        a$ = n$: MissParam a$
    End If
    Exit Function
Case "IMAGE.X.PIXELS(", "ÅÉÊÏÍÁ.×.ÓÇÌÅÉÁ("
IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    If Left$(s$, 4) = "cDIB" And Len(s$) > 12 Then
    r = SG * cDIBwidth(s$)
    a$ = n$
    IsNumber = FastSymbol(a$, ")", True)
     Else
            a$ = n$
            MyErMacro a$, "Íï image in string", "Äåí õðÜñ÷åé åéêüíá óôï áëöáñéèìçôéêü"
        End If
    Else
        a$ = n$: MissParam a$
    End If
    Exit Function
Case "IMAGE.Y.PIXELS(", "ÅÉÊÏÍÁ.Õ.ÓÇÌÅÉÁ("
IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
        If Left$(s$, 4) = "cDIB" And Len(s$) > 12 Then
            r = SG * cDIBheight(s$)
            a$ = n$
            IsNumber = FastSymbol(a$, ")", True)
        Else
            a$ = n$
            MyErMacro a$, "Íï image in string", "Äåí õðÜñ÷åé åéêüíá óôï áëöáñéèìçôéêü"
        End If
    Else
        a$ = n$: MissParam a$
    End If
    Exit Function
    Case "VALID(", "ÅÃÊÕÑÏ("
    a$ = n$
    w1 = 1
    s$ = aheadstatus(n$, True, w1) & "   "  ' version 6.5(11)

    If Left$(s$, 1) = "S" And Not Left$(s$, 3) = "SoN" Then
        If IsStrExp(bstack, n$, s$) Then
    
             r = SG * FastSymbol(n$, ")", True)
             If r = 0 Then
             a$ = Mid$(a$, w1)
               w1 = CLng(FastSymbol(a$, ")"))
             Else
               a$ = n$
               End If
Else
r = 1
If Len(n$) + w1 > Len(a$) Then
'false
r = 0
End If

a$ = Mid(a$, w1)
r = r * SG * FastSymbol(a$, ")", True)

       End If
    ElseIf LastErNum <> 0 Then
    GoTo jumphere
    
    ElseIf IsExp(bstack, n$, p) Then

              r = SG * FastSymbol(n$, ")", True)
              If r = 0 Then
                   a$ = Mid$(a$, w1)
                   w1 = CLng(FastSymbol(a$, ")")) ' throw it
                Else
                    a$ = n$
                End If
    Else
jumphere:
    LastErNum = 0
    a$ = Mid$(a$, w1)
      w1 = CLng(FastSymbol(a$, ")"))
          r = 0
        End If
        IsNumber = True
        LastErNum = 0
    Exit Function
Case "EVAL(", "ÅÊÖÑ(", "ÅÊÖÑÁÓÇ("
IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    If FastSymbol(n$, ".") Then
    If MaybeIsSymbol(n$, ")") Then
            n$ = s$ + n$
        Else
        n$ = s$ + "." + n$
        End If
        If Not IsExp(bstack, n$, r) Then
          a$ = n$
            MyErMacro a$, "Wrong weak reference", "ëÜèïò éó÷íÞò áíáöïñÜò"
        Else
            r = SG * r
            a$ = n$
            IsNumber = FastSymbol(a$, ")", True)
        End If
    Else
    
            If Not IsExp(bstack, s$, r) Then
            a$ = n$
            MyErMacro a$, "Wrong expression in string", "ëÜèïò ìáèçìáôéêÞ Ýêöñáóç óôï áëöáñéèìçôéêü"
            Else
            r = SG * r
            a$ = n$
            IsNumber = FastSymbol(a$, ")", True)
            End If
    End If
    Else
    a$ = n$: MissParam a$
    End If
    Exit Function
Case "POINT(", "ÓÇÌÅÉÏ("

    If IsStrExp(bstack, n$, s$) Then
        If Left$(s$, 4) = "cDIB" And Len(s$) > 12 Then
            If FastSymbol(n$, ",") Then
                If Not IsExp(bstack, n$, r2) Then a$ = n$: MissParam a$: Exit Function
                If FastSymbol(n$, ",") Then
                    If Not IsExp(bstack, n$, r3) Then a$ = n$: MissParam a$: Exit Function
                    r = SG * GetDIBPixel(s$, r2, r3)
                    a$ = n$
                    
                    IsNumber = FastSymbol(a$, ")", True)
                Else
                    
                     a$ = n$: MissParam a$: Exit Function
                End If
            Else
                a$ = n$: MissParam a$: Exit Function
            End If
        Else
            r = 0
         a$ = n$
         MyErMacro a$, "Íï image in string", "Äåí õðÜñ÷åé åéêüíá óôï áëöáñéèìçôéêü"
         Exit Function
        End If
     Else
   a$ = n$
     MissParam a$
    End If
   Exit Function
Case "CTIME(", "ÕÐÙÑÁ("
  IsNumber = False
    If IsExp(bstack, n$, r) Then
  
    r = Abs(r)
    par = True
    If FastSymbol(n$, ",") Then
    par = IsExp(bstack, n$, r2)
    If FastSymbol(n$, ",") Then
    par = IsExp(bstack, n$, r3) And par
    If FastSymbol(n$, ",") Then
    par = IsExp(bstack, n$, r4) And par
    End If
    End If
    End If
    a$ = n$
       If Not par Then
     MissParam a$
     Exit Function
                End If
                On Error Resume Next
    r = SG * CDbl(TimeSerial(Hour(CDate(r)) + r2, Minute(CDate(r)) + r3, Second(CDate(r)) + r4))
                If Err.Number > 0 Then
    MyErMacro a$, Err.Description, "ËÜèïò üñéóìá"
    Err.clear
    Exit Function
    End If
     IsNumber = FastSymbol(a$, ")", True)
      Else
   a$ = n$
     MissParam a$
    End If
    Exit Function
    
Case "CDATE(", "ÕÐÌÅÑ("
 IsNumber = False
    If IsExp(bstack, n$, r) Then
   
    r = Abs(r Mod 2958466)
    par = True
    If FastSymbol(n$, ",") Then
    par = IsExp(bstack, n$, r2)
    If FastSymbol(n$, ",") Then
    par = IsExp(bstack, n$, r3) And par
    If FastSymbol(n$, ",") Then
    par = IsExp(bstack, n$, r4) And par
    
    End If
    End If
    End If
    a$ = n$
    If Not par Then
     MissParam a$
     Exit Function
                End If
                On Error Resume Next
     r = SG * CDbl(DateSerial(Year(r) + r2, Month(r) + r3, Day(r) + r4))
              If Err.Number > 0 Then
    MyErMacro a$, Err.Description, "ËÜèïò üñéóìá"
    Err.clear
    Exit Function
    End If
    
 IsNumber = FastSymbol(a$, ")", True)
   Else
   a$ = n$
     MissParam a$
    
    End If
    
     Exit Function
Case "TIME(", "×ÑÏÍÏÓ("
IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    On Error Resume Next
    
    r = SG * CDbl(CDate(TimeValue(s$)))
         If Err.Number > 0 Then
    a$ = n$
    MyErMacro a$, Err.Description, "ËÜèïò üñéóìá"
    Err.clear
    Exit Function
    End If
    a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
    Else
     a$ = n$
                MissParam a$
    End If
    Exit Function
Case "DATE(", "ÇÌÅÑÁ("
 IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    On Error Resume Next
    r = SG * CDbl(DateValue(s$))
     If Err.Number > 0 Then
    a$ = n$
    MyErMacro a$, Err.Description, "ËÜèïò üñéóìá"
    Err.clear
    Exit Function
    End If
    a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
      Else
     a$ = n$
                MissParam a$
    End If
    Exit Function
Case "VAL(", "ÔÉÌÇ(", "ÁÎÉÁ("
 IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    On Error Resume Next
    r = SG * Val(s$)
    If Err.Number > 0 Then
    a$ = n$
    MyErMacro a$, Err.Description, "ËÜèïò üñéóìá"
    Err.clear
    Exit Function
    End If
    a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
    Else
     a$ = n$
                MissParam a$
    End If
    Exit Function
Case "RINSTR(", "ÈÅÓÇÄÅÎÉÁ("
 IsNumber = False
  
      If IsStrExp(bstack, n$, s$) Then
    If FastSymbol(n$, ",") Then
    If IsStrExp(bstack, n$, s1$) Then
        If FastSymbol(n$, ",") Then
        If Not IsExp(bstack, n$, r) Then
   
              a$ = n$
                MissParam a$
        Exit Function
        End If
             r = Len(s$) - r + 1
        If r < 0 Then r = 1
        If r > Len(s$) Then r = Len(s$)
        Else
        r = Len(s$)
        End If
    r = SG * InStrRev(s$, s1$, r)
    a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
    Else
    a$ = n$
                MissParam a$
    End If
        Else
    a$ = n$
                MissParam a$
    End If
        Else
    a$ = n$
                MissParam a$
    End If
    Exit Function

Case "INSTR(", "ÈÅÓÇ("
IsNumber = False

    If IsStrExp(bstack, n$, s$) Then
    If FastSymbol(n$, ",") Then
    If IsStrExp(bstack, n$, s1$) Then
        If FastSymbol(n$, ",") Then
        If Not IsExp(bstack, n$, r) Then
          a$ = n$
                MissParam a$
         Exit Function
        End If
        Else
        r = 1
        End If
    r = SG * InStr(r, s$, s1$)
    a$ = n$
    IsNumber = FastSymbol(a$, ")", True)
    Else
    a$ = n$
                MissParam a$
    End If
        Else
    a$ = n$
                MissParam a$
    End If
        Else
    a$ = n$
                MissParam a$
    End If
    
    Exit Function

Case "RECORDS(", "ÅÃÃÑÁÖÅÓ("
 IsNumber = False

    If IsExp(bstack, n$, r) Then
        VR = r Mod 512
        If FLEN(VR) = 0 Then
            MyErMacro n$, "not valid file number", "ëÜèïò áñéèìüò áñ÷åßïõ"
            a$ = n$
        Else
            r = SG * LOF(VR) / FLEN(VR)
            a$ = n$
            IsNumber = FastSymbol(a$, ")", True)
        End If
    Else
        a$ = n$
        MissParam a$
    End If
    Exit Function
Case "GROUP.COUNT(", "ÏÌÁÄÁ.ÓÕÍÏËÏ("


        If Abs(IsLabel(bstack, n$, s$)) = 1 Then
            If GetVar(bstack, s$, w1) Then
                If Typename(var(w1)) = "Group" Then
                
                    r = SG * var(w1).PrepareSoros(var(), "").Total
                Else
                a$ = n$
                MissingGroup
                Exit Function
                End If
                a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
                Exit Function
            Else
            a$ = n$
            Nosuchvariable s$
            End If
        Else
        a$ = n$
        MissingGroup
       End If
       Exit Function
Case "PARAGRAPH(", "ÐÁÑÁÃÑÁÖÏÓ("
 IsNumber = False
    w1 = Abs(IsLabel(bstack, n$, s$))
                  
        If w1 = 3 Then
            If GetVar(bstack, s$, w1) Then
                If Typename(var(w1)) = doc Then
                        If Not FastSymbol(n$, ",") Then a$ = n$: MissParam a$: Exit Function
        
                       If IsExp(bstack, n$, PP) Then
                                dn = CLng(PP)
                              r = SG * var(w1).ParagraphFromOrder(dn)           ''
                                 
                            
                                 Else
                                       MissNumExpr
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                                 End If
         
               Else
                    MissingDoc
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                End If
                a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
            Else
                    a$ = n$
                    MissFuncParameterStringVarMacro a$
                    
            End If
        ElseIf w1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, w2, n$) Then Exit Function
                                If Not FastSymbol(n$, ",") Then a$ = n$: MissParam a$: Exit Function
                            If IsExp(bstack, s$, PP) Then
                                dn = CLng(PP)
                                 r = SG * pppp.item(w2).ParagraphFromOrder(dn)
                                 Else
                                        MissNumExpr
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                                 End If
                  Else
                    MissingDoc
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                End If
                    a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissFuncParameterStringVarMacro a$
    End If
    Exit Function
Case "PARAGRAPH.INDEX(", "ÁÑÉÈÌÏÓ.ÐÁÑÁÃÑÁÖÏÕ("
 IsNumber = False
    w1 = Abs(IsLabel(bstack, n$, s$))
                  
        If w1 = 3 Then
            If GetVar(bstack, s$, w1) Then
                If Typename(var(w1)) = doc Then
                        If Not FastSymbol(n$, ",") Then a$ = n$: MissParam a$: Exit Function
                         w2 = Abs(IsLabel(bstack, n$, s$)) ' ONLY AN ARITHMETIC VAR.
    
                        If w2 = 1 Or w2 = 4 Then
                                If GetVar(bstack, s$, w2) Then
                                dn = var(w2)
                              r = SG * var(w1).ParagraphOrder(dn)           ''
                                 
                            
                                 Else
                                        Nosuchvariable s$
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                                 End If
                         
                        Else
                                        MissingnumVar
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function

                        End If
                Else
                    MissingDoc
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                End If
                a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
            Else
                    a$ = n$
                    MissFuncParameterStringVarMacro a$
                    
            End If
        ElseIf w1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, w2, n$) Then Exit Function
                                If Not FastSymbol(n$, ",") Then a$ = n$: MissParam a$: Exit Function
                         w1 = Abs(IsLabel(bstack, n$, s$)) ' ONLY AN ARITHMETIC VAR..
                        If w1 = 1 Or w1 = 2 Then
                                If GetVar(bstack, s$, w1) Then
                                dn = var(w1)
                                 r = SG * pppp.item(w2).ParagraphOrder(dn)
                                 Else
                                        Nosuchvariable s$
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                                 End If
                         
                        Else
                                        Nosuchvariable s$
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function

                        End If
                Else
                    MissingDoc
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                End If
                    a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissFuncParameterStringVarMacro a$
    End If
    Exit Function
Case "BACKWARD(", "ÐÉÓÙ("
    dd = 1
    GoTo forward
Case "FORWARD(", "ÌÐÑÏÓÔÁ("
forward:
 IsNumber = False
    w1 = Abs(IsLabel(bstack, n$, s$))
        If w1 = 3 Then
            If GetVar(bstack, s$, w1) Then
                If Typename(var(w1)) = doc Then
                        If Not FastSymbol(n$, ",") Then a$ = n$: MissParam a$: Exit Function
                         w2 = Abs(IsLabel(bstack, n$, s$)) ' ONLY AN ARITHMETIC VAR..
                        If w2 = 1 Or w2 = 4 Then
                                If GetVar(bstack, s$, w2) Then
                                dn = var(w2)
                                If dd = 1 Then
                                var(w1).BackStep dn
                                var(w1).BackMove = True
                                Else
                                var(w1).BackMove = False
                                var(w1).Advance dn
                                End If
                                 r = SG * Not var(w1).IsEmpty
                                 '    r = SG * var(w1).ParagraphOrder(dn)          ''
                                 
                                 var(w2) = dn
                                 Else
                                        Nosuchvariable s$
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                                 End If
                         
                        Else
                                        MissingnumVar
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function

                        End If
                Else
                    MissingDoc
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                End If
                a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
            Else
                    a$ = n$
                    MissFuncParameterStringVarMacro a$
                    
            End If
        ElseIf w1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, w2, n$) Then Exit Function
                                If Not FastSymbol(n$, ",") Then a$ = n$: MissParam a$: Exit Function
                         w1 = Abs(IsLabel(bstack, n$, s$)) ' ONLY AN ARITHMETIC VAR..
                         If w1 = 1 Or w1 = 2 Then
                                If GetVar(bstack, s$, w1) Then
                                dn = var(w1)
                                 If dd = 1 Then
                                pppp.item(w2).BackStep dn
                                pppp.item(w2).BackMove = True
                                Else
                              pppp.item(w2).BackMove = False
                                 pppp.item(w2).Advance dn
                                End If
                                r = SG * Not pppp.item(w2).IsEmpty
                                '' r = SG * pppp.item(w2).ParagraphOrder(dn)
                                
                                 var(w1) = dn
                                 Else
                                        Nosuchvariable s$
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                                 End If
                         
                        Else
                                        Nosuchvariable s$
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function

                        End If
                Else
                    MissingDoc
                                        a$ = n$
                                        IsNumber = False
                                        Exit Function
                End If
                    a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissFuncParameterStringVarMacro a$
    End If
    Exit Function
Case "DOC.PAR(", "ÅÃÃÑÁÖÏÕ.ÐÁÑ("
 IsNumber = False
    w1 = Abs(IsLabel(bstack, n$, s$))

        If w1 = 3 Then
            If GetVar(bstack, s$, w1) Then
                If Typename(var(w1)) = doc Then
                    r = SG * var(w1).DocParagraphs
                Else
                    r = 0
                End If
                a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
            Else
                    a$ = n$
                    MissFuncParameterStringVarMacro a$
                    
            End If
        ElseIf w1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, w2, n$) Then Exit Function
                    If Typename(pppp.item(w2)) = doc Then
                      r = SG * pppp.item(w2).DocParagraphs
                      Else
                      r = 0
                      End If
                Else
                
                End If
                    a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissFuncParameterStringVarMacro a$
    End If
    Exit Function
Case "MAX.DATA(", "ÌÅÃÁËÏ.ÓÅÉÑÁÓ("
 IsNumber = False
  If IsExp(bstack, n$, r) Then
  
  Do While FastSymbol(n$, ",")
  If Not IsExp(bstack, n$, p) Then a$ = n$: MissNumExpr: Exit Function
  If p > r Then r = p
  
  Loop
  r = SG * r
    a$ = n$
    IsNumber = FastSymbol(a$, ")", True)
        Else
     a$ = n$: MissNumExpr
        End If
    Exit Function
Case "MIN.DATA(", "ÌÉÊÑÏ.ÓÅÉÑÁÓ("
 IsNumber = False
  If IsExp(bstack, n$, r) Then
  
  Do While FastSymbol(n$, ",")
  If Not IsExp(bstack, n$, p) Then a$ = n$: MissNumExpr: Exit Function
  If p < r Then r = p
  
  Loop
  r = SG * r
    a$ = n$
    IsNumber = FastSymbol(a$, ")", True)
        Else
     a$ = n$: MissNumExpr
        End If
    Exit Function
Case "MAX(", "ÌÅÃÁËÏ("
dn = 2
GoTo comp1
Case "MIN(", "ÌÉÊÑÏ("
dn = 1
GoTo comp1
Case "COMPARE(", "ÓÕÃÊÑÉÍÅ("
comp1:
IsNumber = False
    w1 = Abs(IsLabel(bstack, n$, s$))
    If w1 = 1 Or w1 = 4 Then dd = 1  'WE NEED NUMBERS
    If w1 = 5 Or w1 = 7 Then dd = 2 'WE NEED NUMBERS
    If w1 = 0 Then MissingnumVar: a$ = n$: Exit Function
    If (w1 = 3 Or w1 = 6) And dd > 0 Then SyntaxError: a$ = n$: Exit Function
    If dd = 1 Then
        If GetVar(bstack, s$, w1) Then
                If Not FastSymbol(n$, ",") Then MissingnumVar: a$ = n$: Exit Function
                W3 = Abs(IsLabel(bstack, n$, s1$))
            If W3 = 1 Or W3 = 4 Then
                If GetVar(bstack, s1$, w2) Then
                Select Case dn
                Case 1
                    If var(w1) < var(w2) Then
                        r = SG * var(w1)
                    Else
                        r = SG * var(w2)
                    End If
                Case 2
                    If var(w1) > var(w2) Then
                        r = SG * var(w1)
                    Else
                        r = SG * var(w2)
                    End If
                Case Else
                    If var(w1) = 0 Then
                    If var(w2) = 0 Then
                    r = 0
                    Else
                    r = SG * Sgn(0 - MyRound(var(w2), 10))
                    End If
                    Else
                    r = SG * Sgn(MyRound(((var(w1) - var(w2)) / var(w1)), 10))
                    End If
                
                
                  
                End Select
                    a$ = n$
                    IsNumber = FastSymbol(a$, ")", True)
                Exit Function
                Else
                    Nosuchvariable s1$
                    a$ = n$
                    Exit Function
                End If
            ElseIf W3 = 5 Or W3 = 7 Then
                If neoGetArray(bstack, s1$, pppp) Then
                    If Not NeoGetArrayItem(pppp, bstack, s1$, w2, n$) Then Exit Function
                    Select Case dn
                Case 1
                    If var(w1) < pppp.item(w2) Then
                        r = SG * var(w1)
                    Else
                        r = SG * pppp.item(w2)
                    End If
                Case 2
                    If var(w1) > pppp.item(w2) Then
                        r = SG * var(w1)
                    Else
                        r = SG * pppp.item(w2)
                    End If
              Case Else
                   If var(w1) = 0 Then
                            If pppp.item(w2) = 0 Then
                            r = 0
                            Else
                            r = SG * Sgn(0 - MyRound(pppp.item(w2), 10))
                            End If
                    Else
                            r = SG * Sgn(MyRound(((var(w1) - pppp.item(w2)) / var(w1)), 10))
                    End If
              
                
                    End Select
                    a$ = n$
                    IsNumber = FastSymbol(a$, ")", True)
                Else
                    Nosuchvariable s1$
                    a$ = n$
                    Exit Function
                End If
            Else
                MissingnumVar
                a$ = n$
                Exit Function
            End If
        Else
            Nosuchvariable s$
            a$ = n$
            Exit Function
        End If
        
    ElseIf dd = 2 Then
        If neoGetArray(bstack, s$, pppp) Then
            If Not NeoGetArrayItem(pppp, bstack, s$, w1, n$) Then Exit Function
            If Not FastSymbol(n$, ",") Then MissingnumVar: a$ = n$: Exit Function
                W3 = Abs(IsLabel(bstack, n$, s1$))
            If W3 = 1 Or W3 = 4 Then
                    If GetVar(bstack, s1$, w2) Then
                    Select Case dn
                    Case 1
                        If pppp.item(w1) < var(w2) Then
                            r = SG * pppp.item(w1)
                        Else
                            r = SG * var(w2)
                        End If
                    Case 2
                        If pppp.item(w1) > var(w2) Then
                            r = SG * pppp.item(w1)
                        Else
                            r = SG * var(w2)
                        End If
                    Case Else
                    
                    
                      If pppp.item(w1) = 0 Then
                            If var(w2) = 0 Then
                            r = 0
                            Else
                            r = SG * Sgn(0 - MyRound(var(w2), 10))
                            End If
                    Else
                            r = SG * Sgn(MyRound(((pppp.item(w1) - var(w2)) / pppp.item(w1)), 10))
                    End If
                        
                    End Select
                        a$ = n$
                        IsNumber = FastSymbol(a$, ")", True)
                    Else
                        MissingnumVar
                        a$ = n$
                        Exit Function
                    End If
            ElseIf W3 = 5 Or W3 = 7 Then
                    If neoGetArray(bstack, s1$, pppp) Then
                        If Not NeoGetArrayItem(pppp, bstack, s1$, w2, n$) Then Exit Function
                    Select Case dn
                    Case 1
                        If pppp.item(w1) < pppp.item(w2) Then
                            r = SG * pppp.item(w1)
                        Else
                            r = SG * pppp.item(w2)
                        End If
                    Case 2
                        If pppp.item(w1) > var(w2) Then
                            r = SG * pppp.item(w1)
                        Else
                            r = SG * pppp.item(w2)
                        End If
                    Case Else
          If pppp.item(w1) = 0 Then
                            If pppp.item(w2) = 0 Then
                            r = 0
                            Else
                            r = SG * Sgn(0 - MyRound(pppp.item(w2), 10))
                            End If
                    Else
                            r = SG * Sgn(MyRound(((pppp.item(w1) - pppp.item(w2)) / pppp.item(w1)), 10))
                    End If
                    End Select
                        a$ = n$
                        IsNumber = FastSymbol(a$, ")", True)
                    Else
                        MissingnumVar
                        a$ = n$
                        Exit Function
                    End If
            Else
                MissingnumVar
                a$ = n$
                Exit Function
            End If
        Else
            MissingnumVar
            a$ = n$
            Exit Function
        End If
    ElseIf w1 = 3 Then
            If GetVar(bstack, s$, w1) Then
            If Not FastSymbol(n$, ",") Then MissingnumVar: a$ = n$: Exit Function
                W3 = Abs(IsLabel(bstack, n$, s1$))
                If W3 = 6 Then
                    If Not neoGetArray(bstack, s1$, pppp) Then MissingStrVar: a$ = n$:  Exit Function
                    If Not NeoGetArrayItem(pppp, bstack, s1$, w2, n$) Then Exit Function

                    r = SG * StrComp(var(w1), pppp.item(w2))

                ElseIf W3 = 3 Then
                    If Not GetVar(bstack, s1$, w2) Then a$ = n$: Exit Function

                    r = SG * StrComp(var(w1), var(w2))
                            Else
                a$ = n$
                MissFuncParameterStringVarMacro a$
                Exit Function
                End If
                a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
            Else
                    a$ = n$
                    MissFuncParameterStringVarMacro a$
            End If
    ElseIf w1 = 6 Then
            If neoGetArray(bstack, s$, pppp) Then
                If Not NeoGetArrayItem(pppp, bstack, s$, w2, n$) Then Exit Function
                If Not FastSymbol(n$, ",") Then MissingnumVar: a$ = n$: Exit Function
                W3 = Abs(IsLabel(bstack, n$, s1$))
                If W3 = 6 Then
                    If Not neoGetArray(bstack, s1$, pppp1) Then MissingStrVar: a$ = n$:  Exit Function
                    If Not NeoGetArrayItem(pppp1, bstack, s1$, W3, n$) Then Exit Function

                    r = SG * StrComp(pppp.item(w2), pppp1.item(W3))
 
                ElseIf W3 = 3 Then
                    If Not GetVar(bstack, s1$, W3) Then a$ = n$: Exit Function

                    r = SG * StrComp(pppp.item(w2), var(W3))
                Else
                a$ = n$
                MissFuncParameterStringVarMacro a$
                Exit Function
                End If
                a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
            Else
                a$ = n$
                MissParam a$
            End If
    Else
                 a$ = n$
                MissParam a$
    End If
    Exit Function
Case "DOC.UNIQUE.WORDS(", "ÅÃÃÑÁÖÏÕ.ÌÏÍÁÄÉÊÅÓ.ËÅÎÅÉÓ("
 IsNumber = False
    w1 = Abs(IsLabel(bstack, n$, s$))
        If w1 = 3 Then
            If GetVar(bstack, s$, w1) Then
                If Typename(var(w1)) = doc Then
                    r = SG * var(w1).UniqueWords
                Else
                MissFuncParammeterdOCVar a$
               End If
                a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
            Else
                    a$ = n$
                    MissFuncParameterStringVarMacro a$
                    
            End If
        ElseIf w1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, w2, n$) Then Exit Function
                    If Typename(pppp.item(w2)) = doc Then
                      r = SG * pppp.item(w2).UniqueWords
                      Else
                       MissFuncParammeterdOCVar a$
                
                      End If
                Else
                
                End If
                    a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissParam a$
    End If
    Exit Function
    
Case "DOC.WORDS(", "ÅÃÃÑÁÖÏÕ.ËÅÎÅÉÓ("
 IsNumber = False
    w1 = Abs(IsLabel(bstack, n$, s$))
        If w1 = 3 Then
            If GetVar(bstack, s$, w1) Then
                If Typename(var(w1)) = doc Then
                    r = SG * var(w1).WordCount
                Else
                MissFuncParammeterdOCVar a$
               End If
                a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
            Else
                    a$ = n$
                    MissFuncParameterStringVarMacro a$
                    
            End If
        ElseIf w1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, w2, n$) Then Exit Function
                    If Typename(pppp.item(w2)) = doc Then
                      r = SG * pppp.item(w2).WordCount
                      Else
                       MissFuncParammeterdOCVar a$
                
                      End If
                Else
                
                End If
                    a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissParam a$
    End If
    Exit Function
    
Case "DOC.LEN(", "ÅÃÃÑÁÖÏÕ.ÌÇÊÏÓ("
 IsNumber = False
    w1 = Abs(IsLabel(bstack, n$, s$))
        If w1 = 3 Then
            If GetVar(bstack, s$, w1) Then
                If Typename(var(w1)) = doc Then
                    r = SG * var(w1).SizeCRLF
                Else
                    r = SG * Len(var(w1))
                End If
                a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
            Else
                    a$ = n$
                    MissFuncParameterStringVarMacro a$
                    
            End If
        ElseIf w1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, w2, n$) Then Exit Function
                    If Typename(pppp.item(w2)) = doc Then
                      r = SG * pppp.item(w2).SizeCRLF
                      Else
                      r = SG * Len(pppp.item(w2))
                      End If
                Else
                
                End If
                    a$ = n$
                IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissParam a$
    End If
    Exit Function
Case "LEN.DISP(", "ÌÇÊÏÓ.ÅÌÖ("
 IsNumber = False
    
    If IsStrExp(bstack, n$, s$) Then
    r = SG * RealLen(s$)
    a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissParam a$
    End If
    Exit Function
Case "LEN(", "ÌÇÊÏÓ("
 IsNumber = False
    
    If IsStrExp(bstack, n$, s$) Then
    r = SG * Len(s$)
    a$ = n$
    
    IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissParam a$
    End If
    Exit Function
Case "SQRT(", "ÑÉÆÁ("
 IsNumber = False
    If IsExp(bstack, n$, r) Then
    a$ = n$
    If r <= 0 Then
    MyErMacro a$, "negative or zero number", "áñíçôéêüò Þ ìçäÝí óå ñßæá"
    Exit Function
   
    End If
  
    r = SG * Sqr(r)
    
    
   IsNumber = FastSymbol(a$, ")", True)
    Else
                a$ = n$
                MissParam a$
    
    End If
     Exit Function
Case "FREQUENCY(", "ÓÕ×ÍÏÔÇÔÁ("
IsNumber = False
    If IsExp(bstack, n$, r) Then
           If FastSymbol(n$, ",") Then
                If IsExp(bstack, n$, p) Then
                    r = SG * GetFrequency(CInt(r), CInt(p))
                    a$ = n$
                    IsNumber = FastSymbol(a$, ")", True)
                    Else
                a$ = n$
                MissParam a$
                End If
            Else
                a$ = n$
                MissParam a$
            End If
     Else
                a$ = n$
                MissParam a$
     End If
     Exit Function
Case "LOG(", "ËÏÃ("
IsNumber = False
    If IsExp(bstack, n$, r) Then
        If r <= 0 Then
       MyErMacro a$, "Only > zero parameter", "Ìüíï >0 ðáñÜìåôñïò"
        IsNumber = False: Exit Function
    Else
    r = SG * Log(r) / Log(10#)
    a$ = n$
    End If
   IsNumber = FastSymbol(a$, ")", True)
    Else
                a$ = n$
                MissParam a$
    
    End If
    Exit Function
 Case "LN(", "ËÖ("
 IsNumber = False
    If IsExp(bstack, n$, r) Then
    If r <= 0 Then
       MyErMacro a$, "Only > zero parameter", "Ìüíï >0 ðáñÜìåôñïò"
        IsNumber = False: Exit Function
    Else
    r = SG * Log(r)
    a$ = n$
    End If
    
 IsNumber = FastSymbol(a$, ")", True)
     Else
                a$ = n$
                MissParam a$
    
    End If
     Exit Function
Case "ATN(", "ÔÏÎ.ÅÖ("
IsNumber = False
    If IsExp(bstack, n$, r) Then
     a$ = n$
     r = SG * Atn(r) * 180# / Pi
        
IsNumber = FastSymbol(a$, ")", True)
     Else
                a$ = n$
                MissParam a$
    
    End If
    Exit Function
 Case "TAN(", "ÅÖÁÐ("
  IsNumber = False
    If IsExp(bstack, n$, r) Then
     a$ = n$
     If r = Int(r) Then
        If r Mod 90 = 0 And r Mod 180 <> 0 Then
        MyErMacro a$, "Wrong Tan Parameter", "ËÜèïò ðáñÜìåôñïò åöáðôïìÝíçò"
        IsNumber = False: Exit Function
        End If
        End If
    r = Sgn(r) * Tan(r * Pi / 180#)

     If Abs(r) < 1E-16 Then r = 0
     If Abs(r) < 1 And Abs(r) + 0.0000000000001 >= 1 Then r = Sgn(r)
   r = SG * r
    
IsNumber = FastSymbol(a$, ")", True)
     Else
                a$ = n$
                MissParam a$
    
    End If
    Exit Function
 Case "COS(", "ÓÕÍ("
 IsNumber = False
    If IsExp(bstack, n$, r) Then

    r = Cos(r * Pi / 180#)
 
    If Abs(r) < 1E-16 Then r = 0
    r = SG * r
    a$ = n$
    
  IsNumber = FastSymbol(a$, ")", True)
    Else
                a$ = n$
                MissParam a$
    
    End If
    Exit Function
 Case "SIN(", "ÇÌ("
 IsNumber = False
    If IsExp(bstack, n$, r) Then
    r = Sin(r * Pi / 180#)
    ''r = Sgn(r) * Int(Abs(r) * 10000000000000#) / 10000000000000#
    If Abs(r) < 1E-16 Then r = 0
    r = SG * r
    a$ = n$
    
 IsNumber = FastSymbol(a$, ")", True)
    Else
                a$ = n$
                MissParam a$
    
    End If
    Exit Function
 Case "ABS(", "ÁÐÏË("
   IsNumber = False
    If IsExp(bstack, n$, r) Then
    r = SG * Abs(r)
    a$ = n$
    
 IsNumber = FastSymbol(a$, ")", True)
    Else
                a$ = n$
                MissParam a$
    
    End If
    Exit Function
Case "LOWORD(", "LOWWORD(", "ÊÁÔÙÌÉÓÏ("
  IsNumber = False
If IsExp(bstack, n$, r) Then
    On Error Resume Next
    
    r = SG * Int((r - Int(r / 65536#) * 65536#))
    If Err.Number > 0 Then
    a$ = n$
    MyErMacro a$, Err.Description, "ËÜèïò üñéóìá"
        Exit Function
    
    End If
    a$ = n$
    
   IsNumber = FastSymbol(a$, ")", True)
        Else
                a$ = n$
                MissParam a$
 End If
 Exit Function
Case "HIWORD(", "HIGHWORD(", "ÐÁÍÙÌÉÓÏ("
    If IsExp(bstack, n$, r) Then
    On Error Resume Next
    
    r = SG * Int(Int(r / 256) / 256)
    If Err.Number > 0 Then
    a$ = n$
    MyErMacro a$, Err.Description, "ËÜèïò üñéóìá"
  
    IsNumber = False
    Exit Function
    End If
    a$ = n$
    
IsNumber = FastSymbol(a$, ")", True)
      Else
                a$ = n$
                MissParam a$
    
    End If
    Exit Function
    Case "BINARY.NEG(", "ÄÕÁÄÉÊÏ.ÁÍÔÉ(", "ÄÕÁÄÉÊÏ.ÁÍÔÉÓÔÑÏÖÏ("
      IsNumber = False
    If IsExp(bstack, n$, r) Then
            On Error Resume Next
    
             r = SG * uintnew(-1) - uintnew(r)
        If Err.Number > 0 Then
            a$ = n$
            MyErMacro a$, Err.Description, "ËÜèïò üñéóìá"
          
            Exit Function
            End If
    a$ = n$
    
IsNumber = FastSymbol(a$, ")", True)
   Else
                a$ = n$
                MissParam a$
    
    End If
     Exit Function
    Case "BINARY.OR(", "ÄÕÁÄÉÊÏ.Ç("
    IsNumber = False
        If IsExp(bstack, n$, r) Then
        If FastSymbol(n$, ",") Then
        If IsExp(bstack, n$, p) Then
            r = SG * uintnew((signlong(r) Or signlong(p)))
            a$ = n$
         IsNumber = FastSymbol(a$, ")", True)
           Else
                a$ = n$
                MissParam a$
        End If
          Else
                a$ = n$
                MissParam a$
       End If
         Else
                a$ = n$
                MissParam a$
       End If
       Exit Function
    Case "BINARY.AND(", "ÄÕÁÄÉÊÏ.ÊÁÉ("
        If IsExp(bstack, n$, r) Then
            If FastSymbol(n$, ",") Then
                If IsExp(bstack, n$, p) Then
                    r = SG * uintnew((signlong(r) And signlong(p)))
                    a$ = n$
                    IsNumber = FastSymbol(a$, ")", True)
                Else
                    a$ = n$
                    MissParam a$
                End If
            Else
                a$ = n$
                MissParam a$
            End If
        Else
            a$ = n$
            MissParam a$
       
       End If
       Exit Function
           Case "BINARY.XOR(", "ÄÕÁÄÉÊÏ.ÁÐÏ("
        If IsExp(bstack, n$, r) Then
            If FastSymbol(n$, ",") Then
                If IsExp(bstack, n$, p) Then
                    r = SG * uintnew((signlong(r) Xor signlong(p)))
                    a$ = n$
                    IsNumber = FastSymbol(a$, ")", True)
                Else
                    a$ = n$
                    MissParam a$
                End If
            Else
                a$ = n$
                MissParam a$
            End If
        Else
            a$ = n$
            MissParam a$
       
       End If
Exit Function
Case "HILOWWORD(", "ÄÕÏÌÉÓÁ("
 IsNumber = False
    If IsExp(bstack, n$, r) Then
        If FastSymbol(n$, ",") Then
              If IsExp(bstack, n$, p) Then
                    r = SG * (r * &H10000 + p)
                    a$ = n$
                     IsNumber = FastSymbol(a$, ")", True)
                  Else
                     a$ = n$
                    MissParam a$
                End If
        Else
             a$ = n$
             MissParam a$
        End If
     Else
             a$ = n$
             MissParam a$
      End If
     
        Exit Function
Case "BINARY.SHIFT(", "ÄÕÁÄÉÊÏ.ÏËÉÓÈÇÓÇ("
IsNumber = False
   If IsExp(bstack, n$, r) Then
  
            If FastSymbol(n$, ",") Then
                    If IsExp(bstack, n$, p) Then
                         If p > 31 Or p < -31 Then
                         a$ = n$
                         MyErMacro a$, "Shift from -31 to 31", "Ïëßóèçóç áðü -31 ùò 31"
                         IsNumber = False: Exit Function
                         Else
                               If p > 0 Then
                              r = SG * uintnew((signlong(r) And signlong(2 ^ (32 - p) - 1))) * 2 ^ p
                              ElseIf p = 0 Then
                              r = SG * r
                              Else
                              p = -p
                               r = SG * uintnew((signlong(r) And signlong(uintnew(-1) - uintnew(2 ^ p - 1)))) / 2 ^ p
                              End If
                              a$ = n$
                            IsNumber = FastSymbol(a$, ")", True)
                    Exit Function
                         End If
                    Else
                          a$ = n$
                        MissParam a$
                    End If
            Else
                a$ = n$
                MissParam a$
            End If
    Else
            a$ = n$
            MissParam a$
   End If
         Exit Function
Case "BINARY.ROTATE(", "ÄÕÁÄÉÊÇ.ÐÅÑÉÓÔÑÏÖÇ("
IsNumber = False
        If IsExp(bstack, n$, r) Then
             If FastSymbol(n$, ",") Then
                 If IsExp(bstack, n$, p) Then
                        If p > 31 Or p < -31 Then
                            a$ = n$
                              MyErMacro a$, "Rotation from -31 to 31", "ÐåñéóôïöÞ áðü -31 ùò 31"
                             IsNumber = False: Exit Function
                        Else
                             If p > 0 Then
                                 r = SG * (uintnew((signlong(r) And signlong(2 ^ (32 - p) - 1))) * 2 ^ p + uintnew((signlong(r) And signlong(uintnew(-1) - uintnew(2 ^ (32 - p) - 1)))) / 2 ^ (32 - p))
                     
                             ElseIf p = 0 Then
                                 r = SG * r
                             Else
                                 p = 32 + p
                                 r = SG * (uintnew((signlong(r) And signlong(2 ^ (32 - p) - 1))) * 2 ^ p + uintnew((signlong(r) And signlong(uintnew(-1) - uintnew(2 ^ (32 - p) - 1)))) / 2 ^ (32 - p))
                                 
                             End If
                        End If
                     a$ = n$
                  Else
                    a$ = n$
                    MissParam a$
                 End If
             Else
                a$ = n$
                MissParam a$
            End If
        IsNumber = FastSymbol(a$, ")", True)
        Else
            a$ = n$
            MissParam a$
        End If
       Exit Function
       
Case "SINT(", "ÁÊÅÑÁÉÏ.ÄÕÁÄÉÊÏ("
' GET AN UNSIGN AND GIVES A SIGN...AS READING BITS
 IsNumber = False
 If IsExp(bstack, n$, r) Then
    On Error Resume Next
    If r < 0 Then
    a$ = n$
      MyErMacro a$, "Unsign long can't be negative", "Ï ðëçèéêüò áêÝñáéïò äåí ìðïñåß íá åßíáé áñíçôéêüò"
   
    Exit Function
    End If
    r = SG * signlong(r)
    If Err.Number > 0 Then
    a$ = n$
      MyErMacro a$, "Unsign long to sign failed", "Ç ìåôáôñïðÞ ðëçèéêïý óå áêÝñáéï ìå ðñüóçìï, áðÝôõ÷å"
    IsNumber = False
    Exit Function
    End If
    a$ = n$
  IsNumber = FastSymbol(a$, ")", True)
    Exit Function
      Else
                    a$ = n$
                MissParam a$
    End If
   Exit Function
Case "USGN(", "ÄÕÁÄÉÊÏ("
'
IsNumber = False
 If IsExp(bstack, n$, r) Then
 a$ = n$
    On Error Resume Next
    If r > uintnew(-1) Then r = uintnew(-1)
    r = Fix(r)
    If r < 0 Then r = 0
    
    r = SG * r
    
IsNumber = FastSymbol(a$, ")", True)
    Exit Function
       Else
                    a$ = n$
                MissParam a$
    End If
    Exit Function
Case "UINT(", "ÄÕÁÄÉÊÏ.ÁÊÅÑÁÉÏ("
' READING BITS OF A SIGN AND GIVE AN UNSIGN OF SAME BITS
IsNumber = False
 If IsExp(bstack, n$, r) Then
 a$ = n$
    On Error Resume Next
    If r > 2147483647# Then
     MyErMacro a$, "Overflow long, expect lower than (2147483648)", "Õðåñ÷åßëéóç áêåñáßïõ, ðåñéìÝíù ìéêñüôåñï áðü (2147483648)"
      
    Exit Function
    ElseIf r < -2147483648# Then
    MyErMacro a$, "Overflow long, expect greater than (-2147483649)", "Õðåñ÷åßëéóç áêåñáßïõ, ðåñéìÝíù ìåãáëýôåñï áðü (-2147483649)"
     IsNumber = False
    Exit Function
    End If
    r = SG * uintnew(r)
    If Err.Number > 0 Then
    MyErMacro a$, "Sign to Unsign long failed", "Ç ìåôáôñïðÞ áêåñáßïõ ìå ðñüóçìï óå ðëçèéêü (÷ùñßò ðñüóçìï) áðÝôõ÷å"
    IsNumber = False
    Exit Function
    
    End If
    
    
IsNumber = FastSymbol(a$, ")", True)
    Exit Function
       Else
                    a$ = n$
                MissParam a$
    End If
    Exit Function
 Case "ROUND(", "ÓÔÑÏÃÃ("
   IsNumber = False
    If IsExp(bstack, n$, r) Then
    On Error Resume Next
    If FastSymbol(n$, ")") Then
            
            r = SG * MyRound(r, 13)
            a$ = n$
            IsNumber = True
    ElseIf FastSymbol(n$, ",", True) Then
        If IsExp(bstack, n$, PP) Then
        
          r = SG * MyRound(r, PP)
        
      
            a$ = n$
     IsNumber = FastSymbol(a$, ")", True)
     End If
    Else
                    a$ = n$
                MissParam a$
    
    
    End If
    End If
    Exit Function
   
 Case "INT(", "ÁÊ("
   IsNumber = False
    If IsExp(bstack, n$, r) Then
    On Error Resume Next
    r = SG * Int(r)
    If Err.Number > 0 Then
    a$ = n$
    MyErMacro a$, "long conversion failed", "Ç ìåôáôñïðÞ óå áêÝñáéï áðÝôõ÷å"
    Exit Function
    End If
    a$ = n$
 IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissParam a$
    
    
    End If
    Exit Function
Case "SEEK(", "ÌÅÔÁÈÅÓÇ("
 IsNumber = False
  IsSymbol3 n$, "#"  ' drop it
    If IsExp(bstack, n$, r) Then
    VR = r Mod 512
    
    If FLEN(VR) = 0 Then
 MyErMacro n$, "not valid file number", "ëÜèïò áñéèìüò áñ÷åßïõ"
a$ = n$
    ElseIf FLEN(VR) <> 1 Then
     MyErMacro n$, "not valid file TYPE", "ëÜèïò ÔÕÐÏÓ áñ÷åßïõ"
a$ = n$
    Else
    r = SG * Seek(VR)
    a$ = n$
  IsNumber = FastSymbol(a$, ")", True)
  End If
  
    Else
                   
                MissParam a$
    End If
    Exit Function

 Case "EOF(", "ÔÅËÏÓ("
 IsNumber = False
   IsSymbol3 n$, "#"  ' drop it
    If IsExp(bstack, n$, r) Then
        VR = r Mod 512
        If FLEN(VR) = 0 Then
        MyErMacro n$, "not valid file number", "ëÜèïò áñéèìüò áñ÷åßïõ"
         a$ = n$
    Else
    r = SG * (LOF(VR) < Seek(VR))
    a$ = n$
  IsNumber = FastSymbol(a$, ")", True)
  End If
  
    Else
                    a$ = n$
                MissParam a$
    End If
    
    Exit Function
Case "RANDOM(", "ÔÕ×ÁÉÏÓ("

    If IsExp(bstack, n$, r) Then
    r = Int(r)
        If FastSymbol(n$, ",") Then
        If Not IsExp(bstack, n$, p) Then IsNumber = False: Exit Function
        p = Int(p)
        If p > r Then p = p + r: r = p - r: p = p - r
        Else
        p = 0
        
        End If
    
    r = SG * Int((r - p + 1) * Rnd + p)
       a$ = n$
    IsNumber = True
    Else
      Randomize CDbl(timeGetTime)
     r = SG * True
      a$ = n$
    End If
    IsNumber = FastSymbol(a$, ")", True)

       Exit Function
Case "CHRCODE(", "×ÁÑÊÙÄ("
 IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    r = SG * AscW(s$)
    a$ = n$
   
  
    IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissParam a$
    End If
    Exit Function

Case "ASC(", "ÊÙÄ("
 IsNumber = False
    If IsStrExp(bstack, n$, s$) Then
    r = SG * Asc(s$)
    a$ = n$
   
  
    IsNumber = FastSymbol(a$, ")", True)
    Else
                    a$ = n$
                MissParam a$
    End If
    Exit Function
Case Else
LOOKFORSUBNUM:
On Error Resume Next

s1$ = v$ & ")" ' ANY CHAR HERE

MakeThisSubNum bstack, s1$
If IsSymbol(n$, "@") Then
'is a function allways...
If GetlocalSub(s1$, V1&) Then
    GoTo contAr1
ElseIf GetSub(s1$, V1&) Then
GoTo contAr1
Else
GoTo skiperror
End If

Else
If neoGetArray(bstack, v$, pppp, , , True) Then
    GoTo contAr2
ElseIf GetlocalSub(s1$, V1&) Then
    GoTo contAr1
ElseIf neoGetArray(bstack, v$, pppp) Then
GoTo contAr2
ElseIf GetSub(s1$, V1&) Then
GoTo contAr1
Else
GoTo skiperror
End If
End If
'''ver 18
If GetSub(s1$, V1&) Then
GoTo contAr1
ElseIf neoGetArray(bstack, v$, pppp) Then
GoTo contAr2
Else
GoTo skiperror
End If

If GetSub(s1$, V1&) Then
contAr1:
s1$ = Trim$(s1$)
Set nBstack = New basetask
nBstack.reflimit = varhash.Count
Set nBstack.Parent = bstack
If bstack.IamThread Then Set nBstack.Process = bstack.Process
Set nBstack.Owner = bstack.Owner
nBstack.OriginalCode = V1&
nBstack.UseGroupname = sbf(V1&).sbgroup

    If GoFunc(nBstack, s1$, n$, p) Then
    Set bstack.LastObj = nBstack.LastObj
        If InStr(v$, "%") > 0 Then
        
        r = SG * Int(p)
        Else
        r = SG * p
        End If
            a$ = n$
            IsNumber = True
    Else
  ''  a$ = n$
     IsNumber = False
    End If
    Exit Function
ElseIf neoGetArray(bstack, v$, pppp) Then
contAr2:

If FastSymbol(n$, ")") Then
IsNumber = True
p = 0
Set bstack.LastObj = pppp
a$ = n$
Exit Function
End If
pppp.SerialItem (0), dd, 5
dd = dd - 1
p = 0
PP = 0
    IsNumber = True
    w2 = 0
Do While dn <= dd
        pppp.SerialItem W3, dn, 6
        
            If IsExp(bstack, n$, p) Then
            If dn < dd Then
                If Not FastSymbol(n$, ",") Then a$ = n$: MyErMacro a$, "need index for " & v$ & ")", "÷ñåéÜæïìáé äåßêôç ãéá ôï ðßíáêá " & v$ & ")": IsNumber = False: Exit Function
               
                Else
             If FastSymbol(n$, ",") Then
        a$ = n$: IsNumber = False
            MyErMacro a$, "too many indexes for array " & v$ & ")", "ðïëëïß äåßêôåò ãéá ôï ðßíáêá " & v$ & ")"
            Exit Function
             
             End If
                If Not FastSymbol(n$, ")") Then a$ = n$: MissSymbol a$, ")": IsNumber = False: Exit Function
                
             
            End If
                On Error Resume Next
                If p < 0 Then
                        a$ = n$: IsNumber = False
                  MyErMacro a$, "negative index in array " & v$ & ")", "áñíçôéêüò äåßêôçò óôï ðßíáêá " & v$ & ")"
                Exit Function
                End If
                
            If Not pppp.PushOffset(w2, dn, CLng(p)) Then
                a$ = n$ ': IsNumber = False
                    MyErMacro a$, "index too high for array " & v$ & ")", "äåßêôçò õøçëüò ãéá ôï ðßíáêá " & v$ & ")"
                Exit Function
            Else
                       
                End If
            Else
             IsNumber = False
            If LastErNum = -2 Then
            Else
            a$ = n$
            MyErMacro a$, "missing index for array " & v$ & ")", "÷Üèçêå äåßêôçò ãéá ôï ðßíáêá " & v$ & ")"
            End If
            Exit Function
            End If
    dn = dn + 1
    Loop
    If Typename(pppp.item(w2)) = "Group" Then
    
      If Left$(n$, 1) = "." Then
                    
                          
                        IsNumber = SpeedGroup(bstack, pppp, "VAL", v$, n$, w2) = 1
                    If Not bstack.LastObj Is Nothing Then
                    Set bstack.LastObj = Nothing
                    Form1.refresh
                    End If
                           r = SG * bstack.LastValue
    
      Else
                      bstack.soros.CopyGroup pppp.item(w2), anything
                       Set bstack.LastObj = anything
                      
      End If
        a$ = n$
    Exit Function
    ElseIf IsObject(pppp.item(w2)) Then
    Set bstack.LastObj = pppp.item(w2)
    End If
   r = SG * pppp.item(w2)

    a$ = n$
    Exit Function
    Else
skiperror:
        a$ = n$: IsNumber = False
         If FindNameForGroup(bstack, v$) Then
 MyErMacro a$, "unknown method/array  " & v$, "¢ãíùóôç ìÝèïäïò/ðßíáêáò " & v$
 Else
     MyErMacro a$, "unknown function/array " & v$, "¢ãíùóôç óõíÜñôçóç/ðßíáêáò " & v$

End If

    
    Exit Function
    End If
    
End Select
Case Else

End Select
zerohere:
If Val("0" & Mid$(a$, sng&, 1)) = 0 And Left(Mid$(a$, sng&, 1), sng&) <> "0" And Left(Mid$(a$, sng&, 1), sng&) <> "." Then
IsNumber = False
Else

    If Mid$(a$, sng&, 1) = "." Then

    ig$ = "0"
    DE$ = "."
    ElseIf LCase(Mid$(a$, sng&, 2)) Like "0[x÷]" Then
    ig$ = "0"
    DE$ = "0x"
  sng& = sng& + 1
Else
    Do While sng& <= Len(a$)
        
        Select Case Mid$(a$, sng&, 1)
        Case "0" To "9"
        ig$ = ig$ & Mid$(a$, sng&, 1)
        Case "."
        DE$ = "."
        Exit Do
        Case Else
        Exit Do
        End Select
       sng& = sng& + 1
    Loop
    End If
    ' compute decimal part
    If DE$ <> "" Then
      sng& = sng& + 1
        Do While sng& <= Len(a$)
       
        Select Case Mid$(a$, sng&, 1)
        Case " ", ChrW(160)
        If Not (sg1 And Len(ex$) = 1) Then
        Exit Do
        End If
        Case "A" To "D", "a" To "d", "F", "f"
        If Left$(DE$, 2) = "0x" Then
        DE$ = DE$ & Mid$(a$, sng&, 1)
        End If
        Case "0" To "9"
        If sg1 Then
        ex$ = ex$ & Mid$(a$, sng&, 1)
        Else
        DE$ = DE$ & Mid$(a$, sng&, 1)
        End If
        Case "E", "e"
         If Left$(DE$, 2) = "0x" Then
         DE$ = DE$ & Mid$(a$, sng&, 1)
         Else
              If ex$ = "" Then
               sg1 = True
        ex$ = "E"
        Else
        Exit Do
        End If
        End If
        Case "Å", "å"
                         If ex$ = "" Then
               sg1 = True
        ex$ = "E"
        Else
        Exit Do
        End If
        ex$ = "E"
        
        Case "+", "-"
        If sg1 And Len(ex$) = 1 Then
         ex$ = ex$ & Mid$(a$, sng&, 1)
        Else
        Exit Do
        End If
        Case Else
        Exit Do
        End Select
         sng& = sng& + 1
        Loop
        If ex$ = "E" Or ex$ = "E-" Or ex$ = "E+" Then sng& = sng& - Len(ex$)
    End If
    If ig$ = "" Then
    IsNumber = False
    Else
  ''  If SG < 0 Then ig$ = "-" & ig$
    If Left$(DE$, 2) = "0x" Then
   ' r = UNPACKLNG(Left$(ex$, 8))
   If Mid$(DE$, 3) = "" Then
   r = 0
   Else
   DE$ = Right$("00000000" & Mid$(DE$, 3), 8)
   r = CDbl(UNPACKLNG(Left$(DE$, 4)) * 65536#) + CDbl(UNPACKLNG(Right$(DE$, 4)))
   End If
    Else
 If SG < 0 Then ig$ = "-" & ig$
            On Error Resume Next
            If ex$ = "E" Or ex$ = "E-" Or ex$ = "E+" Then
            r = Val(ig$ & DE$ & ex$ & "0")
            sng = sng + Len(ex$)
            ElseIf ex$ <> "" Then
                If Val(Mid$(ex$, 2)) > 308 Or Val(Mid$(ex$, 2)) < -324 Then
                    r = Val(ig$ & DE$)
                    sng = sng - Len(ex$)
                    ex$ = ""
                    
                    Else
                 r = Val(ig$ & DE$ & ex$)
                End If
            Else
        
            r = Val(ig$ & DE$)
            End If
            If Err.Number = 6 Then
                If Len(ex$) > 2 Then
                    ex$ = Left$(ex$, Len(ex$) - 1)
                    sng = sng - 1
                    Err.clear
                    r = Val(ig$ & DE$ & ex$)
                    If Err.Number = 6 Then
                        sng = sng - Len(ex$)
                         r = Val(ig$ & DE$)
                    End If
                End If
            MyEr "Error in exponet", "ËÜèïò óôïí åêèÝôç"
          IsNumber = False
            Exit Function
            End If
    
  End If
    a$ = Mid$(a$, sng&)
    IsNumber = True
    End If
End If
End Function
Function IsPureLabel(a$, r$) As Long
Dim RR&, one As Boolean, c$
r$ = ""
If a$ = "" Then IsPureLabel = 0: Exit Function

a$ = NLtrim$(a$)
    Do While Len(a$) > 0
    c$ = myUcase(Left$(a$, 1))
    If AscW(c$) < 256 Then
        Select Case c$
        Case "."
            If one Then
            Exit Do
            Exit Do
            ElseIf r$ <> "" Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1
            Else
            IsPureLabel = 0
            Exit Function
            End If
        Case "A" To "Z", "Á" To "Ù", "¢", "¸", "º", "¼", "¹", "¿", "¾", "ò"
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        Case "0" To "9", "_"
           If one Then
            Exit Do
            ElseIf r$ <> "" Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            Else
            Exit Do
            End If
            
        Case "$"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 3 ' is string variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "%"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 4 ' is long variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "("
            If r$ <> "" Then
                            If Mid$(a$, 2, 2) = ")@" Then
                                    r$ = r$ & "()."
                                  
                                 a$ = Mid$(a$, 4)
                               Else
                                       Select Case RR&
                                       Case 1
                                       RR& = 5 ' float array or function
                                       Case 3
                                       RR& = 6 'string array or function
                                       Case 4
                                       RR& = 7 ' long array
                                       Case Else
                                       Exit Do
                                       End Select
                                       r$ = r$ & Left$(a$, 1)
                                       a$ = Mid$(a$, 2)
                                   Exit Do
                            
                          End If
               Else
                        Exit Do
            
            End If
        Case Else
        Exit Do
        End Select
        Else
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        End If

    Loop
    IsPureLabel = RR&
   a$ = NLtrim$(a$)

End Function
Function IsLabelBig(bstack As basetask, a$, rrr$, Optional nocommand As Boolean, Optional r$) As Long
Dim RR&, one As Boolean, c$, dot&, gr As Boolean, skipcase As Boolean, CC As Long
r$ = ""
If a$ = "" Then IsLabelBig = 0: Exit Function
a$ = NLtrim$(a$)
    Do While Len(a$) > 0
     c$ = Left$(a$, 1) 'ANYCHAR HERE
    If AscW(c$) < 256 Then
        Select Case c$
        Case "@"
           If r$ = "" Then
              a$ = Mid$(a$, 2)
              ElseIf Mid$(a$, 2, 1) <> "(" And r$ <> "" Then
            r$ = r$ & "."
              a$ = Mid$(a$, 2)
              Else
                 IsLabelBig = 0: Exit Function
            End If
        Case "?"
        If r$ = "" Then
        rrr$ = "?"
        
        IsLabelBig = 1
        Exit Function
        End If
        a$ = Mid$(a$, 2)
        Case ":"
            If one Then
  
            Exit Do
           
            ElseIf r$ <> "" Then
            If Mid$(a$, 2) <> "" Then
            If Mid$(a$, 2, 1) <> "\" And Mid$(a$, 2, 2) <> vbCrLf Then
            
                    
            Exit Do
            End If
            End If
            
            If InStr(r$, ":") > 0 Then
                IsLabelBig = 0
            Exit Function
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1
            End If
            Else
            IsLabelBig = 0
            Exit Function
            End If
        Case "."
            
            If one Then
  
            Exit Do
           ElseIf r$ <> "" Then
           
                    r$ = r$ & Left$(a$, 1)
                       a$ = Mid$(a$, 2)
           ''
           ElseIf Not Mid$(a$, 2, 1) Like "[0-9]" Then
            
                       If r$ <> "" Then
                       r$ = r$ & Left$(a$, 1)
                      RR& = 1
                                      
                            Else
                            
                            dot& = dot& + 1
                    
                            End If
                         
                         a$ = Mid$(a$, 2)
                        
                        
            Else
                         If r$ = "" And dot& > 0 Then
                                  nocommand = True
                                 rrr$ = String$(dot& + 1, ".")     ' i want this only in right position for "dir .. "
                                 r$ = rrr$
                                  a$ = Mid$(a$, 2)
                                 IsLabelBig = 1
                         Else
                              IsLabelBig = 0
                        End If
                    
            Exit Function
            End If
        Case "{" To "~", "^"
            Exit Do
        
        Case "\"
           If one Then
            Exit Do
            ElseIf r$ <> "" Or dot& Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            Else
              Exit Do
            End If
        Case "0" To "9", "_"  ' old ,"\"
       
           If one Then
            Exit Do
            ElseIf r$ <> "" Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
             nocommand = True
            RR& = 1 'is an identifier or floating point variable
            Else
            If dot& > 0 Then a$ = "." + a$: dot& = 0
            
            Exit Do
            End If
Case Is >= "A"
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        Case "&"
        
            If one Then Exit Do
            
            If r$ <> "" Then
                'ERROR
                RR& = 0
                '' r$ = ""
                rrr$ = ""
                Exit Function
            Else
           nocommand = True
                a$ = Mid$(a$, 2)
                RR& = Abs(IsLabelBig(bstack, a$, r$))
                skipcase = True
                If RR& < 5 Then
            Dim I As Long
         
                    If GetlocalVar(r$, I) Then
                        a$ = Chr(34) + HERE$ & "." & r$ & Chr(34) + a$
                    ElseIf Left$(r$, 5) = "ÁÕÔÏ." Or Left$(r$, 5) = "THIS." Then
                        If bstack.UseGroupname <> "" Then
                                 c$ = bstack.UseGroupname + Mid$(r$, 6)
                                 
                         Else
                             c$ = StripThis2(HERE$)
                             If c$ <> "" Then c$ = c$ & "." & Mid(r$, 6) Else c$ = HERE$ & "." & r$
                         End If
                    a$ = Chr(34) + c$ + Chr(34) + a$
                    
                  ElseIf varhash.find(r$, CC) Then
                         a$ = Chr(34) + r$ & Chr(34) + a$
                    Else
                    '' r$ = myUcase(r$, gr)
                    
                    If r$ = "THIS" Or r$ = "ÁÕÔÏ" Then
                    rrr$ = r$
                   IsLabelBig = -100
                   
                   Exit Function
                    Else
                If GetSub(r$ + ")", RR&) Then
                
                                 r$ = "{" + sbf(RR&).sb + "} " + sbf(RR&).sbgroup
                                 
                    RR& = 2
                    Exit Do
                    Else
                    MyErMacro a$, "can't pass reference", "äåí ìðïñþ íá âÜëù áíáöïñÜ"
                    End If
                    End If
                    End If
                Else
                    If FastSymbol(a$, ")") Then
                           '' r$ = myUcase(r$, gr)
                            RR& = 0
                            If Left$(r$, 5) = "ÁÕÔÏ." Or Left$(r$, 5) = "THIS." Then
                            If varhash.ExistKey(bstack.UseGroupname & Mid(r$, 6)) Then
                       
                                    a$ = Chr(34) + bstack.UseGroupname & Mid(r$, 6, Len(r$) - 6) + Chr(34) + a$
                                    Else
                                    RR& = 1
                                    End If
                                ElseIf varhash.ExistKey(HERE$ & "." & r$) Then
                               a$ = Chr(34) + HERE$ & "." & Mid$(r$, 1, Len(r$) - 1) + Chr(34) + a$
  
                                ElseIf varhash.ExistKey(r$) Then
                                    a$ = Chr(34) + Mid$(r$, 1, Len(r$) - 1) + Chr(34) + a$
                                Else
                                   RR& = 1
                                End If
                                 If RR& = 1 Then
                                 If bstack.UseGroupname <> "" Then
                                 r$ = bstack.UseGroupname + Mid$(r$, 6)
                                 Else
                                 End If
                                 If GetSub(r$ + ")", RR&) Then
                                                                  r$ = "{" + sbf(RR&).sb + "}" + sbf(RR&).sbgroup
                                 
                    RR& = 2
     
                    Exit Do
                    
                    Else
                    MyErMacro a$, "can't pass reference", "äåí ìðïñþ íá âÜëù áíáöïñÜ"
                    End If
               
                                 
                                 End If
                                 RR& = 0
                                 r$ = ""
                                Exit Do
                            End If
                    End If
                    
                    r$ = ""
                    RR& = 0
                    Exit Do
            End If
            
        Case "$"
       If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 3 ' is string variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "%"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 4 ' is long variable
            r$ = r$ & Left$(a$, 1)
            nocommand = True
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "("
            If r$ <> "" Then
                If Mid$(a$, 2, 2) = ")@" Then
                 r$ = r$ & "()."
              a$ = Mid$(a$, 4)
                Else
                Select Case RR&
                Case 1
                RR& = 5 ' float array or function
                Case 3
                RR& = 6 'string array or function
                Case 4
                RR& = 7 ' long array
                Case Else
                Exit Do
                End Select
                r$ = r$ & Left$(a$, 1)
                a$ = Mid$(a$, 2)
               Exit Do
            
            End If
           Else
           Exit Do
            End If
        Case Else
        Exit Do
        End Select
        Else
            If one Then
            Exit Do
            Else
            gr = True
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        End If
    Loop
    If skipcase Then
    rrr$ = r$
    Else
    rrr$ = myUcase(r$, gr)
    End If
   If dot& Then
   nocommand = True
                           If r$ <> "" Then
     
                        RR& = bstack.GetDotNew(rrr$, dot&) * RR&

                        nocommand = RR&
                           Else
                          If dot& > 1 Then rrr$ = String$(dot&, ".") + rrr$: If RR& = 0 Then RR& = 1
                          End If
    
    
   End If
   
    IsLabelBig = RR&
    nocommand = IsLabelBig And (Len(r$) = 1 Or nocommand)
 '' a$ = LTrim(a$)

End Function
Function IsLabel(bstack As basetask, a$, rrr$, Optional NoSpace As Boolean = False) As Long
Dim RR&, one As Boolean, c$, dot&, gr As Boolean, skipcase As Boolean, r$, CC As Long
'r$ = ""
If a$ = "" Then IsLabel = 0: Exit Function
If Not NoSpace Then a$ = NLtrim$(a$) Else If Asc(a$) = 32 Then Exit Function
    Do While Len(a$) > 0
     c$ = Left$(a$, 1) 'ANYCHAR HERE
    If AscW(c$) < 256 Then
        Select Case c$
        Case "@"
           If r$ = "" Then
              a$ = Mid$(a$, 2)
              ElseIf Mid$(a$, 2, 1) <> "(" And r$ <> "" Then
            r$ = r$ & "."
              a$ = Mid$(a$, 2)
              Else
                 IsLabel = 0: Exit Function
            End If
        Case "?"
        If r$ = "" Then
        rrr$ = "?"
        
        IsLabel = 1
        Exit Function
        End If
        a$ = Mid$(a$, 2)
        Case ":"
            If one Then
  
            Exit Do
           
            ElseIf r$ <> "" Then
            If Mid$(a$, 2) <> "" Then
            If Mid$(a$, 2, 1) <> "\" And Mid$(a$, 2, 2) <> vbCrLf Then
            
                    
            Exit Do
            End If
            End If
            
            If InStr(r$, ":") > 0 Then
                IsLabel = 0
            Exit Function
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1
            End If
            Else
            IsLabel = 0
            Exit Function
            End If
        Case "."
            
            If one Then
  
            Exit Do
           ElseIf r$ <> "" Then
           
                    r$ = r$ & Left$(a$, 1)
                       a$ = Mid$(a$, 2)
           ''
           ElseIf Not Mid$(a$, 2, 1) Like "[0-9]" Then
            
                       If r$ <> "" Then
                       r$ = r$ & Left$(a$, 1)
                      RR& = 1
                                      
                            Else
                            
                            dot& = dot& + 1
                    
                            End If
                         
                         a$ = Mid$(a$, 2)
                        
                        
            Else
                         If r$ = "" And dot& > 0 Then
                                 rrr$ = String$(dot& + 1, ".")     ' i want this only in right position for "dir .. "
                                 r$ = rrr$
                                  a$ = Mid$(a$, 2)
                                 IsLabel = 1
                         Else
                              IsLabel = 0
                        End If
                    
            Exit Function
            End If
        Case "{" To "~", "^"
            Exit Do
        
        Case "\"
           If one Then
            Exit Do
            ElseIf r$ <> "" Or dot& Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            Else
              Exit Do
            End If
        Case "0" To "9", "_"  ' old ,"\"
       
           If one Then
            Exit Do
            ElseIf r$ <> "" Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            Else
            If dot& > 0 Then a$ = "." + a$: dot& = 0
            
            Exit Do
            End If
Case Is >= "A"
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        Case "&"
        
            If one Then Exit Do
            
            If r$ <> "" Then
                'ERROR
                RR& = 0
                '' r$ = ""
                rrr$ = ""
                Exit Function
            Else
                a$ = Mid$(a$, 2)
                RR& = Abs(IsLabel(bstack, a$, r$, True))
                skipcase = True
                If RR& < 5 Then
            Dim I As Long
         
                    If GetlocalVar(r$, I) Then
                        a$ = Chr(34) + HERE$ & "." & r$ & Chr(34) + a$
                    ElseIf Left$(r$, 5) = "ÁÕÔÏ." Or Left$(r$, 5) = "THIS." Then
                        If bstack.UseGroupname <> "" Then
                                 c$ = bstack.UseGroupname + Mid$(r$, 6)
                                 
                         Else
                             c$ = StripThis2(HERE$)
                             If c$ <> "" Then c$ = c$ & "." & Mid(r$, 6) Else c$ = HERE$ & "." & r$
                         End If
                    a$ = Chr(34) + c$ + Chr(34) + a$
                    
                  ElseIf varhash.find(r$, CC) Then
                         a$ = Chr(34) + r$ & Chr(34) + a$
                    Else
                    '' r$ = myUcase(r$, gr)
                    
                    If r$ = "THIS" Or r$ = "ÁÕÔÏ" Then
                    rrr$ = r$
                   IsLabel = -100
                   
                   Exit Function
                    Else
                If GetSub(r$ + ")", RR&) Then
                
                                 r$ = "{" + sbf(RR&).sb + "} " + sbf(RR&).sbgroup
                                 
                    RR& = 2
                    Exit Do
                    Else
                    MyErMacro a$, "can't pass reference", "äåí ìðïñþ íá âÜëù áíáöïñÜ"
                    End If
                    End If
                    End If
                Else
                    If FastSymbol(a$, ")") Then
                           '' r$ = myUcase(r$, gr)
                            RR& = 0
                            If Left$(r$, 5) = "ÁÕÔÏ." Or Left$(r$, 5) = "THIS." Then
                            If varhash.ExistKey(bstack.UseGroupname & Mid(r$, 6)) > 0 Then
                                    a$ = Chr(34) + bstack.UseGroupname & Mid(r$, 6, Len(r$) - 6) + Chr(34) + a$
                                    Else
                                    RR& = 1
                                    End If
                                ElseIf varhash.ExistKey(HERE$ & "." & r$) Then
  ''                              ElseIf InStr(arrname$, Chr$(13) + HERE$ & "." & myUcase(Mid$(r$, 1, Len(r$))) + " ") > 0 Then
                                    a$ = Chr(34) + HERE$ & "." & Mid$(r$, 1, Len(r$) - 1) + Chr(34) + a$
                                ElseIf varhash.ExistKey(r$) Then
                                    a$ = Chr(34) + Mid$(r$, 1, Len(r$) - 1) + Chr(34) + a$
                                Else
                                   RR& = 1
                                End If
                                 If RR& = 1 Then
                                 If bstack.UseGroupname <> "" Then
                                 r$ = bstack.UseGroupname + Mid$(r$, 6)
                                 Else
                                 End If
                                 If GetSub(r$ + ")", RR&) Then
                                                                  r$ = "{" + sbf(RR&).sb + "}" + sbf(RR&).sbgroup
                                 
                    RR& = 2
     
                    Exit Do
                    
                    Else
                    MyErMacro a$, "can't pass reference", "äåí ìðïñþ íá âÜëù áíáöïñÜ"
                    End If
               
                                 
                                 End If
                                 RR& = 0
                                 r$ = ""
                                Exit Do
                            End If
                    End If
                    
                    r$ = ""
                    RR& = 0
                    Exit Do
            End If
            
        Case "$"
       If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 3 ' is string variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "%"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 4 ' is long variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "("
            If r$ <> "" Then
                If Mid$(a$, 2, 2) = ")@" Then
                 r$ = r$ & "()."
              a$ = Mid$(a$, 4)
                Else
                Select Case RR&
                Case 1
                RR& = 5 ' float array or function
                Case 3
                RR& = 6 'string array or function
                Case 4
                RR& = 7 ' long array
                Case Else
                Exit Do
                End Select
                r$ = r$ & Left$(a$, 1)
                a$ = Mid$(a$, 2)
               Exit Do
            
            End If
           Else
           Exit Do
            End If
        Case Else
        Exit Do
        End Select
        Else
            If one Then
            Exit Do
            Else
            gr = True
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        End If
    Loop
    If skipcase Then
    rrr$ = r$
    Else
    rrr$ = myUcase(r$, gr)
    End If
   If dot& Then
                           If r$ <> "" Then
     
                        RR& = bstack.GetDotNew(rrr$, dot&) * RR&
                           Else
                          If dot& > 1 Then rrr$ = String$(dot&, ".") + rrr$: If RR& = 0 Then RR& = 1
                          End If
    
    
   End If
   
    IsLabel = RR&

 '' a$ = LTrim(a$)

End Function

Function IsLabelDIM(bstack As basetask, a$, r$) As Long
Dim RR&, one As Boolean, c$, dot&, gr As Boolean, skipcase As Boolean, CC As Long
r$ = ""
If a$ = "" Then IsLabelDIM = 0: Exit Function
a$ = NLtrim$(a$)
    Do While Len(a$) > 0
     c$ = Left$(a$, 1) 'ANYCHAR HERE
    If AscW(c$) < 256 Then
        Select Case c$
        Case "@"
           If r$ = "" Then
              a$ = Mid$(a$, 2)
              ElseIf Mid$(a$, 2, 1) <> "(" And r$ <> "" Then
            r$ = r$ & "."
              a$ = Mid$(a$, 2)
              Else
                 IsLabelDIM = 0: Exit Function
            End If
        Case "?"
        If r$ = "" Then
        r$ = "?"
        IsLabelDIM = 1
        Exit Function
        End If
        a$ = Mid$(a$, 2)
        Case ":"
            If one Then
  
            Exit Do
           
            ElseIf r$ <> "" Then
            If Mid$(a$, 2) <> "" Then
            If Mid$(a$, 2, 1) <> "\" And Mid$(a$, 2, 2) <> vbCrLf Then
            
                    
            Exit Do
            End If
            End If
            
            If InStr(r$, ":") > 0 Then
                IsLabelDIM = 0
            Exit Function
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1
            End If
            Else
            IsLabelDIM = 0
            Exit Function
            End If
        Case "."
            
            If one Then
  
            Exit Do
           ElseIf r$ <> "" Then
           
                    r$ = r$ & Left$(a$, 1)
                       a$ = Mid$(a$, 2)
           ''
           ElseIf Not Mid$(a$, 2, 1) Like "[0-9]" Then
            
                       If r$ <> "" Then
                       r$ = r$ & Left$(a$, 1)
                      RR& = 1
                                      
                            Else
                            
                            dot& = dot& + 1
                    
                            End If
                         
                         a$ = Mid$(a$, 2)
                        
                        
            Else
                         If r$ = "" And dot& > 0 Then
                     
                             
                                 r$ = String$(dot& + 1, ".")
                                  a$ = Mid$(a$, 2)
                                 IsLabelDIM = 1
                         Else
                              IsLabelDIM = 0
                        End If
                    
            Exit Function
            End If
        Case "{" To "~", "^"
            Exit Do
        
        Case "\"
           If one Then
            Exit Do
            ElseIf r$ <> "" Or dot& Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            Else
              Exit Do
            End If
        Case "0" To "9", "_"  ' old ,"\"
       
           If one Then
            Exit Do
            ElseIf r$ <> "" Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
             RR& = 1 'is an identifier or floating point variable
            Else
            If dot& > 0 Then a$ = "." + a$: dot& = 0
            
            Exit Do
            End If
Case Is >= "A"
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        Case "&"
        
            If one Then Exit Do
            
            If r$ <> "" Then
            
                RR& = 0
     
              r$ = ""
                Exit Function
            Else
                a$ = Mid$(a$, 2)
                RR& = Abs(IsLabelDIM(bstack, a$, r$))
                skipcase = True
                If RR& < 5 Then
            Dim I As Long
         
                    If GetlocalVar(r$, I) Then
                        a$ = Chr(34) + HERE$ & "." & r$ & Chr(34) + a$
                    ElseIf Left$(r$, 5) = "ÁÕÔÏ." Or Left$(r$, 5) = "THIS." Then
                        If bstack.UseGroupname <> "" Then
                                 c$ = bstack.UseGroupname + Mid$(r$, 6)
                                 
                         Else
                             c$ = StripThis2(HERE$)
                             If c$ <> "" Then c$ = c$ & "." & Mid(r$, 6) Else c$ = HERE$ & "." & r$
                         End If
                    a$ = Chr(34) + c$ + Chr(34) + a$
                    
                  ElseIf varhash.find(r$, CC) Then
                         a$ = Chr(34) + r$ & Chr(34) + a$
                    Else
                    '' r$ = myUcase(r$, gr)
                    
                    If r$ = "THIS" Or r$ = "ÁÕÔÏ" Then
                
                   IsLabelDIM = -100
                   
                   Exit Function
                    Else
                If GetSub(r$ + ")", RR&) Then
                
                                 r$ = "{" + sbf(RR&).sb + "} " + sbf(RR&).sbgroup
                                 
                    RR& = 2
                    Exit Do
                    Else
                    MyErMacro a$, "can't pass reference", "äåí ìðïñþ íá âÜëù áíáöïñÜ"
                    End If
                    End If
                    End If
                Else
                    If FastSymbol(a$, ")") Then
                           '' r$ = myUcase(r$, gr)
                            RR& = 0
                            If Left$(r$, 5) = "ÁÕÔÏ." Or Left$(r$, 5) = "THIS." Then
                            If varhash.ExistKey(bstack.UseGroupname & Mid(r$, 6)) Then
                                    a$ = Chr(34) + bstack.UseGroupname & Mid(r$, 6, Len(r$) - 6) + Chr(34) + a$
                                    Else
                                    RR& = 1
                                    End If
                                ElseIf varhash.ExistKey(HERE$ & "." & r$) Then
                                     a$ = Chr(34) + HERE$ & "." & Mid$(r$, 1, Len(r$) - 1) + Chr(34) + a$
                                ElseIf varhash.ExistKey(r$) Then
                                    a$ = Chr(34) + Mid$(r$, 1, Len(r$) - 1) + Chr(34) + a$
                                Else
                                   RR& = 1
                                End If
                                 If RR& = 1 Then
                                 If bstack.UseGroupname <> "" Then
                                 r$ = bstack.UseGroupname + Mid$(r$, 6)
                                 Else
                                 End If
                                 If GetSub(r$ + ")", RR&) Then
                                                                  r$ = "{" + sbf(RR&).sb + "}" + sbf(RR&).sbgroup
                                 
                    RR& = 2
     
                    Exit Do
                    
                    Else
                    MyErMacro a$, "can't pass reference", "äåí ìðïñþ íá âÜëù áíáöïñÜ"
                    End If
               
                                 
                                 End If
                                 RR& = 0
                                 r$ = ""
                                Exit Do
                            End If
                    End If
                    
                    r$ = ""
                    RR& = 0
                    Exit Do
            End If
            
        Case "$"
       If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 3 ' is string variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "%"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 4 ' is long variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "("
            If r$ <> "" Then
                If Mid$(a$, 2, 2) = ")@" Then
                 r$ = r$ & "()."
              a$ = Mid$(a$, 4)
                Else
                Select Case RR&
                Case 1
                RR& = 5 ' float array or function
                Case 3
                RR& = 6 'string array or function
                Case 4
                RR& = 7 ' long array
                Case Else
                Exit Do
                End Select
                r$ = r$ & Left$(a$, 1)
                a$ = Mid$(a$, 2)
               Exit Do
            
            End If
           Else
           Exit Do
            End If
        Case Else
        Exit Do
        End Select
        Else
            If one Then
            Exit Do
            Else
            gr = True
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        End If
    Loop
    If Not skipcase Then r$ = myUcase(r$, gr)
   If dot& Then
                           If r$ <> "" Then
                           If dot& = 1 Then
                           r$ = "THIS." + r$
                           RR& = -RR&
                           Else
                        RR& = bstack.GetDotNew(r$, dot&) * RR&
                        End If
                           Else
                          If dot& > 1 Then r$ = String$(dot&, ".") + r$: If RR& = 0 Then RR& = 1
                          End If
    
    
   End If
    IsLabelDIM = RR&
End Function

Function IsLabelOnly(a$, r$) As Long

Dim RR&, one As Boolean, c$, dot&
r$ = ""
If a$ = "" Then IsLabelOnly = 0: Exit Function
a$ = NLtrim$(a$)
    Do While Len(a$) > 0
     c$ = Left$(a$, 1) 'ANYCHAR HERE
    If AscW(c$) < 256 Then
        Select Case c$
        Case "@"
           If r$ = "" Then
              a$ = Mid$(a$, 2)
              ElseIf Mid$(a$, 2, 1) <> "(" And r$ <> "" Then
            r$ = r$ & "."
              a$ = Mid$(a$, 2)
              Else
                 IsLabelOnly = 0: Exit Function
            End If
        Case "."
            If one Then
            Exit Do
           ElseIf r$ <> "" Then
                    r$ = r$ & Left$(a$, 1)
                       a$ = Mid$(a$, 2)
                    
           ElseIf Not Mid$(a$, 2, 1) Like "[0-9]" Then
            
                       If r$ <> "" Then
                       r$ = r$ & Left$(a$, 1)
                      RR& = 1
                                      
                            Else
                            
                            dot& = dot& + 1
                    
                            End If
                         
                         a$ = Mid$(a$, 2)
                        
                        
            Else
            If r$ = "" And dot& > 0 Then

            r$ = String$(dot& + 1, ".")
            a$ = Mid$(a$, 2)
           IsLabelOnly = 1
            Else
          
            IsLabelOnly = 0
           End If
            Exit Function
            End If
     Case "\", "{" To "~", "^"
Exit Do
        
        Case "0" To "9", "_"
       
           If one Then
            Exit Do
            ElseIf r$ <> "" Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
               RR& = 1 'is an identifier or floating point variable
            Else
            If dot& > 0 Then a$ = "." + a$: dot& = 0
            
            Exit Do
            End If
Case Is >= "A"
            If one Then
            Exit Do
            Else
            
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
      Case "&"
            If r$ = "" Then RR& = 2:    a$ = Mid$(a$, 2)
            Exit Do
       Case "$"
       If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 3 ' is string variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "%"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 4 ' is long variable
            r$ = r$ & Left$(a$, 1)
        
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "("
            If r$ <> "" Then
                If Mid$(a$, 2, 2) = ")@" Then
                 r$ = r$ & "()."
              a$ = Mid$(a$, 4)
                Else
                Select Case RR&
                Case 1
                RR& = 5 ' float array or function
                Case 3
                RR& = 6 'string array or function
                Case 4
                RR& = 7 ' long array
                Case Else
                Exit Do
                End Select
                r$ = r$ & Left$(a$, 1)
                a$ = Mid$(a$, 2)
               Exit Do
            
            End If
           Else
           Exit Do
            End If
        Case Else
        Exit Do
        End Select
        Else
            If one Then
            Exit Do
            Else
             r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        End If
    Loop
    IsLabelOnly = RR&
   
End Function
Function IsLabelSYMB(a$, r$) As Boolean
Dim RR&, one As Boolean, c$
r$ = ""
If a$ = "" Then IsLabelSYMB = 0: Exit Function
a$ = NLtrim$(a$)
    Do While Len(a$) > 0
     c$ = myUcase(Left$(a$, 1))
    If AscW(c$) < 256 Then
        Select Case c$
        Case "."
            If one Then
            Exit Do
            ElseIf r$ <> "" Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1
            Else
            IsLabelSYMB = 0
            Exit Function
            End If
        Case "A" To "Z", "Á" To "Ù", "¢", "¸", "º", "¼", "¹", "¿", "¾", "ò"
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        
        Case Else
        Exit Do
        End Select
                Else
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        
        End If
    Loop
    
    IsLabelSYMB = RR&
   a$ = NLtrim$(a$)

End Function
Function IsLabelSYMB2(a$, r$) As Boolean
'without ucase
Dim RR&, one As Boolean, c$
r$ = ""
If a$ = "" Then IsLabelSYMB2 = 0: Exit Function
a$ = NLtrim$(a$)
    Do While Len(a$) > 0
     c$ = Left$(a$, 1)
    If AscW(c$) < 256 Then
        Select Case c$
        Case "."
            If one Then
            Exit Do
            ElseIf r$ <> "" Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1
            Else
            IsLabelSYMB2 = 0
            Exit Function
            End If
        Case "A" To "Z", "a" To "z"
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        
        Case Else
        Exit Do
        End Select
                Else
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        
        End If
    Loop
    IsLabelSYMB2 = RR&
   a$ = NLtrim$(a$)

End Function
Function IsLabelSYMB3old(a$, r$) As Boolean
a$ = NLtrim$(a$)
If r$ = "" Then Exit Function
If a$ + " " Like r$ + "*" Then
IsLabelSYMB3old = True
a$ = Mid$(a$, Len(r$) + 1)
End If
End Function
Function IsLabelSYMB3(a$, r$) As Boolean
Dim RR&, c$, LB As Long, mb As Long, LLB As Long
a$ = NLtrim$(a$)
LLB = Len(a$)
r$ = ""
If LLB = 0 Then IsLabelSYMB3 = 0: Exit Function
mb = 0   'INDICATE LEFT SPACES
LB = 1
    Do While LB <= LLB
     c$ = Mid$(a$, LB, 1)
    If AscW(c$) < 256 Then
        Select Case c$
        Case " ", ChrW(160)
        If LB - mb > 1 Then
        LB = LB - 1
        Exit Do
        Else
        mb = LB
        End If
        Case "."
         If LB > mb Then
            RR& = 1
            Else
            IsLabelSYMB3 = 0
            Exit Function
            End If
        Case "A" To "Z", "a" To "z"
     
            RR& = 1 'is an identifier or floating point variable
        Case Else
        LB = LB - 1
        Exit Do
        End Select
                Else
  
           RR& = 1 'is an identifier or floating point variable
   
        
        End If
        LB = LB + 1
    Loop
    r$ = Mid$(a$, mb + 1, LB - mb)
    IsLabelSYMB3 = RR&
  If LB > 0 Then a$ = Mid$(a$, LB + 1)

End Function
Function IsLabelSYMB33(a$, r$, CHARS As Long) As Boolean
Dim RR&, c$, LB As Long, mb As Long, LLB As Long
''A$ = LTrim(A$)
LLB = Len(a$)
r$ = ""
If LLB = 0 Then IsLabelSYMB33 = 0: Exit Function
mb = 0   'INDICATE LEFT SPACES
LB = 1
    Do While LB <= LLB
     c$ = Mid$(a$, LB, 1)
    If AscW(c$) < 256 Then
        Select Case c$
        Case " ", ChrW(160)
        If LB - mb > 1 Then
        LB = LB - 1
        Exit Do
        Else
        mb = LB
        End If
        Case "."
         If LB > mb Then
            RR& = 1
            Else
            IsLabelSYMB33 = 0
            Exit Function
            End If
        Case "A" To "Z", "a" To "z"
     
            RR& = 1 'is an identifier or floating point variable
        Case Else
        LB = LB - 1
        Exit Do
        End Select
                Else
  
           RR& = 1 'is an identifier or floating point variable
   
        
        End If
        LB = LB + 1
     ' If LB - mb >= CHARS Then Exit Do
    Loop
    r$ = Mid$(a$, mb + 1, LB - mb)
    IsLabelSYMB33 = RR&
   If RR& <> 0 Then
   CHARS = LB + 1
  
 End If
End Function

Function IsLabelA(where$, a$, r$) As Long
' for left side...no &

Dim RR&, one As Boolean, c$, gr As Boolean
r$ = ""
If a$ = "" Then IsLabelA = 0: Exit Function
a$ = NLtrim$(a$)
    Do While Len(a$) > 0
    c$ = Left$(a$, 1)
    If AscW(c$) < 256 Then
        Select Case c$
        Case "@"
            If Mid$(a$, 2, 1) <> "(" And r$ <> "" Then
              where$ = r$
            r$ = ""
            a$ = Mid$(a$, 2)
            Else
              IsLabelA = 0: Exit Function
            End If
        Case "?"
        If r$ = "" Then
        r$ = "?"
        a$ = Mid$(a$, 2)
        IsLabelA = 1
        Exit Function
        Else
        IsLabelA = 1
        Exit Function
        End If
        Case "."
            If one Then
            Exit Do
            Exit Do
            ElseIf r$ <> "" And Len(a$) > 1 Then
            If Mid$(a$, 2, 2) = ". " Or Mid$(a$, 2, 1) = " " Then Exit Do
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1
            Else
            IsLabelA = 0
            Exit Function
            End If
      Case "&"
            If r$ = "" Then RR& = 2:    a$ = Mid$(a$, 2)
            Exit Do
    Case "\", "{" To "~", "^"
        Exit Do
        
        Case "0" To "9", "_"
           If one Then
            Exit Do
            ElseIf r$ <> "" Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            Else
            Exit Do
            End If
        Case Is >= "A"
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        Case "$"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 3 ' is string variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "%"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 4 ' is long variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "("
            If r$ <> "" Then
                            If Mid$(a$, 2, 2) = ")@" Then
                                    r$ = r$ & "()."
                                  
                                 a$ = Mid$(a$, 4)
                               Else
                                       Select Case RR&
                                       Case 1
                                       RR& = 5 ' float array or function
                                       Case 3
                                       RR& = 6 'string array or function
                                       Case 4
                                       RR& = 7 ' long array
                                       Case Else
                                       Exit Do
                                       End Select
                                       r$ = r$ & Left$(a$, 1)
                                       a$ = Mid$(a$, 2)
                                   Exit Do
                            
                          End If
               Else
                        Exit Do
            
            End If
        Case Else
        Exit Do
        End Select
        Else
            If one Then
            Exit Do
            Else
            gr = True
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        End If

    Loop
r$ = myUcase(r$, gr)

    IsLabelA = RR&
   'a$ = LTrim(a$)

End Function

Function IsLabelDot(where$, a$, r$) As Long
' for left side...no &

Dim RR&, one As Boolean, c$, firstdot$, gr As Boolean
r$ = ""
If a$ = "" Then IsLabelDot = 0: Exit Function

a$ = NLtrim$(a$)
    Do While Len(a$) > 0
    c$ = Left$(a$, 1)
    If AscW(c$) < 256 Then
        Select Case c$
        Case "@"
            If Mid$(a$, 2, 1) <> "(" And r$ <> "" Then
              where$ = r$
            r$ = ""
            a$ = Mid$(a$, 2)
            Else
              IsLabelDot = 0: a$ = firstdot$ + a$: Exit Function
            End If
        Case "?"
        If r$ = "" And firstdot$ = "" Then
        r$ = "?"
        a$ = Mid$(a$, 2)
        IsLabelDot = 1
        Exit Function
    
        ElseIf firstdot$ = "" Then
        IsLabelDot = 1
        Exit Function
        Else
        IsLabelDot = 0
        Exit Function
        End If
        Case "."
            If one Then
            Exit Do
            Exit Do
            ElseIf r$ <> "" And Len(a$) > 1 Then
            If Mid$(a$, 2, 2) = ". " Or Mid$(a$, 2, 1) = " " Then Exit Do
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1
            Else
            firstdot$ = firstdot$ + "."
            a$ = Mid$(a$, 2)
            End If
       Case "\", "{" To "~", "^"
        Exit Do

        Case "0" To "9", "_"
           If one Then
            If firstdot$ <> "" Then a$ = firstdot$ + a$
            Exit Do
            ElseIf r$ <> "" Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            Else
            Exit Do
            End If
        Case Is >= "A"
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        Case "$"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 3 ' is string variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "%"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 4 ' is long variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "("
            If r$ <> "" Then
                            If Mid$(a$, 2, 2) = ")@" Then
                                    r$ = r$ & "()."
                                  
                                 a$ = Mid$(a$, 4)
                               Else
                                       Select Case RR&
                                       Case 1
                                       RR& = 5 ' float array or function
                                       Case 3
                                       RR& = 6 'string array or function
                                       Case 4
                                       RR& = 7 ' long array
                                       Case Else
                                       Exit Do
                                       End Select
                                       r$ = r$ & Left$(a$, 1)
                                       a$ = Mid$(a$, 2)
                                   Exit Do
                            
                          End If
               Else
                        Exit Do
            
            End If
        Case Else
        Exit Do
        End Select
        Else
            If one Then
            Exit Do
            Else
            gr = True
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        End If

    Loop
       r$ = firstdot$ + myUcase(r$, gr)
    IsLabelDot = RR&
   'a$ = LTrim(a$)

End Function
Function IsLabelDotSubOld(where$, a$, rrr$, r$, lang As Long) As Long
' for left side...no &

Dim RR&, one As Boolean, c$, firstdot$, gr As Boolean

rrr$ = ""
r$ = ""
If a$ = "" Then IsLabelDotSubOld = 0: Exit Function

a$ = NLtrim$(a$)

    Do While Len(a$) > 0
    c$ = Left$(a$, 1)
    If AscW(c$) < 256 Then
        Select Case c$
        Case "@"
            If Mid$(a$, 2, 1) <> "(" And r$ <> "" Then
              where$ = r$
            r$ = ""
            rrr$ = ""
            a$ = Mid$(a$, 2)
            Else
              IsLabelDotSubOld = 0: a$ = firstdot$ + a$: Exit Function
            End If
        Case "?"
        If r$ = "" And firstdot$ = "" Then
        rrr$ = "?"
        r$ = rrr$
        a$ = Mid$(a$, 2)
        IsLabelDotSubOld = 1
        Exit Function
    
        ElseIf firstdot$ = "" Then
        IsLabelDotSubOld = 1
        rrr$ = r$
        Exit Function
        Else
        IsLabelDotSubOld = 0
        Exit Function
        End If
        Case "."
            If one Then
            Exit Do
            Exit Do
            ElseIf r$ <> "" And Len(a$) > 1 Then
            If Mid$(a$, 2, 2) = ". " Or Mid$(a$, 2, 1) = " " Then Exit Do
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1
            Else
            firstdot$ = firstdot$ + "."
            a$ = Mid$(a$, 2)
            End If
       Case "\", "{" To "~", "^"
        Exit Do

        Case "0" To "9", "_"
           If one Then
            If firstdot$ <> "" Then a$ = firstdot$ + a$
            Exit Do
            ElseIf r$ <> "" Then
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            Else
            Exit Do
            End If
        Case Is >= "A"
            If one Then
            Exit Do
            Else
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        Case "$"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 3 ' is string variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "%"
            If one Then Exit Do
            If r$ <> "" Then
            one = True
            RR& = 4 ' is long variable
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            Else
            Exit Do
            End If
        Case "("
            If r$ <> "" Then
                            If Mid$(a$, 2, 2) = ")@" Then
                                    r$ = r$ & "()."
                                  
                                 a$ = Mid$(a$, 4)
                               Else
                                       Select Case RR&
                                       Case 1
                                       RR& = 5 ' float array or function
                                       Case 3
                                       RR& = 6 'string array or function
                                       Case 4
                                       RR& = 7 ' long array
                                       Case Else
                                       Exit Do
                                       End Select
                                       r$ = r$ & Left$(a$, 1)
                                       a$ = Mid$(a$, 2)
                                   Exit Do
                            
                          End If
               Else
                        Exit Do
            
            End If
        Case Else
        Exit Do
        End Select
        Else
            If one Then
            Exit Do
            Else
            gr = True
            r$ = r$ & Left$(a$, 1)
            a$ = Mid$(a$, 2)
            RR& = 1 'is an identifier or floating point variable
            End If
        End If

    Loop
       rrr$ = firstdot$ + myUcase(r$, gr)
       lang = 1 + CLng(gr)
    IsLabelDotSubOld = RR&
   'a$ = LTrim(a$)

End Function

Function IsStrExp(basestack As basetask, aa$, RR$) As Boolean
If Left$(aheadstatus(aa$, False), 1) <> "S" Then IsStrExp = False: Exit Function
If LastErNum = -2 Then LastErNum = 0 ': LastErNum1 = 0
Dim ac$, fault As Boolean
' uink$ = "" 'MINK$
fault = False
IsStrExp = False
'' FastSymbol aa$, "+"   '' maybe but not sure if it is ok.
Do While IsString(basestack, aa$, RR$)
fault = False
IsStrExp = True
ac$ = ac$ & RR$
If Not FastSymbol(aa$, "+") Then Exit Do
fault = True
Loop
If fault Then
If LastErNum = -2 Then
Exit Function
Else
aa$ = "+" & aa$
End If
End If
RR$ = ac$
 End Function
Function GrabFrame() As String
Dim p As New cDIBSection
p.CreateFromPicture hDCToPicture(GetDC(0), (AVI.Left + Form1.Left) / DXP, (AVI.top + Form1.top) / DYP, AVI.Width / DXP, AVI.Height / DYP)
If p.Height > 0 Then

GrabFrame = DIBtoSTR(p)
End If
End Function
Function ReadVarDouble(bstack As basetask, what$) As Double
Dim vvv As Variant
bstack.ReadVar what$, vvv
ReadVarDouble = vvv
End Function

Function ReadVarInt(bstack As basetask, what$) As Double
Dim vvv As Variant
bstack.ReadVar what$, vvv
ReadVarInt = Int(vvv)
End Function
Function ReadVarStr(bstack As basetask, what$) As String
Dim vvv As Variant
bstack.ReadVar what$, vvv
ReadVarStr = vvv
End Function
Function IsString(bstackstr As basetask, a$, r$) As Boolean
Dim nBstack As basetask
Dim p As Double, PP As Double, pppp As mArray, ms As mStiva
Dim q$, w As Long, w1&, w2 As Long, s$, par As Boolean
Dim q1$, q2$, W3 As Long, dn As Long, dd As Long, bs As basetask
Set bstackstr.LastObj = Nothing
If IsSymbol3(a$, "{") Then
     r$ = blockString(a$)
     IsString = FastSymbol(a$, "}")
     Exit Function
End If
r$ = ""
w2 = Len(a$)
w1& = IsLabelBig(bstackstr, a$, q$, par)
''''''''If NoOptimum Then If w1& > 0 Then par = False
If w1& <= 0 Or par Then
If w1& = 0 Then GoTo contstr
If w1& = -100 Then
    w1& = 0
    r$ = "deleteme"
      If bstackstr.GetDotNew(r$, 1) Then
      If r$ = "THIS.deleteme" Then
      r$ = Left$(bstackstr.UseGroupname, Len(bstackstr.UseGroupname) - 1)
       ElseIf bstackstr.UseGroupname <> "" Then
           If Len(r$) = 8 Then IsString = False: Exit Function
           r$ = Left$(r$, Len(r$) - 9)
           If InStr(r$, ".") = 0 Then
            If HERE$ <> "" Then r$ = HERE$ + "." + r$
           End If
           
       Else
       If Len(r$) = 8 Then
       Set bs = bstackstr.Parent
       Do While Not (bs Is Nothing)
        If bs.GetDotNew(r$, 1) Then
                     If Len(r$) = 8 Then
                     Set bs = bs.Parent
                     Else
                     r$ = HERE$ + "." + Left$(r$, Len(r$) - 9)
                     Set bs = Nothing
                     Exit Do
                     End If
Else
r$ = ""
Exit Do
        End If
       Loop
       Else
  r$ = HERE$ + "." + Left$(r$, Len(r$) - 9)
  End If
  End If
           IsString = True
  
        Exit Function
    ElseIf bstackstr.UseGroupname <> "" Then
        r$ = Left$(bstackstr.UseGroupname, Len(bstackstr.UseGroupname) - 1)
         IsString = True
         Exit Function

    End If
    r$ = ""
End If
w1& = Abs(w1&)
Select Case w1&
Case 2
r$ = q$
IsString = True
Exit Function
Case 3
GoTo itisavar
Case 5
GoTo rvalObjectstring
Case 6
GoTo itisarrayorfunction
Case Else
         IsString = False
        Exit Function

End Select
End If
Select Case w1&
Case 5
            ' check again
rvalObjectstring:
            If Left$(aheadstatus(q$ + Split(a$, Chr$(13))(0), False), 1) = "S" Then

            If neoGetArray(bstackstr, q$, pppp) Then
                If NeoGetArrayItem(pppp, bstackstr, q$, w, a$) Then
                        If Typename(pppp.item(w)) = "Group" Then
                        IsString = SpeedGroup(bstackstr, pppp, "VAL$", q$, a$, w) = 1
                        r$ = bstackstr.LastValue
                        Exit Function
                        End If
                End If
                End If
            Else
                     IsString = False
                    Exit Function
            
            End If
    Case 3
    IsString = False
    Select Case q$
    Case "ABOUT$", "ÐÅÑÉ$"
            r$ = feedback$
            feedback$ = ""
             IsString = True
                              Exit Function
    Case "CONTROL$"
                  On Error Resume Next
                  If Screen.ActiveForm Is Nothing Then
                  r$ = ""
                  Else
                  Select Case Screen.ActiveForm.name
                  Case "AVI"
                  r$ = "AVI"
                  Case "Form1"
                    r$ = "Main"
                  Case "Form4"
                  r$ = "Help"
                  Case Else
                  r$ = ""
                  End Select
                  End If
                      IsString = True
                              Exit Function
     Case "ÖÏÑÌÁ$"
                  On Error Resume Next
                  If Screen.ActiveForm Is Nothing Then
                  r$ = ""
                  Else
                  Select Case Screen.ActiveForm.name
                  Case "AVI"
                  r$ = "ÔÁÉÍÉÁ"
                  Case "Form1"
                    r$ = "ÊÕÑÉÏ"
                  Case "Form4"
                  r$ = "ÂÏÇÈÅÉÁ"
                  Case Else
                  r$ = ""
                  End Select
                  End If
                 IsString = True
                              Exit Function
                           
    Case "THREADS$"
                               r$ = bstackstr.Parent.ThreadsStr(1)
                               IsString = True
                              Exit Function
  Case "ÍÇÌÁÔÁ$"
                               r$ = bstackstr.Parent.ThreadsStr
                               IsString = True
                              Exit Function
    Case "LAN$", "ÄÉÊÔÕÏ$"
    r$ = getIP
      IsString = True
     Exit Function
    Case "GRABFRAME$", "ÐÁÑÅÊÁÑÅ$"
                              If AVIUP Then
                              If MediaPlayer1.MovieHeight > 0 Then
                              r$ = GrabFrame
                              End If
                              End If
                             IsString = True
                            Exit Function
    Case "ÅÍÁÏÍÏÌÁ$", "TEMPNAME$"
                             r$ = GetTempFileName
                            IsString = True
                            Exit Function
    Case "TEMPORARY$", "ÐÑÏÓÙÑÉÍÏ$"  ' ÂÑ¸ÈÇÊÅ ÄÕÏ ÖÏÑÅÓ ÔÏ ÐÑÏÓÙÑÉÍÏ$
                            r$ = strTemp  'ÁÕÔÏÓ ÅÉÍÁÉ Ï ÖÁÊÅËÏÓ
                            IsString = True
                            Exit Function
    Case "USER.NAME$", "ÏÍÏÌÁ.×ÑÇÓÔÇ$"
                             r$ = Originalusername
                            IsString = True
                            Exit Function
    Case "COMPUTER$", "ÕÐÏËÏÃÉÓÔÇÓ$"
                             r$ = strMachineName
                            IsString = True
                            Exit Function
    Case "CLIPBOARD$", "ÐÑÏ×ÅÉÑÏ$"
                            r$ = GetTextData(CF_UNICODETEXT)
                            If r$ = "" Then r$ = Clipboard.GetText
                            IsString = True
                            Exit Function
    Case "CLIPBOARD.IMAGE$", "ÐÑÏ×ÅÉÑÏ.ÅÉÊÏÍÁ$"
                        r$ = GetImage()
                         IsString = True
                         Exit Function

    Case "ÐÁÑÁÌÅÔÑÏÉ$", "PARAMETERS$"
                        r$ = para$
                        IsString = True
                        Exit Function
    Case "OS$", "ËÓ$"
                        r$ = os
                        IsString = True
                        Exit Function
    Case "ÅÍÔÏËÇ$", "COMMAND$"
                        r$ = LASTPROG$
                    IsString = True
                    Exit Function
    Case "ËÁÈÏÓ$"
                     r$ = LastErNameGR
                      LastErNum1 = 0
                        LastErNameGR = ""
                     LastErName = ""
                    IsString = True
                    Exit Function
    Case "ERROR$"
                     r$ = LastErName
                      LastErNum1 = 0
                     LastErNameGR = ""
                     LastErName = ""
                    IsString = True
                    Exit Function
    Case "MODULE$", "ÔÌÇÌÁ$"
                    r$ = HERE$ ''''''''''''' áíÜãíùóç ôïõ Here$ (ðñïóï÷Þ êßíäõíïò)
                                '''''''''''' ãéáôß ìðïñåß ç ôéìÞ íá ìçí åßíáé áõôÞ ðïõ ðåñéìÝíáìå
                                '''''''''''' íá äïêéìÜóù äéðëü íÞìá, üðïõ ôï äåýôåñï åßíáé óå ôìÞìá
                                '''''''''''' ðïõ êÜëåóå ôï ôìÞìá ôïõ ðñþôïõ íÞìáôïò.
                                '''''''''''' Åðßóçò èá õðÜñ÷åé ðñüâëçìá áí ôï ôìÞìá áëëÜæåé üíïìá
                                '''''''''''' ìå Üìåóç åíôïëÞ ÔÌÇÌÁ "ÁËËÏ ÏÍÏÌÁ"
                    IsString = True
                    Exit Function
    Case "PRINTERNAME$", "ÅÊÔÕÐÙÔÇÓ$"  ' äåí ðáßæåé ñüëï ðéá ç ðüñôá
                    r$ = pname & " (" & port & ")"
                    IsString = True
                    Exit Function
    Case "PROPERTIES$", "ÉÄÉÏÔÇÔÅÓ$"
                If ThereIsAPrinter Then
                If UBound(MyDM) = 1 Then
                    PrinterDim pw, ph, psw, psh, pwox, phoy
                End If
                r$ = ARRAYtoStr(MyDM())
                Else
                r$ = ""
                End If
                    IsString = True
                    Exit Function
    Case "MOVIE.STATUS$", "ÊÁÔÁÓÔÁÓÇ.ÔÁÉÍÉÁÓ$"
                   r$ = MediaPlayer1.getStatus
                IsString = True
                Exit Function
    Case "MOVIE.DEVICE$", "ÓÕÓÊÅÕÇ.ÐÑÏÂÏËÇÓ$"
                   r$ = MediaPlayer1.getDeviceName
                IsString = True
                Exit Function
    Case "MOVIE.ERROR$", "ËÁÈÏÓ.ÔÁÉÍÉÁÓ$"
                   r$ = MediaPlayer1.checkError
                IsString = True
                Exit Function
    Case "PLATFORM$", "ÐËÁÔÖÏÑÌÁ$"
                r$ = platform
                IsString = True
                Exit Function

    Case "FONTNAME$", "ÃÑÁÌÌÁÔÏÓÅÉÑÁ$"
    With bstackstr
                 If .tolayer > 0 Then
                 r$ = Form1.dSprite(.tolayer).Font.name
                 ElseIf .toback Then
                 r$ = Form1.Font.name
                 ElseIf .toprinter Then
                 r$ = Form1.PrinterDocument1.Font.name
                 Else
                r$ = Form1.DIS.Font.name
                End If
                End With
                 IsString = True
                 Exit Function
    Case "BROWSER$", "ÁÍÁËÏÃÉÏ$"
                r$ = Form1.view1.LocationURL
                IsString = True
                Exit Function

    Case "SPRITE$", "ÄÉÁÖÁÍÅÉÁ$"
                r$ = BACKSPRITE
                BACKSPRITE = ""
                IsString = True
                Exit Function
    Case "APPDIR$", "ÅÖÁÑÌÏÃÇ.ÊÁÔ$"
                r$ = GetLongName(App.path)
                If Right(r$, 1) <> "\" Then r$ = r$ + "\"
                IsString = True
                Exit Function
    Case "DIR$", "ÊÁÔ$"
    
                r$ = UserPath
    
                IsString = True
                Exit Function
    Case "KEY$", "ÊÏÌ$"
                ' this is because i do a pretty new functionality...form1 can minimized..without own titlebar or controls.

                    If Not Form1.Visible Then Form1.Visible = True: MyDoEvents
                  ''  If Not bstackstr.toprinter Then bstackstr.Owner.refresh
                ' so if we need a keystroke to read then we go ton non minimized status.
                r$ = UINKEY$  ' look if we have some keys here
                If r$ = "" Or r$ = Chr(0) + Chr(0) Then
                Do
               ProcTask2 bstackstr

           
                       If uintnew(timeGetTime) > k1 Then RRCOUNTER = 0
            
                If RRCOUNTER = 0 Then
                    k1 = uintnew(timeGetTime + REFRESHRATE): RRCOUNTER = 1
                 If bstackstr.Owner.Visible Then bstackstr.Owner.refresh
                  End If
                r$ = INKEY$  ' (inkey$ has autorepeat...)
                Loop Until r$ <> ""
                UINK$ = UINK$ & r$   ' so we send it there
                End If
                IsString = True
                Exit Function
    Case "INKEY$", "ÅÍÊÏÌ$"
     If Not releasemouse Then
If Not Form1.Visible Then Form1.Visible = True
 MyDoEvents2 bstackstr.Owner
Else

           If uintnew(timeGetTime) > k1 Then RRCOUNTER = 0
            
                If RRCOUNTER = 0 Then
                    k1 = uintnew(timeGetTime + REFRESHRATE): RRCOUNTER = 1
                 If bstackstr.Owner.Visible Then bstackstr.Owner.refresh
                  End If
                If Not bstackstr.IamThread Then MyDoEvents
End If
                r$ = UINKEY$

                If r$ = "" Then
           '     Sleep 10
              ''MyDoEvents
          
                    r$ = INKEY$
                     If r$ = "" Then
                     UINK$ = UINK$ & Chr(0) + Chr(0)
                     Else
                     UINK$ = UINK$ & r$
                     End If
                ElseIf r$ = Chr(0) + Chr(0) Then
                r$ = ""
                End If
                IsString = True
                Exit Function
    Case "LETTER$", "ÃÑÁÌÌÁ$"
                If bstackstr.soros.Total = 0 Then
                ElseIf bstackstr.soros.PopType = "S" Then
                r$ = bstackstr.soros.PopStr
                IsString = True
                Exit Function
                End If
    Case Else
itisavar:
                If GetVar(bstackstr, q$, w) Then
                
                r$ = var(w)
                
                IsString = True
                
                Else
                  If w = -1 Then
                      r$ = ReadVarStr(bstackstr, q$)
                      IsString = True
                      Exit Function
                End If
                     IsString = False
                     ' MAKE LENGTH EQUAL...
                     If w2 >= Len(a$) Then a$ = q$ + a$
                    
                             If FindNameForGroup(bstackstr, q$) Then
                             MyErMacro a$, "Unknown property  " & q$, "¢ãíùóôç éäéüôçôá " & q$
                             Else
                                MyErMacro a$, "Unknown variable " & q$, "¢ãíùóôç ìåôáâëçôÞ " & q$
                            
                            End If
                    End If
                
                Exit Function
    End Select
                a$ = q$ & a$
                               
    Exit Function
    
Case 6
    IsString = False
    Select Case q$
Case "FORMAT$(", "ÌÏÑÖÇ$("
    r$ = enthesi(bstackstr, a$)
    IsString = FastSymbol(a$, ")", True)
    Exit Function
Case "EVAL$(", "ÅÊÖÑ$(", "ÅÊÖÑÁÓÇ$("
If IsStrExp(bstackstr, a$, q$) Then
If FastSymbol(a$, ".") Then
If MaybeIsSymbol(a$, ")") Then
a$ = q$ + a$
Else
    a$ = q$ + "." + a$
    End If
   If Not IsStrExp(bstackstr, a$, r$) Then
      IsString = False: Exit Function
    End If
    
    Else
    r$ = q$
End If

Else
r$ = ""
End If
    IsString = FastSymbol(a$, ")", True)
    Exit Function
Case "STACKTYPE$(", "ÓÙÑÏÕÔÕÐÏÓ$("
If IsExp(bstackstr, a$, p) Then
W3 = Abs(CLng(p))
backitem1:
    If bstackstr.soros.Total < W3 Then
 
            MyErMacro a$, "Stack item not found at position " & CStr(W3), "Äåí õðÜñ÷åé óôïé÷åßï óùñïý óôç èÝóç " & CStr(W3)
  
        IsString = False: Exit Function

    ElseIf bstackstr.soros.StackItemType(W3) = "*" Then
    Set bstackstr.LastObj = bstackstr.soros.StackItem(W3)
    r$ = Typename$(bstackstr.LastObj)
    Set bstackstr.LastObj = Nothing
    IsString = FastSymbol(a$, ")", True)
    ElseIf bstackstr.soros.StackItemType(W3) = "?" Then
    r$ = "(?)"
    ElseIf bstackstr.soros.StackItemType(W3) = "S" Then
    s$ = CStr(bstackstr.soros.StackItem(W3))
    r$ = ""
    Select Case Abs(IsLabel(bstackstr, s$, q2$))
    Case 1, 3, 4
    
    If varhash.ExistKey(q2$) Then
    r$ = "ReferVar"
    ElseIf varhash.ExistKey(q2$ + "(") Then
    r$ = "ReferArray"
    End If
    
    Case 5, 6, 7
   
    End Select
    If r$ = "" Then r$ = "String"
            IsString = FastSymbol(a$, ")", True)
    ElseIf bstackstr.soros.StackItemType(W3) = "N" Then
    
    r$ = "Number"
        IsString = FastSymbol(a$, ")", True)
    Else
            MyErMacro a$, "Stack item isn't known object at position " & CStr(W3), "To óôïé÷åßï ôïõ óùñïý äåí åßíáé ãíùóôü áíôéêåßìåíï óôç èÝóç " & CStr(W3)
  
    IsString = False
    End If
    Exit Function
Else
W3 = 1
GoTo backitem1
End If

Case "STACKITEM$(", "ÔÉÌÇÓÙÑÏÕ$("
If IsExp(bstackstr, a$, p) Then
W3 = Abs(CLng(p))
backitem2:
    If bstackstr.soros.Total < W3 Then
 
            MyErMacro a$, "Stack item not found at position " & CStr(W3), "Äåí õðÜñ÷åé ôéìÞ óùñïý óôç èÝóç " & CStr(W3)
  
        IsString = False: Exit Function

    ElseIf bstackstr.soros.StackItemType(W3) = "S" Then
    r$ = bstackstr.soros.StackItem(W3)
    IsString = FastSymbol(a$, ")", True)
    Exit Function
    Else
            MyErMacro a$, "Stack item isn't string at position " & CStr(W3), "Ç ôéìÞ ôïõ óùñïý äåí åßíáé ãñÜììá óôç èÝóç " & CStr(W3)
  
    IsString = False
    End If
    Exit Function
Else
W3 = 1
GoTo backitem2
End If
Case "ÉÓ×ÍÇ$(", "WEAK$("
                r$ = Funcweak(bstackstr, a$)

                 IsString = FastSymbol(a$, ")") And r$ <> ""
             If Not IsString Then
             MyErMacro a$, "No variable found or is static", "Äåí õðÜñ÷åé ìåôáâëçôÞ Þ åßíáé óôáôéêÞ"
             End If
                Exit Function
Case "ËÏÃÏÓ$(", "SPEECH$("
           If IsExp(bstackstr, a$, p) Then
                       
                        r$ = VoiceName(p)
                       
                        End If
                        IsString = FastSymbol(a$, ")")
             
                Exit Function
Case "ASK$(", "ÑÙÔÁ$("
If IsStrExp(bstackstr, a$, AskText$) Then
If UCase(q$) = "ASK$(" Then
DialogSetupLang 1
Else
DialogSetupLang 0
End If
If AskText$ = "" Then ZeroParam a$: IsString = False: Exit Function
If FastSymbol(a$, ",") Then IsStrExp bstackstr, a$, AskTitle$
If FastSymbol(a$, ",") Then IsStrExp bstackstr, a$, AskOk$
If FastSymbol(a$, ",") Then IsStrExp bstackstr, a$, AskCancel$
If FastSymbol(a$, ",") Then IsStrExp bstackstr, a$, AskDIB$
If FastSymbol(a$, ",") Then IsStrExp bstackstr, a$, AskStrInput$: AskInput = True

olamazi

If Form3.NeoASK(bstackstr) Then
r$ = AskResponse$
Else
r$ = AskResponse$
End If
AskInput = False
    IsString = FastSymbol(a$, ")", True)
End If
Exit Function
    Case "LOCALE$(", "ÔÏÐÉÊÏ$("
         If IsExp(bstackstr, a$, p) Then

    r$ = GetlocaleString(CLng(p))
     IsString = FastSymbol(a$, ")")
       End If
       
        Exit Function
 
    Case "SHORTDIR$(", "ÌÉÊÑÏÓ.ÊÁÔÁËÏÃÏÓ$("
         If IsStrExp(bstackstr, a$, q$) Then
      

    r$ = GetDosPath(q$)
     IsString = FastSymbol(a$, ")")
       End If
       
        Exit Function
 
     Case "FILTER$(", "ÖÉËÔÑÏ$("
     If IsStrExp(bstackstr, a$, q$) Then
       If FastSymbol(a$, ",") And IsStrExp(bstackstr, a$, q1$) Then
       
     IsString = True
    r$ = CleanStr(q$, q1$)
    
       End If
    End If
    If Not FastSymbol(a$, ")") Then IsString = False
    Exit Function
        Case "ËÏÃÏÓ$(", "SPEECH$("
           If IsExp(bstackstr, a$, p) Then
                       
                        r$ = VoiceName(p)
                       
                        End If
                        IsString = FastSymbol(a$, ")")
             
                Exit Function
   
    
     Case "ÁÑ×ÅÉÏ$(", "FILE$("
     If Left$(UCase(q$), 1) = "F" Then
DialogSetupLang 1

Else
DialogSetupLang 0

End If
        If IsStrExp(bstackstr, a$, r$) Then
                       If IsSelectorInUse Then
 IsString = False
MyErMacro a$, "File/Folder Selector in Use", "Ï åðéëïãÝáò áñ÷åßùí/öáêÝëùí åßíáé óå ÷ñÞóç"
Exit Function
End If

If r$ = "" Then
r$ = LoadFileCaption
End If
If FastSymbol(a$, ",") Then
If IsStrExp(bstackstr, a$, q1$) Then
' ok
Else
 IsString = False
MissParam a$
Exit Function
End If
Else
q1$ = "GSB"
End If
                        r$ = mylcasefILE(GetFile(bstackstr, r$, mcd, q1$))
                       Else
                       
                        r$ = mylcasefILE(GetFile(bstackstr, r$, mcd, "GSB"))
                        End If
                        IsString = FastSymbol(a$, ")")
             
                Exit Function
Case "PARAM$(", "ÐÁÑÁÌ$("
q1$ = ""
If IsStrExp(bstackstr, a$, q2$) Then

Do
w1 = Len(q2$)
      If IsNumberD2(q2$, p) Then
      If q1$ = "" Then Exit Do Else q1$ = q1$ + "," + CStr(p)
      
      Else
             ISSTRINGA q2$, s$
        If q1$ = "" Then
                r$ = s$
        q1$ = ","
        Else
        q1$ = q1$ + ",{" + s$ + "}"
        End If
    End If
    FastSymbol q2$, ","
Loop Until Trim$(q2$) = "" Or w1 = Len(q2$)
End If
    IsString = FastSymbol(a$, ")", True)
    a$ = Mid$(q1$, 2) + a$
    Exit Function
Case "LAZY$(", "ÏÊÍ$("
   If MaybeIsSymbol(a$, "&") Then
            If IsStrExp(bstackstr, a$, q2$) Then
                    FastSymbol q2$, "{"
                    r$ = block$(q2$)
               
            Else
                    IsString = False
                    MyErMacro a$, "No parameters allowed here ()", "Äåí åðéôñÝðïíôáé ðáñÜìåôñïé åäþ ()"
                    Exit Function
            End If
            If Left$(r$, 10) = "'11001EDIT" Then
                s$ = GetNextLine(r$) + vbCrLf
            Else
                s$ = ""
            End If
    Else
         w = 1
         q1$ = aheadstatus(a$, , w)
         If w > 0 Then q2$ = Left$(a$, w - 1) Else q2$ = "0"
         a$ = Mid$(a$, w)
         While FastSymbol(a$, ",")
            w = 1
            q1$ = aheadstatus(a$, , w)
            If w > 0 Then q2$ = q2$ + "," + Left$(a$, w - 1) Else q2$ = q2$ + ",0"
            a$ = Mid$(a$, w)
         Wend
         r$ = "=" + q2$: q2$ = "}" + bstackstr.UseGroupname
         s$ = ""
   End If
 
If Trim$(r$ + q2$) <> "" Then
   ' r$ = "{ÔÌÇÌÁ " + Chr(34) + HERE$ & Chr(34) + vbCrLf + r$ + q2$
   If q$ = "ÏÊÍ$(" Then
   If HERE$ = "" Then
    r$ = "{" + s$ + "ÔÌÇÌÁ {}" + vbCrLf + r$ + q2$
   Else
    r$ = "{" + s$ + "ÔÌÇÌÁ " + HERE$ + vbCrLf + r$ + q2$
    End If
    Else
    If HERE$ = "" Then
    r$ = "{" + s$ + "MODULE {}" + vbCrLf + r$ + q2$
   Else
    r$ = "{" + s$ + "MODULE " + HERE$ + vbCrLf + r$ + q2$
    End If
    End If
    Else
    r$ = "{}"
    End If
     IsString = FastSymbol(a$, ")")
       
       
        Exit Function
    Case "INPUT$(", "ÅÉÓÁÃÙÃÇ$("
      IsSymbol3 a$, "#"  ' drop it
    If IsExp(bstackstr, a$, p) Then
    p = Abs(p) Mod 512
    PP = FLEN(p)
    If Uni(p) And PP = 1 Then PP = 2
    
    If FastSymbol(a$, ",") Then
    If Not IsExp(bstackstr, a$, PP) Then
    MyErMacro a$, "missing parameter for length in chars", "ëåßðåé ðñÜìåôñïò ãéá ìÞêïò óå ÷áñáêôÞñåò"
    IsString = False: Exit Function
    End If
    End If
    r$ = Space$(PP)
    On Error Resume Next
    If Uni(p) Then
    getUniString CLng(p), r$
    Else
    Get #p, , r$   ' reading aS ansi
    End If
    End If
    If Err.Number = 0 Then
    IsString = FastSymbol(a$, ")")
    End If
     Exit Function
    Case "MEMBER.TYPE$(", "ÌÅËÏÕÓ.ÔÕÐÏÓ$("
     If Abs(IsLabel(bstackstr, a$, s$)) = 1 Then
            If GetVar(bstackstr, s$, w1) Then
                If Typename(var(w1)) = "Group" Then
                If FastSymbol(a$, ",") Then
                If IsExp(bstackstr, a$, p) Then
                Set ms = var(w1).PrepareSoros(var(), "")
                If p < 1 Or p > ms.Total Then
                OutOfLimit
                Exit Function
                
                End If
                s$ = ms.StackItem(CLng(p))
                If Left$(s$, 1) = "*" Then s$ = Mid$(s$, 2)
                q1$ = Split(s$)(1)
                s$ = Split(s$)(0)
                If Right$(s$, 2) = "()" Then
                    
                    If varhash.ExistKey(Left$(s$, Len(s$) - 1)) Then
                        If Right$(s$, 3) = "$()" Then
                            r$ = "Array String"
                        ElseIf Right$(s$, 3) = "%()" Then
                            r$ = "Array Integer"
                        Else
                             r$ = "Array Double"
                            
                        End If
                    End If
                Else
                W3 = Val(q1$)
                
                    r$ = Typename(var(W3))
                        If r$ = "VarItemObject" Then
                     r$ = var(W3).Typename
                     End If
                    End If
                Else
                MissNumExpr
                Exit Function
                End If
                Else
                MissNumExpr
                Exit Function
                End If
                Else

                MissingGroup
                Exit Function
                End If
 
                IsString = FastSymbol(a$, ")", True)
                Exit Function
            Else
        
            Nosuchvariable s$
            End If
        Else
         MissingGroup
       End If
       Exit Function
    Case "MEMBER$(", "ÌÅËÏÓ$("
     If Abs(IsLabel(bstackstr, a$, s$)) = 1 Then
            If getvar2(bstackstr, s$, w1) Then   '' we need s$ if this is a "THIS"
                  If Typename(var(w1)) = "Group" Then
                If FastSymbol(a$, ",") Then
                If IsExp(bstackstr, a$, p) Then
                If HERE$ <> "" Then
                Set ms = var(w1).PrepareSoros(var(), HERE$ + "." + Left$(s$, Len(s$) - Len(var(w1).GroupName) + 1))
                Else
                Set ms = var(w1).PrepareSoros(var(), Left$(s$, Len(s$) - Len(var(w1).GroupName) + 1))
                End If
                If p < 1 Or p > ms.Total Then
                OutOfLimit
                Exit Function
                
                End If
                 s$ = ms.StackItem(CLng(p))
                If Left$(s$, 1) = "*" Then s$ = Mid$(s$, 2)
                         r$ = Split(s$)(0)
                   
                Else
                MissNumExpr
                Exit Function
                End If
                Else
                MissNumExpr
                Exit Function
                End If
                Else

                MissingGroup
                Exit Function
                End If
 
                IsString = FastSymbol(a$, ")", True)
                Exit Function
            Else
        
            Nosuchvariable s$
            End If
        Else
         MissingGroup
       End If
       Exit Function
    
    
     Case "PIPENAME$(", "ÁÕËÏÓ$("
                If IsStrExp(bstackstr, a$, r$) Then
                        r$ = validpipename(r$)
                        IsString = True
                ElseIf IsExp(bstackstr, a$, p) Then  ' ÷ñÞóç ôïõ p, áðü åäþ áñ÷ßæïõí ïé áðáíùôÝò êëÞóåéò
                                                    ' ìðïñïýí íá êëçèïýí óõíáñôÞóåéò áëëÜ ü÷é ôìÞìáôá!
                                                    '
                        r$ = validpipename("M" & Trim$(Str$(p)))
                        IsString = True
                End If
                If Not FastSymbol(a$, ")") Then IsString = False
                Exit Function
    Case "FILE.TYPE$(", "ÔÕÐÏÓ.ÁÑ×ÅÉÏÕ$("
                If IsStrExp(bstackstr, a$, r$) Then
                        r$ = ExtractType(r$)
                        IsString = True
                        If Not FastSymbol(a$, ")") Then IsString = False
                        Exit Function
                End If
                Exit Function
       Case "FILE.NAME.ONLY$(", "ÏÍÏÌÁ.ÁÑ×ÅÉÏÕ.ÌÏÍÏ$("
                If IsStrExp(bstackstr, a$, r$) Then
                        r$ = ExtractNameOnly(r$)
                        IsString = True
                        If Not FastSymbol(a$, ")") Then IsString = False
                        Exit Function
                End If
                Exit Function
       Case "FILE.NAME$(", "ÏÍÏÌÁ.ÁÑ×ÅÉÏÕ$("
                If IsStrExp(bstackstr, a$, r$) Then
                        r$ = ExtractName(r$)
                        IsString = True
                        If Not FastSymbol(a$, ")") Then IsString = False
                        Exit Function
                End If
                Exit Function
    Case "FILE.PATH$(", "ÔÏÐÏÓ.ÁÑ×ÅÉÏÕ$("
                If IsStrExp(bstackstr, a$, r$) Then
                        r$ = ExtractPath(r$)  ' äßíåé ÷ùñßò íá êïéôÜåé áí õðÜñ÷åé!
                        IsString = True
                        If Not FastSymbol(a$, ")") Then IsString = False
                        Exit Function
                End If
                Exit Function
    Case "ÏÄÇÃÏÓ$("
                If IsStrExp(bstackstr, a$, r$) Then
                        r$ = DriveType(Left$(r$, 3))  'greek response
                        IsString = True
                        If Not FastSymbol(a$, ")") Then IsString = False
                        Exit Function
                End If
                Exit Function
    Case "DRIVE$("
                If IsStrExp(bstackstr, a$, r$) Then
                        r$ = DriveTypee(Left$(r$, 3))
                        IsString = True
                        If Not FastSymbol(a$, ")") Then IsString = False
                        Exit Function
                End If
                Exit Function
    Case "ÔÉËÔÏÓ.ÁÑ×ÅÉÏÕ$(", "FILE.TITLE$("
                If IsStrExp(bstackstr, a$, r$) Then
                        If r$ <> "" Then r$ = FileNameType(r$)
                        IsString = True
                        If Not FastSymbol(a$, ")") Then IsString = False
                        Exit Function
                End If
    Case "ÅÖÁÑÌÏÃÇ.ÁÑ×ÅÉÏÕ$(", "FILE.APP$("
                If IsStrExp(bstackstr, a$, r$) Then
                        If r$ <> "" Then r$ = myRegister(r$)
                        IsString = True
                        If Not FastSymbol(a$, ")") Then IsString = False
                        Exit Function
                End If
    Case "HIDE$(", "ÊÑÕÖÏ$("
                If IsStrExp(bstackstr, a$, r$) Then
                    If FastSymbol(a$, ",") Then
                        If IsStrExp(bstackstr, a$, q$) Then
                            If FastSymbol(a$, ",") Then
                                If IsExp(bstackstr, a$, p) Then
                                    r$ = mycoder.encryptline(r$, q$, CLng(p))
                                    IsString = True
                                    If Not FastSymbol(a$, ")") Then IsString = False
                                    Exit Function
                                End If
                            End If
                        End If
                    End If
                End If
                Exit Function
    Case "LEFTPART$(", "ÁÑÉÓÔÅÑÏÌÅÑÏÓ$("
     IsString = False
    If IsStrExp(bstackstr, a$, s$) Then
    If FastSymbol(a$, ",") Then
    If IsStrExp(bstackstr, a$, q$) Then
    r$ = GetStrUntil(q$, s$)
   
    IsString = FastSymbol(a$, ")")
    ElseIf IsExp(bstackstr, a$, p) Then
    r$ = GetStrUntil(ChrW$(Abs(p) And &HFFFF&), s$)
    IsString = FastSymbol(a$, ")")
    
    End If
    End If
    End If

    Exit Function
        Case "RIGHTPART$(", "ÄÅÎÉÌÅÑÏÓ$("
     IsString = False
    If IsStrExp(bstackstr, a$, s$) Then
    If FastSymbol(a$, ",") Then
    If IsStrExp(bstackstr, a$, q$) Then
    DropLeft q$, s$
    r$ = s$
        IsString = FastSymbol(a$, ")")
    ElseIf IsExp(bstackstr, a$, p) Then
    DropLeft ChrW$(Abs(p) And &HFFFF&), s$
    r$ = s$
        IsString = FastSymbol(a$, ")")
    
    End If
    End If
    End If

    Exit Function
    Case "ARRAY$(", "ÐÉÍÁÊÁÓ$("
    
    If IsStrExp(bstackstr, a$, s$) Then
       If FastSymbol(a$, ",") Then
                            w = InStr("!" & s$, "(")
                        If w > 0 And w <= Len(s$) Then
                        s$ = Left$(s$, w - 2)
                        End If
                        If Right$("!" & s$, 1) = "$" Then
                        
                        Else
                        
                        s$ = s$ & "$"
                        End If
                     s$ = s$ + "("
                        If neoGetArray(bstackstr, s$, pppp) Then
                             IsString = NeoGetArrayItem(pppp, bstackstr, s$, w, a$)
                     
                         r$ = pppp.item(w)
                         Else
                         MyErMacro a$, "Can't find array " & s$, "Äåí âñßóêù ðßíáêá " & s$
                         End If
                             Else
            IsString = False
            End If
            Else
            IsString = False
    End If
    Exit Function
    Case "TYPE$(", "ÔÕÐÏÓ$("
    w1 = Abs(IsLabel(bstackstr, a$, s$))
    If w1 > 4 Then
    If neoGetArray(bstackstr, s$, pppp) Then
    w2 = 0
                    If Not NeoGetArrayItem(pppp, bstackstr, s$, w2, a$) Then Exit Function
                    r$ = Typename(pppp.item(w2))
                        If r$ = "VarItemObject" Then
                     r$ = pppp.item(w2).Typename
                     End If
                    IsString = FastSymbol(a$, ")")
    Else
    Nosuchvariable s$
    End If
    ElseIf w1 > 0 Then
    If GetVar(bstackstr, s$, w1) Then
                    r$ = Typename(var(w1))
                        If r$ = "VarItemObject" Then
                     r$ = var(w1).Typename
                     End If
                    IsString = FastSymbol(a$, ")")
                    
    Else
    Nosuchvariable s$
    End If
    Else
    SyntaxError
    End If
    Exit Function
    Case "PARAGRAPH$(", "ÐÁÑÁÃÑÁÖÏÓ$("
 
        w1 = Abs(IsLabel(bstackstr, a$, s$))
        If w1 = 3 Then
            If GetVar(bstackstr, s$, w1) Then
                    ' GET PARAGRAPH ORDER NUMBER
                    If Not FastSymbol(a$, ",") Then
                        MissParam a$
                        Exit Function
                    End If
                    If FastSymbol(a$, "(") Then
                    
                    W3 = Abs(IsLabel(bstackstr, a$, s$))
                    If W3 = 1 Or W3 = 4 Then
                    If Not GetVar(bstackstr, s$, W3) Then Nosuchvariable s$: Exit Function
                    If Not FastSymbol(a$, ")") Then SyntaxError: Exit Function
                    dd = 1
                    Else
                    MissingnumVar
                     Exit Function
                    End If
                    ElseIf Not IsExp(bstackstr, a$, p) Then
                      MissNumExpr
                      Exit Function
                    End If
                        If Typename(var(w1)) = doc Then
                        r$ = var(w1).TextParagraphOrder(CLng(p))
                        If FastSymbol(a$, ",") Then
                            If Not IsExp(bstackstr, a$, PP) Then MissNumExpr: Exit Function
                            If PP < 0 Then
                                If dd = 1 Then
                                        dd = var(W3)
                                        p = dd
                                             If var(w1).InvalidPara(CLng(p)) Then
                                        MissingDocRef
                                        Exit Function
                                        End If
                                         If var(w1).BackMove Then
                                        var(W3) = var(w1).BackStep(dd)
                                        Else
                                        var(W3) = var(w1).Advance(dd)
                                        End If
                                 
                                        
                                        r$ = var(w1).RemoveDocParaIndex(CLng(p))
                                Else
                                        r$ = var(w1).TextParagraphOrderRemove(CLng(p))
                                End If
                            Else
                                 If dd = 1 Then
                                    dd = var(W3)
                                            p = dd
                                      If var(w1).InvalidPara(dd) Then
                                        MissingDocRef
                                        Exit Function
                                        End If
                                            If var(w1).BackMove Then
                                            var(W3) = var(w1).BackStep(dd)
                                            Else
                                            var(W3) = var(w1).Advance(dd)
                                            End If
                                            
                                                r$ = Mid$(var(w1).TextParagraph(CLng(p)), CLng(PP))
                                    Else
                                
                                r$ = Mid$(var(w1).TextParagraphOrder(CLng(p)), CLng(PP))
                                End If
                            End If
                        Else
                                        If dd = 1 Then
                                    dd = var(W3)
                                            p = dd
                                               If var(w1).InvalidPara(dd) Then
                                        MissingDocRef
                                        Exit Function
                                        End If
                                            If var(w1).BackMove Then
                                            var(W3) = var(w1).BackStep(dd)
                                            Else
                                            var(W3) = var(w1).Advance(dd)
                                            End If
                                                r$ = var(w1).TextParagraph(CLng(p))
                                    Else
                        
                        r$ = var(w1).TextParagraphOrder(CLng(p))
                        End If
                        End If
                        Else
                            MissingDoc
                            Exit Function
                        End If
                    
                    IsString = FastSymbol(a$, ")", True)
            Else
                    
                    MissFuncParameterStringVarMacro a$
                    Exit Function
            End If
        ElseIf w1 = 6 Then
            If neoGetArray(bstackstr, s$, pppp) Then
                    If Not NeoGetArrayItem(pppp, bstackstr, s$, w2, a$) Then Exit Function
                    If Not FastSymbol(a$, ",") Then
                    MissParam a$
                    Exit Function
                    End If
                    
                    If FastSymbol(a$, "(") Then
                    
                    W3 = Abs(IsLabel(bstackstr, a$, s$))
                    If W3 = 1 Or W3 = 4 Then
                    If Not GetVar(bstackstr, s$, W3) Then Nosuchvariable s$: Exit Function
                     If Not FastSymbol(a$, ")") Then SyntaxError: Exit Function
                    dd = 1
                    Else
                    MissingnumVar
                     Exit Function
                    End If
                    ElseIf Not IsExp(bstackstr, a$, p) Then
                      MissNumExpr
                      Exit Function
                    End If
                        If Typename(pppp.item(w2)) = doc Then
                         If FastSymbol(a$, ",") Then
                            If Not IsExp(bstackstr, a$, PP) Then MissNumExpr: Exit Function
                                If PP < 0 Then
                                        If dd = 1 Then
                                                dd = var(W3)
                                                p = dd
                                                   If pppp.item(w2).InvalidPara(dd) Then
                                                    MissingDocRef
                                                    Exit Function
                                                    End If
                                                If pppp.item(w2).BackMove Then
                                                var(W3) = pppp.item(w2).BackStep(dd)
                                                Else
                                                var(W3) = pppp.item(w2).Advance(dd)
                                                End If
                                                r$ = pppp.item(w2).RemoveDocParaIndex(CLng(p))
                                        Else
                                                r$ = pppp.item(w2).TextParagraphOrderRemove(CLng(p))
                                        End If
                                Else
                                   If dd = 1 Then
                                    dd = var(W3)
                                            p = dd
                                                 If pppp.item(w2).InvalidPara(dd) Then
                                                    MissingDocRef
                                                    Exit Function
                                                    End If
                                            If pppp.item(w2).BackMove Then
                                            var(W3) = pppp.item(w2).BackStep(dd)
                                            Else
                                            var(W3) = pppp.item(w2).Advance(dd)
                                            End If
                                        r$ = Mid$(pppp.item(w2).TextParagraph(CLng(p)), CLng(PP))
                                    Else
                                r$ = Mid$(pppp.item(w2).TextParagraphOrder(CLng(p)), CLng(PP))
                                End If
                                End If
                            Else
                            If dd = 1 Then
                                    dd = var(W3)
                                            p = dd
                                                 If pppp.item(w2).InvalidPara(dd) Then
                                                    MissingDocRef
                                                    Exit Function
                                                    End If
                                            If pppp.item(w2).BackMove Then
                                            var(W3) = pppp.item(w2).BackStep(dd)
                                            Else
                                            var(W3) = pppp.item(w2).Advance(dd)
                                            End If
                                r$ = pppp.item(w2).TextParagraph(CLng(p))
                                            Else
                                r$ = pppp.item(w2).TextParagraphOrder(CLng(p))
                                End If
                            End If
                        Else
                            MissingDoc
                            Exit Function
                        End If
                    
                    IsString = FastSymbol(a$, ")", True)
            Else
                    MissParam a$
            End If
        End If
    Exit Function
Case "UNION.DATA$(", "ÅÍÙÓÇ.ÓÅÉÑÁÓ$("


  
  Do
  If IsStrExp(bstackstr, a$, s) Then
  
  ElseIf IsExp(bstackstr, a$, p) Then
  s = ChrW(p)
  Else
  s = ChrW(0)
  End If
  r$ = r$ + s
  
  Loop Until Not FastSymbol(a$, ",") Or a$ = ""

    IsString = FastSymbol(a$, ")", True)

    Exit Function
Case "MAX.DATA$(", "ÌÅÃÁËÏ.ÓÅÉÑÁÓ$("

  If IsStrExp(bstackstr, a$, r$) Then
  
  Do While FastSymbol(a$, ",")
  If Not IsStrExp(bstackstr, a$, s) Then MissStringExpr: Exit Function
  If r$ < s Then r$ = s
  
  Loop

    IsString = FastSymbol(a$, ")", True)
        Else
      MissStringExpr
        End If
    Exit Function
Case "MIN.DATA$(", "ÌÉÊÑÏ.ÓÅÉÑÁÓ$("
 IsString = False
  If IsStrExp(bstackstr, a$, r$) Then
  
  Do While FastSymbol(a$, ",")
  If Not IsStrExp(bstackstr, a$, s) Then MissStringExpr: Exit Function
  If r$ > s Then r$ = s
  
  Loop

    IsString = FastSymbol(a$, ")", True)
        Else
      MissStringExpr
        End If
    Exit Function
    Case "FUNCTION$(", "ÓÕÍÁÑÔÇÓÇ$("
    If IsStrExp(bstackstr, a$, s$) Then
        If IsSymbol(s$, "{") Then
            PushStage bstackstr, False
            GlobalSub "A$()", block(s$)
            IsSymbol3 a$, ","
              a$ = "A$(@" & a$
            IsString = IsStrExp(bstackstr, a$, r$)
            
            PopStage bstackstr
            Else
            If MaybeIsSymbol(a$, ".") Then
                dd = 1
                      q1$ = aheadstatus(a$, , dd)
                s$ = s$ + Left$(a$, dd - 1)
                a$ = Mid$(a$, dd)
            End If
                 If FastSymbol(a$, ",") Then
                End If
                
              
                    If Right$(s$, 1) = ")" Then
                        a$ = Left$(s$, Len(s$) - 1) & a$
                   ElseIf InStr(s$, ").") > 0 Then     ''''''Or A$ Like ".*"
                   FastSymbol a$, ")"
                     a$ = s$ & a$
                    Else
               If Right$("!" & s$, 1) = "$" Then
                    a$ = s$ & "(@" & a$  '' i put a @ from 102
                Else
                 a$ = s$ & "$(" & a$
                    End If
                End If
        IsString = IsStrExp(bstackstr, a$, r$)
     End If
     End If
    Exit Function
    Case "HEX$(", "ÄÅÊÁÅÎ$("
    If IsExp(bstackstr, a$, p) Then
    r$ = PACKLNG$(p)
    If FastSymbol(a$, ",") Then
    If Not IsExp(bstackstr, a$, p) Then
      MyErMacro a$, "missing parameter 1 to 4 (bytes)", "ëåßðåé ðñÜìåôñïò 1 Ýùò 4"
        IsString = False: Exit Function
    ElseIf Int(p) < 1 Or Int(p) > 4 Then
         MyErMacro a$, "parameter 1 to 4 (bytes)", "ðñÜìåôñïò 1 Ýùò 4"
        IsString = False: Exit Function
Else
    r$ = Right$(r$, p * 2)
    End If
    End If
     IsString = True
                         If Not FastSymbol(a$, ")") Then IsString = False
                        Exit Function
    End If
    Case "SHOW$(", "ÖÁÍÅÑÏ$("
    If IsStrExp(bstackstr, a$, r$) Then
        If FastSymbol(a$, ",") Then
            If IsStrExp(bstackstr, a$, q$) Then
                If FastSymbol(a$, ",") Then
                    If IsExp(bstackstr, a$, p) Then
                        r$ = mycoder.decryptline(r$, q$, CLng(p))
                        IsString = True
                         If Not FastSymbol(a$, ")") Then IsString = False
                        Exit Function
                    End If
                End If
            End If
        End If
    End If
    Exit Function
    Case "MENU$(", "ÅÐÉËÏÃÇ$(", "ÅÐÉËÏÃÅÓ$("
    If IsExp(bstackstr, a$, p) Then
    p = Abs(CLng(p))
    With Form1.List1
        If p > 0 And .listcount >= p Then
            r$ = .List(CLng(p) - 1)
            IsString = True
        End If
    End With
    End If
    If Not FastSymbol(a$, ")") Then IsString = False
    Exit Function
    Case "REPLACE$(", "ÁËËÁÃÇ$("
    
    If IsStrExp(bstackstr, a$, q$) Then
       If FastSymbol(a$, ",") And IsStrExp(bstackstr, a$, q1$) Then
            If FastSymbol(a$, ",") And IsStrExp(bstackstr, a$, q2$) Then
     IsString = True
    r$ = Replace$(q2$, q$, q1$)    'ReplaceStr(Q$, q1$, Q2$)
       End If
       End If
    End If
    If Not FastSymbol(a$, ")") Then IsString = False
    Exit Function
    Case "PATH$(", "ÔÏÐÏÓ$("
      If IsExp(bstackstr, a$, p) Then
    IsString = True
    r$ = GetSpecialfolder(CLng(p))
    AddDirSep r$
    ElseIf IsStrExp(bstackstr, a$, q$) Then
     IsString = True
     
    r$ = ExtractPath$(q$)
    End If
    If Not FastSymbol(a$, ")") Then IsString = False
    Exit Function
    Case "UCASE$(", "ÊÅÖ$("
    If IsStrExp(bstackstr, a$, q$) Then
      IsString = True
      If FastSymbol(a$, ",") And IsExp(bstackstr, a$, p) Then
            If p <> 0 Then
            r$ = kUpper(Convert3(q$, CLng(p)), p)
            Else
            r$ = kUpper(Convert3(q$, CLng(cLid)), CDbl(cLid))
            End If
      Else
     r$ = myUcase$(q$)
     
     End If
    End If
    If Not FastSymbol(a$, ")") Then IsString = False
    Exit Function
    Case "LCASE$(", "ÐÅÆ$("
     If IsStrExp(bstackstr, a$, q$) Then
   IsString = True
      If FastSymbol(a$, ",") And IsExp(bstackstr, a$, p) Then
      If p <> 0 Then
      r$ = klower(Convert3(q$, CLng(p)), p)
      Else
      r$ = klower(Convert3(q$, CLng(cLid)), CDbl(cLid))
      End If
      Else
     r$ = myLcase$(q$)
     
     End If
    
    End If
    
    
    If Not FastSymbol(a$, ")") Then IsString = False
    Exit Function
    Case "STRING$(", "ÅÐÁÍ$("
    If IsStrExp(bstackstr, a$, q$) Then
    If FastSymbol(a$, ",") And IsExp(bstackstr, a$, p) Then
    p = Int(Abs(p))
    r$ = ""
    While p > 0
    r$ = r$ & q$
    p = p - 1
    Wend
     IsString = True
    End If
    If Not FastSymbol(a$, ")") Then IsString = False
     Exit Function
    End If
       IsString = False
    Exit Function
    Case "MID$(", "ÌÅÓ$("
 
    If IsStrExp(bstackstr, a$, q$) Then
    If FastSymbol(a$, ",") And IsExp(bstackstr, a$, p) Then
    p = Abs(p)
    If p = 0 Then
    MyEr "Zero pos in mid$ not allowed", "Ìçäåíéêç èÝóç óôçí ÌÅÓ$ äåí åðéôñÝðåôáé)"
    IsString = False
    Exit Function
    Else
    r$ = Mid$(q$, p)
    IsString = True
    End If
    End If
    If FastSymbol(a$, ",") And IsExp(bstackstr, a$, p) Then
    p = Abs(p)
    r$ = Left$(r$, p)
    End If
    If Not FastSymbol(a$, ")") Then IsString = False
    End If
    IsString = True
    Exit Function
    
    Case "LEFT$(", "ÁÑÉÓ$("
 
    If IsStrExp(bstackstr, a$, q$) Then
    If FastSymbol(a$, ",") And IsExp(bstackstr, a$, p) Then
    p = Abs(p)
    r$ = Left$(q$, p)
     IsString = True
    End If
    If Not FastSymbol(a$, ")") Then IsString = False
    End If
    Exit Function
    Case "RIGHT$(", "ÄÅÎÉ$("

    If IsStrExp(bstackstr, a$, q$) Then
    If FastSymbol(a$, ",") And IsExp(bstackstr, a$, p) Then
    p = Abs(p)
    r$ = Right$(q$, p)
     IsString = True
    End If
    If Not FastSymbol(a$, ")") Then IsString = False
    End If
    Exit Function
    Case "SND$(", "Ç×Ï$("
     If IsStrExp(bstackstr, a$, q$) Then
        r$ = CFname(q$ & ".WAV")
         If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
        Exit Function
    Else
        IsString = False
    Exit Function
    End If
    Case "BMP$(", "ÅÉÊ$("
     If IsStrExp(bstackstr, a$, q$) Then
        r$ = CFname(q$ & ".BMP")
        If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
        Exit Function
    Else
        IsString = False
    Exit Function
    End If
     Case "JPG$(", "ÖÙÔÏ$("
     If IsStrExp(bstackstr, a$, q$) Then
        r$ = CFname(q$ & ".JPG")
        If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
        Exit Function
    Else
        IsString = False
    Exit Function
    End If
    Case "TRIM$(", "ÁÐÏÊ$("
    If IsStrExp(bstackstr, a$, q$) Then
        r$ = Trim$(q$)
        If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
        Exit Function
    Else

        IsString = False
    Exit Function
    End If
Case "QUOTE$(", "ÐÁÑÁÈÅÓÇ$("

r$ = ""
q1$ = ""
Do
If IsStrExp(bstackstr, a$, q$) Then
 r$ = r$ & q1$ & Chr(34) + q$ & Chr(34)
ElseIf IsExp(bstackstr, a$, p) Then
        r$ = r$ & q1$ & CStr(p)
        Else
        IsString = False: Exit Function
        End If
        If Not FastSymbol(a$, ",") Then Exit Do
        q1$ = ","
        Loop
        If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
        Exit Function
 
Case "ÓÙÑÏÓ$(", "STACK$("
r$ = ""
Do
If IsStrExp(bstackstr, a$, q$) Then
 r$ = r$ & Sput(q$)
ElseIf IsExp(bstackstr, a$, p) Then
        r$ = r$ & " " & Trim$(Str$(p))
        Else
        IsString = False: Exit Function
        End If
        If Not IsSymbol3(a$, ",") Then Exit Do
        Loop
        If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
        Exit Function
Case "ADD.LICENCE$(", "ÂÁËÅ.ÁÄÅÉÁ$("
If IsStrExp(bstackstr, a$, q$) Then
If FastSymbol(a$, ",") Then
If IsStrExp(bstackstr, a$, q1$) Then
Err.clear
On Error Resume Next
        r$ = Licenses.Add(q$, q1$)
        If Err.Number > 0 Then MissLicence: Err.clear
       If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
End If
Else
Err.clear
On Error Resume Next
        r$ = Licenses.Add(q$)
        If Err > 0 Then MissLicence: Err.clear
        
       If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True


End If
End If

        Exit Function
Case "ENVELOPE$(", "ÖÁÊÅËÏÓ$("
If IsStrExp(bstackstr, a$, q$) Then
    If FastSymbol(a$, ",") Then
            If Not IsStrExp(bstackstr, a$, q1$) Then IsString = False: Exit Function
            Else
            q1$ = ""
            End If
            If VALIDATE(q$, UCase$(q1$), q2$) Then ' Only S and N
               r$ = q2$
               Else
               r$ = ""
               End If
    Else
' STACK$(BSTACKSTR)
                If FastSymbol(a$, ",") Then
                If Not IsStrExp(bstackstr, a$, q1$) Then IsString = False: Exit Function
                Else
                q1$ = ""
                End If

                If VALIDATEmStiva(bstackstr, UCase$(q1$), q2$) Then
                   r$ = q2$
                   Else
                   r$ = ""
                   End If

    End If
         If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
        Exit Function
Case "FIELD$(", "ÐÅÄÉÏ$("
    If IsStrExp(bstackstr, a$, q$) Then
        If FastSymbol(a$, ",") Then
           If Not IsExp(bstackstr, a$, p) Then
           IsString = False
           Exit Function
           End If
           p = Abs(p)
        Else
           IsString = False
           Exit Function
        End If
        r$ = Left$(Trim$(q$), p)
        r$ = r$ & Space$(p - Len(r$))
        If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
        Exit Function
    Else

        IsString = False
    Exit Function
    End If
    
    Case "DRW$(", "Ó×Ä$("
    If IsStrExp(bstackstr, a$, q$) Then
        r$ = CFname(q$ & ".WMF")
        If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
        Exit Function
    Else

        IsString = False
    Exit Function
    End If
    Case "TIME$(", "×ÑÏÍÏÓ$("
    If IsExp(bstackstr, a$, p) Then
       r$ = Format(p, "SHORT TIME")
        If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
        Exit Function
    Else

        IsString = False
    Exit Function
    End If
    Case "DATE$(", "ÇÌÅÑÁ$("
    If IsExp(bstackstr, a$, p) Then

        r$ = Format(CDbl(CDate(p)), "SHORT DATE")
        
        If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
        IsString = True
        Exit Function
    Else

        IsString = False
    Exit Function
    End If
    Case "STR$(", "ÃÑÁÖÇ$("
    If IsExp(bstackstr, a$, p) Then
        If FastSymbol(a$, ",") Then
            If IsStrExp(bstackstr, a$, q$) Then
            r$ = Format(p, q$)
            Else
            IsString = False
            Exit Function
            End If
        Else
        r$ = Str(p)
        End If
        If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
    IsString = True
    Exit Function
    ElseIf IsStrExp(bstackstr, a$, r$) Then
        If FastSymbol(a$, ",") Then
            If IsStrExp(bstackstr, a$, q$) Then
            r$ = Format(r$, q$)
                        ElseIf IsExp(bstackstr, a$, PP) Then
                        If PP = 0 Then
                        r$ = Convert2(r$, cLid)
                        Else
            r$ = Convert2(r$, CLng(PP))
            End If
            Else
            IsString = False
            Exit Function
            End If
        Else
        r$ = StrConv(r$, vbFromUnicode)
        End If
            If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
    IsString = True
    Exit Function
    Else
    IsString = False
    Exit Function
    End If
    Case "CHRCODE$(", "×ÁÑÊÙÄ$("
    If IsExp(bstackstr, a$, p) Then
    r$ = ChrW$(cUint(p))
    If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
    IsString = True
    Exit Function
    Else
    IsString = False
    Exit Function
    End If
    Case "CHR$(", "×ÁÑ$("
    If IsExp(bstackstr, a$, p) Then
        If FastSymbol(a$, ",") Then
                If IsExp(bstackstr, a$, PP) Then
                
                     r$ = ChrW$(AscW(StrConv(ChrW$(p Mod 256), 64, CLng(PP))))
                Else
                        IsString = False: Exit Function
                End If
        Else
     ''       If bstackstr.Owner.Font.CharSet = 0 Then
               '' r$ = ChrW$(p Mod 256)
       ''     Else
                 r$ = ChrW$(AscW(StrConv(ChrW$(p Mod 256), 64, cLid)))
         ''   End If
        End If
    If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
    IsString = True
    Exit Function
    ElseIf IsStrExp(bstackstr, a$, q$) Then 'CONVERT TO ASCII
            If FastSymbol(a$, ",") Then
                If IsExp(bstackstr, a$, PP) Then
                     r$ = Convert3(q$, CLng(PP)) 'StrConv(Q$, 64, CLng(pp))
                Else
                        IsString = False: Exit Function
                End If
        Else
        r$ = StrConv(q$, vbUnicode)
        End If
    If Not FastSymbol(a$, ")") Then IsString = False: Exit Function
    IsString = True
    Exit Function
    Else
    IsString = False
    Exit Function
    End If
    Case Else
    
itisarrayorfunction:
    MakeThisSubNum bstackstr, q$
    q1$ = q$
    
    If Right$(q1$, 1) <> ")" Then q1$ = q1$ + ")"
    
            If IsSymbol(a$, "@") Then
            'is a function allways...
            If GetlocalSub(q1$, w1&) Then
                GoTo contStrFun
            ElseIf GetSub(q1$, w1&) Then
                GoTo contStrFun
            Else
                GoTo skiperrorStr
            End If
            
            Else
            If neoGetArray(bstackstr, q$, pppp, , , True) Then
                GoTo contStrArr
            ElseIf GetlocalSub(q1$, w1&) Then
                GoTo contStrFun
            ElseIf neoGetArray(bstackstr, q$, pppp) Then
                GoTo contStrArr
            ElseIf GetSub(q1$, w1&) Then
                GoTo contStrFun
            Else
                GoTo skiperrorStr
            End If
            End If
    
    
        If GetSub(q1$, w1&) Then
contStrFun:
            Set nBstack = New basetask
            nBstack.reflimit = varhash.Count
            Set nBstack.Parent = bstackstr
            Set nBstack.Owner = bstackstr.Owner
            nBstack.UseGroupname = sbf(w1&).sbgroup
            nBstack.OriginalCode = w1&
            If GoFunc(nBstack, q1$, a$, s$) Then
                Set bstackstr.LastObj = nBstack.LastObj
                r$ = s$
                IsString = True
            Else
                IsString = False
                End If
            Exit Function
        ElseIf neoGetArray(bstackstr, q$, pppp) Then
contStrArr:
            If FastSymbol(a$, ")") Then
                IsString = True
                p = 0
                Set bstackstr.LastObj = pppp
                Exit Function
            End If
            pppp.SerialItem (0), dd, 5
            dd = dd - 1
            p = 0
            PP = 0
        IsString = True
        w2 = 0
        Do While dn <= dd
        pppp.SerialItem W3, dn, 6
        If IsExp(bstackstr, a$, p) Then
        If dn < dd Then
            If Not FastSymbol(a$, ",") Then MyErMacro a$, "need index for " & q$ & ")", "÷ñåéÜæïìáé äåßêôç ãéá ôï ðßíáêá " & q$ & ")": IsString = False: Exit Do
            Else
            If FastSymbol(a$, ",") Then
            IsString = False
            MyErMacro a$, "too many indexes for array " & q$ & ")", "ðïëëïß äåßêôåò ãéá ôï ðßíáêá " & q$ & ")"
        Exit Function
        End If
            If Not FastSymbol(a$, ")") Then MissSymbol a$, ")": IsString = False: Exit Function
        End If
            On Error Resume Next
        If Not pppp.PushOffset(w2, dn, CLng(p)) Then
        
            MyErMacro a$, "index too high for array " & q$ & ")", "äåßêôçò õøçëüò ãéá ôï ðßíáêá " & q$ & ")"
            IsString = False: Exit Function
        Else
            End If
              Else
        IsString = False
        
          MyErMacro a$, "missing index for array " & q$ & ")", "÷Üèçêå äåßêôçò ãéá ôï ðßíáêá " & q$ & ")"
        Exit Function
    
        End If
        dn = dn + 1
        Loop
                r$ = pppp.item(w2)
            IsString = True
        Exit Function
            Else  '......
skiperrorStr:
         If FindNameForGroup(bstackstr, q$) Then
 MyErMacro a$, "unknown method/array  " & q$, "¢ãíùóôç ìÝèïäïò/ðßíáêáò " & q$
 Else
     MyErMacro a$, "unknown function/array " & q$, "¢ãíùóôç óõíÜñôçóç/ðßíáêáò " & q$

End If
    Exit Function
    End If
            
    End Select
Case Else
contstr:
w = 0
If q$ <> "" Then a$ = q$ & " " & a$
q$ = ""
End Select
If a$ = "" Then IsString = False: Exit Function
Select Case Asc(a$)
Case 1
q$ = Chr(1)
Case 2
'
r$ = Mid$(a$, 2, 8)
r$ = Mid$(a$, 10, UNPACKLNG(r$))
a$ = Mid$(a$, Len(r$) + 10)
IsString = True
Exit Function
Case 34
q$ = Chr(34)

End Select
If q$ = "" Or Len(a$) < 2 Then IsString = False: Exit Function

w = InStr(2, a$, q$)
If w = 0 And Len(q$) = 1 Then
MyErMacro a$, "No closed string, open with " & q$, "Áíïé÷ôü áëöáñéèìçôéêü, ìå " & q$
IsString = False: Exit Function
End If

If w = 0 Then IsString = False: Exit Function
r$ = Mid$(a$, 2, w - 2)
a$ = NLtrim$(Mid$(a$, w + 1))
IsString = True

End Function
Function ISSTRINGA(bb$, r$) As Boolean
'
Dim q$, w As Long, a$
a$ = NLtrim$(bb$)
r$ = ""
If a$ = "" Then Exit Function
Select Case Asc(a$)
Case 1
q$ = Chr(1)
Case 2
r$ = Mid$(a$, 2, 8)
r$ = Mid$(a$, 10, UNPACKLNG(r$))
bb$ = Mid$(a$, Len(r$) + 10)
ISSTRINGA = True
Exit Function
Case 34
q$ = Chr(34)
End Select
If q$ = "" Or Len(a$) < 2 Then ISSTRINGA = False: Exit Function

w = InStr(2, a$, q$, vbBinaryCompare)
If w = 0 Then ISSTRINGA = False: Exit Function
r$ = Mid$(a$, 2, w - 2)
bb$ = NLtrim$(Mid$(a$, w + 1))

ISSTRINGA = True

End Function
Function IsOperator(a$, c$) As Boolean
IsOperator = False
Dim n$
  If a$ <> "" Then
If Left$(a$, Len(c$)) = c$ Then  ' no letters in operator so no UCASE
' check next charcter
n$ = Left$(Mid$(a$, Len(c$) + 1, 1) & " ", 1)
    If Not InStr(novalidstr, n$) > 0 Then
    
    a$ = NLtrim$(Mid$(a$, Len(c$) + 1))
    IsOperator = True
    End If
End If
End If
End Function
Function codeW(a$) As Long
If a$ <> "" Then
If Asc(a$) < 128 Then codeW = 1
End If
End Function
Function placeme$(gre$, Eng$, code As Long)
If code = 1 Then placeme$ = Eng$ Else placeme$ = gre$
End Function

Function IsSymbol(a$, c$, Optional mis As Boolean = False) As Boolean
Dim b$
b$ = NLtrim$(a$)
  If b$ <> "" Then
If myUcase(Left$(b$, Len(c$))) = c$ Then
If c$ <> "{" Then
a$ = NLtrim$(Mid$(b$, Len(c$) + 1))
Else
a$ = Mid$(b$, Len(c$) + 1)
End If
IsSymbol = True

 Else
 If mis Then
 MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
 End If
IsSymbol = False
End If
Else
 If mis Then
 MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
 End If
IsSymbol = False
End If
End Function

Function IsSymbol2(a$, c$) As Boolean
Dim I As Long
If a$ = "" Then Exit Function
I = InStr(1, a$, c$)
If I = 0 Then Exit Function
If I = 1 Then
IsSymbol2 = True
Else
IsSymbol2 = Trim$(Mid$(a$, 1, I - 1)) = ""
End If
End Function

Function IsSymbol3(a$, c$, Optional mis As Boolean = False) As Boolean
' SAME AS FASTSYMB WITHOUT
Dim I As Long
If a$ = "" Then Exit Function
I = MyTrimL(a$)
If I > Len(a$) Then Exit Function
Select Case Len(c$)
Case 1
If InStr(c$, Mid$(a$, I, 1)) > 0 Then
a$ = Mid$(a$, I + 1)
IsSymbol3 = True
ElseIf mis Then
MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
End If
Case 2
If InStr(c$, Mid$(a$, I, 2)) > 0 Then
a$ = Mid$(a$, I + 2)
IsSymbol3 = True
ElseIf mis Then
MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
End If
Case 3
If InStr(c$, Mid$(a$, I, 3)) > 0 Then
a$ = Mid$(a$, I + 3)
IsSymbol3 = True
ElseIf mis Then
MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
End If
Case 4
If InStr(c$, Mid$(a$, I, 4)) > 0 Then
a$ = Mid$(a$, I + 4)
IsSymbol3 = True
ElseIf mis Then
MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
End If
Case Else
If InStr(c$, Mid$(a$, I, Len(c$))) > 0 Then
a$ = Mid$(a$, I + Len(c$))
IsSymbol3 = True
ElseIf mis Then
MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
End If
End Select

End Function
'
Function Fast2Label(a$, c$, d$, e$, ahead&, Optional ByVal Bypass As Boolean = False) As Boolean
Dim I As Long, pad$
If Bypass Or a$ = "" Then Exit Function
I = MyTrimL(a$)
If I > Len(a$) Then Exit Function
pad$ = myUcase(Mid$(a$, I, ahead&))
Select Case Len(c$)
Case 0
Exit Function
Case 1
If InStr(c$, Left$(pad$, 1)) > 0 Then
'A$ = LTrim(Mid$(A$, i + 1))
a$ = Mid$(a$, MyTrimLi(a$, I + 1))

Fast2Label = True
Exit Function
End If
Case 2
If InStr(c$, Left$(pad$, 2)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 2))
Fast2Label = True
Exit Function
End If

Case 3
If InStr(c$, Left$(pad$, 3)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 3))
Fast2Label = True
Exit Function
End If

Case 4
If InStr(c$, Left$(pad$, 4)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 4))
Fast2Label = True
Exit Function
End If

Case Else
If InStr(c$, Left$(pad$, Len(c$))) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + Len(c$)))
Fast2Label = True
Exit Function
End If
End Select
Select Case Len(d$)
Case 0
Exit Function
Case 1
If InStr(d$, Left$(pad$, 1)) > 0 Then
'A$ = LTrim(Mid$(A$, i + 1))
a$ = Mid$(a$, MyTrimLi(a$, I + 1))

Fast2Label = True
Exit Function
End If
Case 2
If InStr(d$, Left$(pad$, 2)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 2))
Fast2Label = True
Exit Function
End If

Case 3
If InStr(d$, Left$(pad$, 3)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 3))
Fast2Label = True
Exit Function
End If

Case 4
If InStr(d$, Left$(pad$, 4)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 4))
Fast2Label = True
Exit Function
End If

Case Else
If InStr(d$, Left$(pad$, Len(d$))) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + Len(d$)))
Fast2Label = True
Exit Function
End If
End Select
Select Case Len(e$)
Case 0
Exit Function
Case 1
If InStr(e$, Left$(pad$, 1)) > 0 Then
'A$ = LTrim(Mid$(A$, i + 1))
a$ = Mid$(a$, MyTrimLi(a$, I + 1))

Fast2Label = True
Exit Function
End If
Case 2
If InStr(e$, Left$(pad$, 2)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 2))
Fast2Label = True
Exit Function
End If

Case 3
If InStr(e$, Left$(pad$, 3)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 3))
Fast2Label = True
Exit Function
End If

Case 4
If InStr(e$, Left$(pad$, 4)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 4))
Fast2Label = True
Exit Function
End If

Case Else
If InStr(e$, Left$(pad$, Len(e$))) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + Len(e$)))
Fast2Label = True
Exit Function
End If
End Select
End Function
Function Fast2LabelCheck(a$, c$, d$, e$, ahead&, Optional ByVal NoSpace As Boolean = False, Optional ByVal Bypass As Boolean = False) As Boolean
' check only
Dim I As Long, pad$
If Bypass Or a$ = "" Then Exit Function
If NoSpace Then I = MyTrimL(a$) Else I = 1
If I > Len(a$) Then Exit Function
pad$ = myUcase(Mid$(a$, I, ahead&))
Select Case Len(c$)
Case 0
Exit Function
Case 1
If InStr(c$, Left$(pad$, 1)) > 0 Then

' A$ = Mid$(A$, MyTrimLi(A$, i + 1))

Fast2LabelCheck = True
Exit Function
End If
Case 2
If InStr(c$, Left$(pad$, 2)) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + 2))
Fast2LabelCheck = True
Exit Function
End If

Case 3
If InStr(c$, Left$(pad$, 3)) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + 3))
Fast2LabelCheck = True
Exit Function
End If

Case 4
If InStr(c$, Left$(pad$, 4)) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + 4))
Fast2LabelCheck = True
Exit Function
End If

Case Else
If InStr(c$, Left$(pad$, Len(c$))) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + Len(c$)))
Fast2LabelCheck = True
Exit Function
End If
End Select
Select Case Len(d$)
Case 0
Exit Function
Case 1
If InStr(d$, Left$(pad$, 1)) > 0 Then
'A$ = LTrim(Mid$(A$, i + 1))
' A$ = Mid$(A$, MyTrimLi(A$, i + 1))

Fast2LabelCheck = True
Exit Function
End If
Case 2
If InStr(d$, Left$(pad$, 2)) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + 2))
Fast2LabelCheck = True
Exit Function
End If

Case 3
If InStr(d$, Left$(pad$, 3)) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + 3))
Fast2LabelCheck = True
Exit Function
End If

Case 4
If InStr(d$, Left$(pad$, 4)) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + 4))
Fast2LabelCheck = True
Exit Function
End If

Case Else
If InStr(d$, Left$(pad$, Len(d$))) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + Len(d$)))
Fast2LabelCheck = True
Exit Function
End If
End Select
Select Case Len(e$)
Case 0
Exit Function
Case 1
If InStr(e$, Left$(pad$, 1)) > 0 Then
'A$ = LTrim(Mid$(A$, i + 1))
' A$ = Mid$(A$, MyTrimLi(A$, i + 1))

Fast2LabelCheck = True
Exit Function
End If
Case 2
If InStr(e$, Left$(pad$, 2)) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + 2))
Fast2LabelCheck = True
Exit Function
End If

Case 3
If InStr(e$, Left$(pad$, 3)) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + 3))
Fast2LabelCheck = True
Exit Function
End If

Case 4
If InStr(e$, Left$(pad$, 4)) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + 4))
Fast2LabelCheck = True
Exit Function
End If

Case Else
If InStr(e$, Left$(pad$, Len(e$))) > 0 Then
' A$ = Mid$(A$, MyTrimLi(A$, i + Len(e$)))
Fast2LabelCheck = True
Exit Function
End If
End Select
End Function

Function Fast2Symbol(a$, c$, d$, e$, Optional ByVal Bypass As Boolean = False) As Boolean
Dim I As Long
If Bypass Or a$ = "" Then Exit Function
I = MyTrimL(a$)
If I > Len(a$) Then Exit Function
Select Case Len(c$)
Case 0
Exit Function
Case 1
If InStr(c$, Mid$(a$, I, 1)) > 0 Then
'A$ = LTrim(Mid$(A$, i + 1))
a$ = Mid$(a$, MyTrimLi(a$, I + 1))

Fast2Symbol = True
Exit Function
End If
Case 2
If InStr(c$, Mid$(a$, I, 2)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 2))
Fast2Symbol = True
Exit Function
End If

Case 3
If InStr(c$, Mid$(a$, I, 3)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 3))
Fast2Symbol = True
Exit Function
End If

Case 4
If InStr(c$, Mid$(a$, I, 4)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 4))
Fast2Symbol = True
Exit Function
End If

Case Else
If InStr(c$, Mid$(a$, I, Len(c$))) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + Len(c$)))
Fast2Symbol = True
Exit Function
End If
End Select
Select Case Len(d$)
Case 0
Exit Function
Case 1
If InStr(d$, Mid$(a$, I, 1)) > 0 Then
'A$ = LTrim(Mid$(A$, i + 1))
a$ = Mid$(a$, MyTrimLi(a$, I + 1))

Fast2Symbol = True
Exit Function
End If
Case 2
If InStr(d$, Mid$(a$, I, 2)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 2))
Fast2Symbol = True
Exit Function
End If

Case 3
If InStr(d$, Mid$(a$, I, 3)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 3))
Fast2Symbol = True
Exit Function
End If

Case 4
If InStr(d$, Mid$(a$, I, 4)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 4))
Fast2Symbol = True
Exit Function
End If

Case Else
If InStr(d$, Mid$(a$, I, Len(d$))) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + Len(d$)))
Fast2Symbol = True
Exit Function
End If
End Select
Select Case Len(e$)
Case 0
Exit Function
Case 1
If InStr(e$, Mid$(a$, I, 1)) > 0 Then
'A$ = LTrim(Mid$(A$, i + 1))
a$ = Mid$(a$, MyTrimLi(a$, I + 1))

Fast2Symbol = True
Exit Function
End If
Case 2
If InStr(e$, Mid$(a$, I, 2)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 2))
Fast2Symbol = True
Exit Function
End If

Case 3
If InStr(e$, Mid$(a$, I, 3)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 3))
Fast2Symbol = True
Exit Function
End If

Case 4
If InStr(e$, Mid$(a$, I, 4)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 4))
Fast2Symbol = True
Exit Function
End If

Case Else
If InStr(e$, Mid$(a$, I, Len(e$))) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + Len(e$)))
Fast2Symbol = True
Exit Function
End If
End Select
End Function

Function FastSymbol(a$, c$, Optional mis As Boolean = False) As Boolean

Dim I As Long
If a$ = "" Then Exit Function
I = MyTrimL(a$)
If I > Len(a$) Then Exit Function
Select Case Len(c$)
Case 1
If InStr(c$, Mid$(a$, I, 1)) > 0 Then
'A$ = LTrim(Mid$(A$, i + 1))
a$ = Mid$(a$, MyTrimLi(a$, I + 1))

FastSymbol = True
ElseIf mis Then
MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
End If
Case 2
If InStr(c$, Mid$(a$, I, 2)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 2))
FastSymbol = True
ElseIf mis Then
MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
End If
Case 3
If InStr(c$, Mid$(a$, I, 3)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 3))
FastSymbol = True
ElseIf mis Then
MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
End If
Case 4
If InStr(c$, Mid$(a$, I, 4)) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + 4))
FastSymbol = True
ElseIf mis Then
MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
End If
Case Else
If InStr(c$, Mid$(a$, I, Len(c$))) > 0 Then
a$ = Mid$(a$, MyTrimLi(a$, I + Len(c$)))
FastSymbol = True
ElseIf mis Then
MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
End If
End Select
End Function

Function MaybeIsSymbol(a$, c$) As Boolean
Dim I As Long
If a$ = "" Then Exit Function
I = MyTrimL(a$)
If I > Len(a$) Then Exit Function
MaybeIsSymbol = InStr(c$, Mid$(a$, I, 1)) > 0

End Function

Function MaybeIsSymbolNoSpace(a$, c$) As Boolean
MaybeIsSymbolNoSpace = Left$(a$, 1) Like c$
End Function
Function IsLabelSymbolNew(a$, gre$, Eng$, code As Long, Optional mis As Boolean = False, Optional ByVal Bypass As Boolean = False, Optional checkonly As Boolean = False, Optional free As Boolean = True) As Boolean
' code 2  gre or eng, set new value to code 1 or 0
' 0 for gre
' 1 for eng
' return true if we have label
Dim what As Boolean, drop$
Select Case code
Case 0
IsLabelSymbolNew = IsLabelSymbol3(1032, a$, gre$, drop$, mis, Bypass, checkonly, free)
Case 1
IsLabelSymbolNew = IsLabelSymbol3(1033, a$, Eng$, drop$, mis, Bypass, checkonly, free)
Case 2
what = IsLabelSymbol3(1032, a$, gre$, drop$, mis, Bypass, checkonly, free)
If what Then
code = 0
IsLabelSymbolNew = what
Exit Function
End If
what = IsLabelSymbol3(1033, a$, Eng$, drop$, mis, Bypass, checkonly, free)
If what Then code = 1
IsLabelSymbolNew = what
End Select
End Function

Function IsLabelSymbolNewExp(a$, gre$, Eng$, code As Long, usethis$) As Boolean
' code 2  gre or eng, set new value to code 1 or 0
' 0 for gre
' 1 for eng
' return true if we have label
If Len(usethis$) = 0 Then
Dim what As Boolean
Select Case code
Case 0
IsLabelSymbolNewExp = IsLabelSymbol3(1032, a$, gre$, usethis$, False, False, False, True)
Case 1
IsLabelSymbolNewExp = IsLabelSymbol3(1033, a$, Eng$, usethis$, False, False, False, True)
Case 2
what = IsLabelSymbol3(1032, a$, gre$, usethis$, False, False, False, True)
If what Then
code = 0
IsLabelSymbolNewExp = what
Exit Function
End If
what = IsLabelSymbol3(1033, a$, Eng$, usethis$, False, False, False, True)
If what Then code = 1
IsLabelSymbolNewExp = what
End Select
Else
Select Case code
Case 0, 2
IsLabelSymbolNewExp = gre$ = usethis$
Case 1
IsLabelSymbolNewExp = Eng$ = usethis$
End Select
If IsLabelSymbolNewExp Then a$ = Mid$(a$, MyTrimL(a$) + Len(usethis$))
End If
If IsLabelSymbolNewExp Then
usethis$ = ""
End If
End Function

Function IsLabelSymbol3(ByVal code As Double, a$, c$, useth$, Optional mis As Boolean = False, Optional ByVal Bypass As Boolean = False, Optional checkonly As Boolean = False, Optional needspace As Boolean = False) As Boolean
Dim test$, what$, pass As Long
If Bypass Then Exit Function

If a$ <> "" And c$ <> "" Then
    test$ = a$
    If Right$(c$, 1) <= "9" Then
        If FastSymbol(test$, c$) Then
            If needspace Then
                If test$ = "" Then
                ElseIf Asc(test$) < 36 Then
                ElseIf InStr(":;\',", Left$(test$, 1)) > 0 Then ' : ; ,
                Else
                    Exit Function
                End If
            End If
            If Not checkonly Then a$ = test$
            IsLabelSymbol3 = True
        Else
            If mis Then MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
        End If
        Exit Function
    Else
        'this cant find B16
       ' pass = Len(c$)
       pass = 1000 ' maximum
        IsLabelSymbol3 = IsLabelSYMB33(test$, what$, pass)
   
      If Len(what$) <> Len(c$) Then
               If code = 1032 Then
                useth$ = myUcase(what$, True)
            Else
                useth$ = UCase(what$)
            End If
      IsLabelSymbol3 = False
         If mis Then GoTo theremiss
        Exit Function
      End If
    End If
    If what$ = "" Then
    
        If mis Then GoTo theremiss
        Exit Function
    End If
    If code = 1032 Then
        what$ = myUcase(what$, True)
    Else
        what$ = UCase(what$)
    End If
    If what$ = c$ Then
    
        test$ = Mid$(test$, pass)
        If needspace Then
            If test$ = "" Then
            ElseIf Asc(test$) < 36 Then
            ElseIf InStr(":;\',", Left$(test$, 1)) > 0 Then
            ' : ; ,
            Else
                IsLabelSymbol3 = False
                Exit Function
            End If
        End If
        If checkonly Then
          '  A$ = what$ & TEST$
          Else
           a$ = test$
        End If
  
       Else
             If mis Then
theremiss:
           ''  MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
                 MyEr "missing " & c$, "ëåßðåé " & c$
                 Else
                 useth$ = what$
              End If
            IsLabelSymbol3 = False
            End If

End If
End Function
Function IsLabelSymbol(a$, c$, Optional mis As Boolean = False, Optional ByVal Bypass As Boolean = False, Optional checkonly As Boolean = False) As Boolean
Dim test$, what$, pass As Long
If Bypass Then Exit Function

  If a$ <> "" And c$ <> "" Then
test$ = a$
pass = Len(c$)

IsLabelSymbol = IsLabelSYMB33(test$, what$, pass)
If Len(what$) <> Len(c$) Then IsLabelSymbol = False
If Not IsLabelSymbol Then
     If mis Then
                 MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
              End If
Exit Function
End If

        If myUcase(what$) = c$ Then
        If checkonly Then
     '   A$ = what$ & " " & TEST$
        Else
                    a$ = Mid$(test$, pass)
          End If
  
             Else
             If mis Then
                 MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
              End If
            IsLabelSymbol = False
            End If

End If
End Function
Function IsLabelSymbolLatin(a$, c$, Optional mis As Boolean = False, Optional ByVal Bypass As Boolean = False, Optional checkonly As Boolean = False) As Boolean
Dim test$, what$, pass As Long
If Bypass Then Exit Function

  If a$ <> "" And c$ <> "" Then
test$ = a$
pass = Len(c$)
IsLabelSymbolLatin = IsLabelSYMB33(test$, what$, pass)
If Len(what$) <> Len(c$) Then IsLabelSymbolLatin = False
If Not IsLabelSymbolLatin Then
             If mis Then
                 MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
              End If
            Exit Function
End If
        If UCase(what$) = c$ Then
        If checkonly Then
      '  A$ = what$ & " " & TEST$
        Else
                    a$ = Mid$(test$, pass)
          End If
  
             Else
             If mis Then
                 MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
              End If
            IsLabelSymbolLatin = False
            End If

End If
End Function
Function IsLabelSymbolOLD(a$, c$, Optional mis As Boolean = False, Optional ByVal Bypass As Boolean = False, Optional checkonly As Boolean = False) As Boolean
Dim test$, what$, pass As Long
If Bypass Then Exit Function

  If a$ <> "" And c$ <> "" Then
test$ = a$
IsLabelSymbolOLD = IsLabelSYMB(test$, what$)
        If UCase(what$) = c$ Then
        If checkonly Then
        a$ = UCase(what$) & " " & test$
        Else
                    a$ = test$
          End If
  
             Else
             If mis Then
                 MyErMacro a$, "missing " & c$, "ëåßðåé " & c$
              End If
            IsLabelSymbolOLD = False
            End If

End If
End Function

Function interpret(bstack As basetask, b$) As Boolean
Dim di As Object, myobject As Object
Set di = bstack.Owner
Dim prive As basket
'b$ = Trim$(b$)
Dim w$, ww#, LLL As Long, sss As Long, v As Long, p As Double, ss$, ohere$
Dim pppp As mArray, i1 As Long
Dim r1 As Long, r2 As Long
' uink$ = ""
di.FontTransparent = True
ohere$ = HERE$
HERE$ = ""

sss = Len(b$)
Do While Len(b$) <> LLL

If LastErNum <> 0 Then Exit Do
LLL = Len(b$)
If FastSymbol(b$, "{") Then
If Not interpret(bstack, block(b$)) Then interpret = False: HERE$ = ohere$: Exit Function
If FastSymbol(b$, "}") Then
LLL = Len(b$)
sss = LLL
Else
interpret = False: HERE$ = ohere$: Exit Function
End If
End If
If FastSymbol(b$, vbCrLf) Then
UINK$ = ""
sss = LLL
End If
If FastSymbol(b$, ":") Then
sss = LLL
UINK$ = ""
End If
If NOEXECUTION Then interpret = False: HERE$ = ohere$: Exit Function
If b$ = "" Then interpret = True: HERE$ = ohere$: Exit Function
If IsSymbol(b$, "@") Then
i1 = IsLabelA(HERE$, b$, w$)
w$ = "@" + w$
GoTo PROCESSCOMMAND   'IS A COMMAND
Else
i1 = IsLabelA(HERE$, b$, w$)
End If
  If trace And (bstack.Process Is Nothing) Then
    Form2.Label1(0) = HERE$
    Form2.Label1(1) = w$
    Form2.Label1(2) = GetStrUntil(vbCrLf, b$ & vbCrLf, False)
 TestShowSub = ""
 TestShowStart = 0
    Set Form2.Process = bstack
    stackshow bstack
    If Not Form1.Visible Then
    Form1.Show , Form5   'OK
    End If

    If STbyST Then
        STbyST = False
        If Not STEXIT Then
        If Not STq Then
        Form2.gList4.listindex = 0
        End If
        End If
        Do
        MyDoEvents1 Form1
        BLOCKkey = False
        MyDoEvents
        Loop Until STbyST Or STq Or STEXIT Or NOEXECUTION Or myexit(bstack)
            If Not STEXIT Then
        If Not STq Then
        Form2.gList4.listindex = 0
        End If
        End If
        STq = False
        If STEXIT Then
        NOEXECUTION = True
        trace = False
        STEXIT = False
        Exit Function
        End If
    End If
Sleep 5
   '' SleepWaitNO 5
    If STEXIT Then
    
    trace = False
    STEXIT = False
    Exit Function
    Else
    
    End If
End If
Select Case i1
Case 2
MyEr "No with reference in left side of assignment", "¼÷é ìå áíáöïñÜ óôçí åê÷þñçóç ôéìÞò"
interpret = False
Exit Function
Case 1

    If sss = LLL Then
    ss$ = ""
    If MaybeIsSymbol(b$, "=-+*/<~") Then
            If FastSymbol(b$, "=") Then
                If GetVar(bstack, w$, v) Then
                    If IsExp(bstack, b$, p) Then
            If Typename(var(v)) = "Group" Then             '' Group 2 Group
                        If Not bstack.LastObj Is Nothing Then
                                If Typename(bstack.LastObj) = "Group" Then
                                  Set myobject = bstack.LastObj
                                        Set bstack.LastObj = Nothing
                                    UnFloatGroupReWriteVars bstack, w$, v, myobject
      
                                Else

                                
                                  interpret = False
                                End If
                        Else  '' make an upgrade
                               interpret = False

                        End If
                        ElseIf VarType(var(v)) = vbLong Then
                                                    If Not bstack.LastObj Is Nothing Then
                                If Typename(bstack.LastObj) = "Group" Then
                                      Set myobject = bstack.LastObj
                                        Set bstack.LastObj = Nothing
                                    UnFloatGroup bstack, w$, v, myobject  ' global??
                                    Set myobject = Nothing
                             
                                Else
                                interpret = False
                                End If
                                Else
                                var(v) = CLng(p)
                                End If
                    Else
                    
                    var(v) = p
                    End If
                    Else
                    If LastErNum <> -2 Then NoValueForvariable w$
                    
                    Exit Do
                    End If
                ElseIf IsExp(bstack, b$, p) Then
                interpret = True
                 If Not bstack.LastObj Is Nothing Then
                                If Typename(bstack.LastObj) = "Group" Then
                                    
                                        
                                GlobalMoveGroup bstack, w$
                                Else
                                SyntaxError
                                End If
                Else
                    GlobalVar w$, p
                    End If
                    
                ElseIf LastErNum = 0 Then
                ' I have to place here new error no value for
                ' see lastErNum
                ' Íá âÜëù áõôü åäþ óå üëá ôá Üëëá...èõìÞóïõ ôï LastErNum
                SyntaxError
                interpret = False
                Exit Function
                Else
               Exit Do
                End If
                w$ = " "
                   interpret = True
                                
            ElseIf FastSymbol(b$, "+=") Then
                 ss$ = "+"
                 ElseIf FastSymbol(b$, "/=") Then
                 ss$ = "/"
                 ElseIf FastSymbol(b$, "-=") Then
                 ss$ = "-"
                 ElseIf FastSymbol(b$, "*=") Then
                 ss$ = "*"
                 ElseIf IsOperator(b$, "++") Then
                 ss$ = "++"
                 ElseIf IsOperator(b$, "--") Then
                 ss$ = "--"
                 ElseIf IsOperator(b$, "-!") Then
                 ss$ = "-!"
                    ElseIf IsOperator(b$, "~") Then
                    ss$ = "!!"
                 ElseIf FastSymbol(b$, "<=") Then
                 ss$ = "="
                 End If
    End If
    If ss$ <> "" Then
            If GetVar(bstack, w$, v) Then
                If Len(ss$) = 1 Then
                            If IsExp(bstack, b$, p) Then
                                    On Error Resume Next
                            If VarType(var(v)) = vbLong Then
                               Select Case ss$
                                Case "="
                                var(v) = CLng(p)
                                Case "+"
                                var(v) = CLng(p) + var(v)
                                Case "*"
                                 var(v) = CLng(p) * var(v)
                                Case "-"
                                var(v) = var(v) - CLng(p)
                                Case "/"
                                If p = 0 Then
                                   interpret = False
                                   Exit Do
                                End If
                                ' only
                                 var(v) = var(v) \ CLng(p)
                                            
                                                    
                            End Select
                                        If Err.Number = 6 Then
                                        ' õðåñ÷åßëéóç
                                                                interpret = False
                                                                Exit Function
                                                    End If
                            Else
                                    Select Case ss$
                                        Case "="
                                        var(v) = p
                                        Case "+"
                                        var(v) = p + var(v)
                                        Case "*"
                                         var(v) = p * var(v)
                                        Case "-"
                                        var(v) = var(v) - p
                                        Case "/"
                                                    If p = 0 Then
                                                            interpret = False
                                                            Exit Function
                                                    End If
                                        
                                                    var(v) = var(v) / p
                                                    
                                              
                              
                                    End Select
                                    End If
                                        
                            Else
                            If LastErNum <> -2 Then
                                      NoValueForvariable w$
                                           interpret = False
                                         Exit Function
                                    Else
                          interpret = True
                          Exit Do
                                        End If
                            End If
                Else
                If ss$ = "++" Then
                var(v) = 1 + var(v)
                ElseIf ss$ = "--" Then
                var(v) = var(v) - 1
                  ElseIf ss$ = "-!" Then
                var(v) = -var(v)
                  Else
           
                      var(v) = -1 - (var(v) <> 0)

                End If
                End If
        sss = Len(b$)
                Else
                               interpret = False
                    Exit Function
                End If
            Else
          '**********************************************************
PROCESSCOMMAND:
       
            If Trim(w$) <> "" Then
      
            Select Case w$
        Dim x1 As Long, y1 As Long
        Dim x2 As Long, y2 As Long, SBR$, nd&
            Case " ", ChrW(160)
            ' nothing
          '  SSS = Len(B$)
            Case "SLOW", "ÁÑÃÁ"
            extreme = False
            SLOW = True
            interpret = True
            HERE$ = ohere$
            Exit Function
            Case "FAST", "ÃÑÇÃÏÑÁ"
            If FastSymbol(b$, "!") Then extreme = True Else extreme = False
            SLOW = False
            interpret = True
            HERE$ = ohere$
            Exit Function
            Case "USER", "×ÑÇÓÔÇÓ"
      
               ss$ = PurifyPath(GetStrUntil("\", Trim$(GetNextLine(b$) + "\")))
               
                 If ss$ <> "" Then
                    dset
                    
                    userfiles = GetSpecialfolder(CLng(26)) & "\M2000_USER\"
                    
                    If Not isdir(userfiles) Then MkDir userfiles
                
                    
                    ss$ = AddBackslash(userfiles + ss$)
                    
                    If PathMakeDirs(ss$) Or isdir(ss$) Then
                    userfiles = ss$
                    mcd = userfiles
                    Original bstack, "CLS"
                    Else

                    PlainBaSket di, players(GetCode(di)), "Bad User Name"
                    End If
                    Else
                    ss$ = UCase(userfiles)
                    DropLeft "\M2000_USER\", ss$
                    If ss$ = "" Then
                    
                    Else
                    
                    PlainBaSket di, players(GetCode(di)), GetStrUntil("\", ss$)
                    End If
                    End If
                     interpret = True
            Exit Function
            Case "TARGET", "ÓÔÏ×ÏÓ"
           ' If di.name <> "DIS" And di.name <> "dSprite" Then interpret = False: here$ = OHERE$: Exit Function
                If Abs(IsLabel(bstack, b$, w$)) = 1 Then
                    If Not GetVar(bstack, w$, v) Then 'getvar
                     v = GlobalVar(w$, 0)
                  ''  x1 = GetVar(bstack, W$, v)
                      End If
                Else
                    interpret = False
                   HERE$ = ohere$: Exit Function
                End If
                If Not FastSymbol(b$, ",") Then
                  interpret = False
                  Exit Do
                ElseIf IsStrExp(bstack, b$, ss$) Then  ' COMMAND
                If ss$ = "" Then interpret = False: HERE$ = ohere$: Exit Function
                x1 = 1
                y1 = 1
                x2 = -1
                y2 = -1
                nd& = 0
                SBR$ = ""
                  With players(GetCode(di))
                If FastSymbol(b$, ",") Then If IsExp(bstack, b$, p) Then x1 = Abs(p) Mod (.mx + 1)
                If FastSymbol(b$, ",") Then If IsExp(bstack, b$, p) Then y1 = Abs(p) Mod (.My + 1)
                If FastSymbol(b$, ",") Then If IsExp(bstack, b$, p) Then x2 = CLng(p)
                If FastSymbol(b$, ",") Then If IsExp(bstack, b$, p) Then y2 = CLng(p)
                If FastSymbol(b$, ",") Then If IsExp(bstack, b$, p) Then nd& = Abs(p)
                If FastSymbol(b$, ",") Then If Not IsStrExp(bstack, b$, SBR$) Then interpret = False: HERE$ = ohere$: Exit Function
                Targets = False
             
             
                ReDim Preserve q(UBound(q()) + 1)
              
                q(UBound(q()) - 1) = BoxTarget(bstack, x1, y1, x2, y2, SBR$, nd&, ss$, .Xt, .Yt, .uMineLineSpace)
                End With
                var(v) = UBound(q()) - 1
                Targets = True
                ElseIf IsExp(bstack, b$, p) Then
                  q(var(v)).enable = Not (p = 0)
                  RTarget bstack, q(var(v))
                Else
                interpret = False
                HERE$ = ohere$:             Exit Function
                End If
                Case "ÄÉÁÊÏÐÔÅÓ", "SWITCHES"
                    If IsStrExp(bstack, b$, ss$) Then
                    Switches ss$
                End If
                Case "MONITOR", "ÅËÅÃ×ÏÓ"
                    If IsSupervisor Then
                    prive = players(GetCode(di))
                    wwPlain bstack, prive, "Default Code Page:" & GetACP, bstack.Owner.Width, 1000, True
                    wwPlain bstack, prive, "App Path", bstack.Owner.Width, 1000, True
                    wwPlain bstack, prive, PathFromApp("m2000"), bstack.Owner.Width, 1000, True
                    wwPlain bstack, prive, "Register gsb", bstack.Owner.Width, 1000, True
                    wwPlain bstack, prive, myRegister("gsb"), bstack.Owner.Width, 1000, True
                    wwPlain bstack, prive, "Temporary", bstack.Owner.Width, 1000, True
                    wwPlain bstack, prive, LONGNAME(strTemp), bstack.Owner.Width, 1000, True
                    wwPlain bstack, prive, "Current directory", bstack.Owner.Width, 1000, True
                    wwPlain bstack, prive, mcd, bstack.Owner.Width, 1000, True
                    wwPlain bstack, prive, "Setting for Function Recursion " + CStr(funcdeep), bstack.Owner.Width, 1000, True
                    players(GetCode(di)) = prive
                    Else
                    BadCommand
                    End If
                Case "ÓÅÍÁÑÉÏ", "SCRIPT"
                If IsLabelOnly(b$, ss$) Then
                 If GetSub(myUcase(ss$, True), nd&) Then
                           b$ = vbCrLf + sbf(nd&).sb & b$
                   Else
                   b$ = ss$ + " " + b$
                   If IsStrExp(bstack, b$, w$) Then
                           b$ = vbCrLf + w$ + b$
                   Else
                   ' skip
                   End If
                   End If
                ElseIf IsStrExp(bstack, b$, w$) Then
                           b$ = vbCrLf + w$ + b$
                   End If
        
                Case "ÔÅËÏÓ", "END"
                    If NORUN1 Then NORUN1 = False: interpret = True: b$ = "": Exit Function   ' send environment....to hell
                    ExTarget = True: INK$ = Chr(27):   UINK$ = Chr(27)     ' send escape...for any good reason...
                Case Else
                    LastErNum = 0 ' LastErNum1 = 0
                    LastErName = ""   ' every command from Query call identifier
                    LastErNameGR = ""  ' interpret is like execute without if for repeat while select structures
                    If Not Identifier(bstack, w$, b$) Then
                    If NOEXECUTION Then
                    MyEr "", ""
                    interpret = False
                    End If
                    HERE$ = ohere$: Exit Function
                    End If
                    
                End Select
                End If
            End If
        Else
        If w$ <> "" Then
        b$ = w$ & " " & b$
        If Abs(IsLabel(bstack, b$, w$)) Then
        b$ = w$ & " " & b$
         If FindNameForGroup(bstack, w$) Then
 MyEr "Unknown Property " & w$, "¢ãíùóôç éäéüôçôá " & w$
 Else
MyEr "Unknown Variable " & w$, "¢ãíùóôç ìåôáâëçôÞ " & w$
End If

        
        Else

       SyntaxError
        End If
        b$ = ""
        interpret = False
        Exit Function
        End If
    End If
Case 3

ss$ = ""
         If MaybeIsSymbol(b$, "=<") Then
            If FastSymbol(b$, "<=") Then
                ss$ = "g"  'global
            ElseIf FastSymbol(b$, "=") Then
            ss$ = "="
            ElseIf IsOperator(b$, "[") Then
            ' for documents
            ' a$[10]  for documents means the paragraph order numaner
            ' a$[10,5] then 5th char in 10 paragraph
            ' for normal string is an error
            ss$ = "" ' closed for now
            End If
        End If
       

If ss$ <> "" Then
            If ss$ = "=" Then
                If GetVar(bstack, w$, v) Then
                    If IsStrExp(bstack, b$, ss$) Then
                         CheckVar var(v), ss$
                    Else
                       NoValueForvariable w$
                    Exit Do  '???
                    End If
                ElseIf IsStrExp(bstack, b$, ss$) Then
                    GlobalVar w$, ss$
                ElseIf LastErNum = 0 Then
                                    
                    SyntaxError
                    interpret = False
                    Exit Function
                    Else
                   Exit Do  '???
                End If
          
            Else
            ' one now option
                If GetVar(bstack, w$, v) Then
                        If IsStrExp(bstack, b$, ss$) Then
                             CheckVar var(v), ss$
                        Else
                            NoValueForvariable w$
                        Exit Do
                        End If
                Else
                    Nosuchvariable w$
                End If
        End If
End If
          
Case 4
If FastSymbol(b$, "=") Then '................................
           
            If GetVar(bstack, w$, v) Then
                If IsExp(bstack, b$, p) Then
                var(v) = Int(p)
                Else
                  MissNumExpr
                Exit Do
                End If
            ElseIf IsExp(bstack, b$, p) Then
                GlobalVar w$, p
                ElseIf LastErNum = 0 Then
                                
                SyntaxError
                interpret = False
                Exit Function
                Else
               Exit Do
            End If
 Else
    If FastSymbol(b$, "+=") Then
    ss$ = "+"
    ElseIf FastSymbol(b$, "/=") Then
    ss$ = "/"
    ElseIf FastSymbol(b$, "-=") Then
    ss$ = "-"
    ElseIf FastSymbol(b$, "*=") Then
    ss$ = "*"
    ElseIf IsOperator(b$, "++") Then
    ss$ = "++"
    ElseIf IsOperator(b$, "--") Then
    ss$ = "--"
    ElseIf IsOperator(b$, "-!") Then
    ss$ = "-!"
         ElseIf IsOperator(b$, "~") Then
        ss$ = "!!"
    ElseIf FastSymbol(b$, "<=") Then
    ss$ = "="
    End If
        If ss$ = "" Then
                 MyEr "No value for variable " & w$, "×ùñßò ôéìÞ ç ìåôáâëçôÞ " & w$
                    interpret = False
                     Exit Function
    End If
    If GetVar(bstack, w$, v) Then
        If Len(ss$) = 1 Then
                    If IsExp(bstack, b$, p) Then
                            On Error Resume Next
                            Select Case ss$
                            Case "="
                            var(v) = Int(p)
                                Case "+"
                                var(v) = Int(p) + var(v)
                                Case "*"
                                 var(v) = Int(Int(p) * var(v))
                                Case "-"
                                var(v) = var(v) - Int(p)
                                Case "/"
                                If p = 0 Then
                                   interpret = False
                                 Exit Function
                                End If
                                 var(v) = var(v) \ Int(p)
                                 Case "!"
                                 var(v) = -1 - (var(v) <> 0)
                            End Select
                            If Err.Number = 6 Then
                            interpret = False
                            Exit Function
                            End If
                If VarType(var(v)) <> vbLong Then var(v) = MyRound(var(v), 13)
                    Else
                                   interpret = False
                                 Exit Function
                    End If
        Else
        If ss$ = "++" Then
        var(v) = 1 + var(v)
        ElseIf ss$ = "--" Then
        var(v) = var(v) - 1
        ElseIf ss$ = "-!" Then
        var(v) = -var(v)
        Else

                      var(v) = -1 - (var(v) <> 0)
        End If
        End If
    Else
                   interpret = False
        Exit Function
    End If
End If
Case 5

If neoGetArray(bstack, w$, pppp) Then
    If FastSymbol(b$, ")") Then
    'need to found an expression
        If FastSymbol(b$, "=") Then
            If IsExp(bstack, b$, p) Then
                If Not bstack.LastObj Is Nothing Then
                    bstack.LastObj.CopyArray pppp
                    Set bstack.LastObj = Nothing
                    GoTo loopcontinue1
                End If
            Else
                SyntaxError
            End If
            interpret = False
            Exit Function
        End If
        End If
If Not NeoGetArrayItem(pppp, bstack, w$, v, b$) Then interpret = False: HERE$ = ohere$: Exit Function
On Error Resume Next
If MaybeIsSymbol(b$, ":+-*/!") Then
With pppp
        If IsOperator(b$, "++") Then
            .item(v) = .item(v) + 1
            GoTo loopcontinue1
        ElseIf IsOperator(b$, "--") Then
            .item(v) = .item(v) - 1
            GoTo loopcontinue1
        ElseIf IsOperator(b$, "+=") Then
            If Not IsExp(bstack, b$, p) Then interpret = False: HERE$ = ohere$: Exit Function
            .item(v) = .item(v) + p
        ElseIf IsOperator(b$, "-=") Then
            If Not IsExp(bstack, b$, p) Then interpret = False: HERE$ = ohere$: Exit Function
            .item(v) = .item(v) - p
        ElseIf IsOperator(b$, "*=") Then
            If Not IsExp(bstack, b$, p) Then interpret = False: HERE$ = ohere$: Exit Function
            .item(v) = .item(v) * p
        ElseIf IsOperator(b$, "/=") Then
            If Not IsExp(bstack, b$, p) Then interpret = False: HERE$ = ohere$: Exit Function
            If p = 0 Then
             MyEr "division by zero", "äéáßñåóç ìå ôï ìçäÝí"
             Else
             .item(v) = pppp.item(v) / p
            End If
        ElseIf IsOperator(b$, "-!") Then
            .item(v) = -.item(v)
            GoTo loopcontinue1
        ElseIf IsOperator(b$, "~") Then
            .item(v) = -1 - (.item(v) <> 0)
            GoTo loopcontinue1
      ElseIf FastSymbol(b$, ":=") Then

    If IsExp(bstack, b$, p) Then
        .item(v) = p
    ElseIf IsStrExp(bstack, b$, ss$) Then
      If Not IsObject(.item(v)) Then
          .item(v) = ss$
          Else
        CheckVar .item(v), ss$
        
        End If

    Else
        Exit Do
    End If
    If FastSymbol(b$, ",") Then v = v + 1: GoTo contarr1
    GoTo loopcontinue1
        End If
.item(v) = MyRound(.item(v), 13)
GoTo loopcontinue1
End With
End If


If IsOperator(b$, ".") Then

If Typename(pppp.item(v)) = "Group" Then
interpret = SpeedGroup(bstack, pppp, "", w$, b$, v)
GoTo loopcontinue1
End If

ElseIf Not FastSymbol(b$, "=") Then
HERE$ = ohere$: Exit Function
End If

If Not IsExp(bstack, b$, p) Then HERE$ = ohere$: Exit Function
pppp.item(v) = p
Do While FastSymbol(b$, ",")
If pppp.UpperMonoLimit > v Then
v = v + 1
If Not IsExp(bstack, b$, p) Then HERE$ = ohere$: Exit Function
pppp.item(v) = p
Else
Exit Do
End If
Loop
Else
interpret = False: HERE$ = ohere$: Exit Function
End If
Case 6
If neoGetArray(bstack, w$, pppp) Then
    If FastSymbol(b$, ")") Then
    'need to found an expression
        If FastSymbol(b$, "=") Then
            If IsStrExp(bstack, b$, ss$) Then
                If Not bstack.LastObj Is Nothing Then
                    bstack.LastObj.CopyArray pppp
                    Set bstack.LastObj = Nothing
                    GoTo loopcontinue1
                End If
            Else
                SyntaxError
            End If
               interpret = False
            Exit Function
        End If
        End If
If Not NeoGetArrayItem(pppp, bstack, w$, v, b$) Then interpret = False: HERE$ = ohere$: Exit Function
On Error Resume Next
If Not FastSymbol(b$, "=") Then
    If FastSymbol(b$, ":=") Then
contarr1:
    ss$ = Left$(aheadstatus(b$), 1)
        If ss$ = "S" Then
        If Not IsStrExp(bstack, b$, ss$) Then interpret = False: HERE$ = ohere$: Exit Function
        Else
        If Not IsExp(bstack, b$, p) Then interpret = False: HERE$ = ohere$: Exit Function
        ss$ = Trim$(Str$(p))
        End If
             If Not IsObject(pppp.item(v)) Then
          pppp.item(v) = ss$
          Else
        CheckVar pppp.item(v), ss$
        
        End If
        Do While FastSymbol(b$, ",")
        If pppp.UpperMonoLimit > v Then
        v = v + 1
          ss$ = Left$(aheadstatus(b$), 1)
                        If ss$ = "S" Then
        If Not IsStrExp(bstack, b$, ss$) Then interpret = False: HERE$ = ohere$: Exit Function
        Else
        If Not IsExp(bstack, b$, p) Then interpret = False: HERE$ = ohere$: Exit Function
        ss$ = Trim$(Str$(p))
        End If
        
                If Not IsObject(pppp.item(v)) Then
                  pppp.item(v) = ss$
                  Else
                CheckVar pppp.item(v), ss$
                
                End If
        Else
        Exit Do
        End If
        Loop
   
     
        
    Else
    interpret = False: HERE$ = ohere$: Exit Function
    End If
Else
        If Not IsStrExp(bstack, b$, ss$) Then interpret = False: HERE$ = ohere$: Exit Function
        
        
        If Not IsObject(pppp.item(v)) Then
          pppp.item(v) = ss$
          Else
        CheckVar pppp.item(v), ss$
        
        End If
        Do While FastSymbol(b$, ",")
        If pppp.UpperMonoLimit > v Then
        v = v + 1
                If Not IsStrExp(bstack, b$, ss$) Then HERE$ = ohere$: Exit Function
        
                If Not IsObject(pppp.item(v)) Then
                  pppp.item(v) = ss$
                  Else
                CheckVar pppp.item(v), ss$
                
                End If
        Else
        Exit Do
        End If
        Loop
End If
Else
interpret = 0: HERE$ = ohere$: Exit Function
End If
Case 7
If neoGetArray(bstack, w$, pppp) Then
    If FastSymbol(b$, ")") Then
    'need to found an expression
        If FastSymbol(b$, "=") Then
            If IsStrExp(bstack, b$, ss$) Then
                If Not bstack.LastObj Is Nothing Then
                    bstack.LastObj.CopyArray pppp
                    Set bstack.LastObj = Nothing
                    GoTo loopcontinue1
                End If
            Else
                SyntaxError
            End If
              interpret = False
            Exit Function
        End If
        End If
If Not NeoGetArrayItem(pppp, bstack, w$, v, b$) Then interpret = False: HERE$ = ohere$: Exit Function
On Error Resume Next
If MaybeIsSymbol(b$, "+-*/!") Then
If IsOperator(b$, "++") Then
pppp.item(v) = pppp.item(v) + 1
ElseIf IsOperator(b$, "--") Then
pppp.item(v) = pppp.item(v) - 1
ElseIf IsOperator(b$, "+=") Then
If Not IsExp(bstack, b$, p) Then interpret = False: HERE$ = ohere$: Exit Function
pppp.item(v) = pppp.item(v) + Int(p)
ElseIf IsOperator(b$, "-=") Then
If Not IsExp(bstack, b$, p) Then interpret = False: HERE$ = ohere$: Exit Function
pppp.item(v) = pppp.item(v) - Int(p)
ElseIf IsOperator(b$, "*=") Then
If Not IsExp(bstack, b$, p) Then interpret = False: HERE$ = ohere$: Exit Function
pppp.item(v) = pppp.item(v) * Int(p)
ElseIf IsOperator(b$, "/=") Then
If Not IsExp(bstack, b$, p) Then interpret = False: HERE$ = ohere$: Exit Function
If p = 0 Then
 MyEr "division by zero", "äéáßñåóç ìå ôï ìçäÝí"
 Else
 pppp.item(v) = Int(pppp.item(v) / Int(p))
End If
ElseIf IsOperator(b$, "-!") Then
pppp.item(v) = -pppp.item(v)
ElseIf IsOperator(b$, "~") Then
pppp.item(v) = -1 - (pppp.item(v) <> 0)
End If
GoTo loopcontinue1
End If
If Not FastSymbol(b$, "=") Then HERE$ = ohere$: Exit Function
If Not IsExp(bstack, b$, p) Then HERE$ = ohere$: Exit Function
p = Int(p)
If Err.Number > 0 Then interpret = False: HERE$ = ohere$: Exit Function
pppp.item(v) = p
Do While FastSymbol(b$, ",")
If pppp.UpperMonoLimit > v Then
v = v + 1
If Not IsExp(bstack, b$, p) Then HERE$ = ohere$: Exit Function
pppp.item(v) = p
Else
Exit Do
End If
Loop
Else
interpret = False: HERE$ = ohere$: Exit Function
End If
Case Else
If MaybeIsSymbol(b$, ",-+*/_!@()[];<>|~`'\") Then
SyntaxError
End If
End Select
loopcontinue1:
Loop
HERE$ = ohere$
If LastErNum = -2 Then
sss = CLng(Execute(bstack, b$, True))
b$ = ""
interpret = False

Exit Function
ElseIf LastErNum <> -0 Then
b$ = " "
End If
interpret = b$ = ""
End Function
Function StaticNew(bstack As basetask, b$, w$) As Boolean
If bstack.UseGroupname <> "" Then
        MyErMacro b$, "No static variable for group module " + w$, "¼÷é óôáôéêÞ ìåôáâëçôÞ ãéá ôìÞìá ïìÜäáò"
Exit Function
End If
Dim p As Double, ii As Long, ss$
Do
    Select Case IsLabel(bstack, b$, w$)
    Case 1
        If Not bstack.ExistVar(w$) Then
            If FastSymbol(b$, "=") Then If Not IsExp(bstack, b$, p) Then SyntaxError: Exit Function
            bstack.SetVar w$, p
        ElseIf FastSymbol(b$, "=") Then
  ii = 1
            ss$ = aheadstatus(b$, False, ii)
        b$ = Mid$(b$, ii)
            
        End If
        StaticNew = True
    Case 3
            If Not bstack.ExistVar(w$) Then
            If FastSymbol(b$, "=") Then If Not IsStrExp(bstack, b$, ss$) Then SyntaxError: Exit Function
            bstack.SetVar w$, ss$
        ElseIf FastSymbol(b$, "=") Then
        ii = 1
            ss$ = aheadstatus(b$, False, ii)
        b$ = Mid$(b$, ii)
    End If
        StaticNew = True
    Case 4
        If Not bstack.ExistVar(w$) Then
            If FastSymbol(b$, "=") Then If Not IsExp(bstack, b$, p) Then SyntaxError: Exit Function
            bstack.SetVar w$, Int(p)
        ElseIf FastSymbol(b$, "=") Then
 ii = 1
            ss$ = aheadstatus(b$, False, ii)
        b$ = Mid$(b$, ii)

    End If
        StaticNew = True
        
    Case Else
        MyErMacro b$, "No static for that type " + w$, "¼÷é óôáôéêÞ ãéá áõôü ôï ôýðï " + w$
        Exit Function
    End Select
 Loop Until Not FastSymbol(b$, ",")
End Function

Sub ConnectStatic(bstack As basetask, ByVal what$)
''what$ = "%_" + what$
Dim vvv As Variant, Parent As basetask, parent1 As basetask
Set Parent = bstack.Parent
Do While Not Parent Is Nothing
If Parent.StaticInUse$ = what$ Then

   Set bstack.StaticCollection = Parent.StaticCollection
    bstack.StaticInUse$ = what$
     bstack.OriginalCode = Parent.OriginalCode
    Exit Do
End If
Set Parent = Parent.Parent
Loop
Set Parent = Nothing
End Sub
Function Execute(bstack As basetask, b$, Once As Boolean, Optional linebyline As Boolean, Optional loopthis As Boolean = False) As Long
Dim di As Object
If mybreakkey Then
                TaskMaster.Dispose
             NOEXECUTION = False
             MOUT = False
            
           b$ = "@Start : error {},{} "
           ' '{Break},{ÄéáêïðÞ}"
           Once = False
           k1 = 0
                MyDoEvents0 bstack.Owner
               MyEr "", ""
               Else
 If myexit(bstack) Then Execute = 1: Exit Function
End If
Set di = bstack.Owner
Dim myobject As Object
Dim pppp As mArray, bb$, Us$, ec$, I As Long, jump As Boolean, ohere$, slct As Long, sp As Double, sw$, ok As Boolean, IFCTRL As Long
If linebyline Then IFCTRL = bstack.IFCTRL: jump = bstack.jump
Dim w$, LLL As Long, sss As Long, v As Long, p As Double, ss$, lbl As Boolean, DUM As Boolean, st As Double, bs As basetask
Dim y As Double, sx As Double, VarStat As Boolean, NewStat As Boolean
Dim x1 As Long, y1 As Long, x2 As Long, y2 As Long, sbb$, nd&, lang As Long, kolpo As Boolean
ohere$ = HERE$   ' here$ is global but i want to include to the basetask class some day...
UINK$ = ""  ' åäþ èÝëù íá óâÞíù...ôé;
If loopthis Then Execute = 2 Else Execute = 1
If b$ = "" Then
checkrefresh:
Exit Function

End If
sss = Len(b$): lbl = True
' This is the main loop, if we consume commands then Len(B$) will be smaller.
' We have to change LLL if we put inline code
Do While Len(b$) <> LLL

        If NOEXECUTION Then
            MyEr "", ""
            k1 = 0
            REFRESHRATE = 40
            SLOW = False
            extreme = False
            If MOUT Then
                        TaskMaster.Dispose
                        NOEXECUTION = False
                        MOUT = False
                        
                        b$ = "@Start : error {},{} "
                        Once = False
                        MyDoEvents0 bstack.Owner
                        MyEr "", ""
                        LLL = 0
                Else
                        MyErMacro b$, "Escape", "ÄéáêïðÞ åêôÝëåóçò"
                        If Once Then
                                    b$ = vbCrLf + b$   ' this cause troubles...
                                    Execute = 0
                        Else
                                    Once = True
                                    Execute = 1
                        End If
                        Exit Function
                End If
        End If


If trace Or SLOW Then
If trace Then
Sleep 10
MyDoEvents0 di   ' change from simple to version 2\ change to mydoevents0
Else
MyDoEvents1 di
End If

End If
again1:
LLL = Len(b$)
If MaybeIsSymbol(b$, "=") Then
b$ = Mid$(Trim$(b$), 2)
If (InStr(bstack.OriginalName$, "(") > 1) Then   ' return from a function no error checking
x1 = 0
Do
    If IsExp(bstack, b$, p) Then
    If x1 = 0 Then If MaybeIsSymbol(b$, ",") Then x1 = 1: Set pppp = New mArray: pppp.PushDim (1): pppp.PushEnd
    If x1 = 0 Then
            If Len(bstack.OriginalName$) > 3 Then
                    If Mid$(bstack.OriginalName$, Len(bstack.OriginalName$) - 2, 1) = "$" Then
                        MissStringExpr
                        Exit Do
                    End If
                End If
             If Right$(bstack.OriginalName$, 3) = "%()" Then p = Int(p)
             Set bstack.FuncObj = bstack.LastObj
             Set bstack.LastObj = Nothing
             bstack.FuncValue = p
    Else
            pppp.SerialItem 0, x1, 9
            If bstack.LastObj Is Nothing Then
                pppp.item(x1 - 1) = p
            Else
                Set pppp.item(x1 - 1) = bstack.LastObj
                Set bstack.LastObj = Nothing
            End If
            bstack.FuncValue = p
            x1 = x1 + 1
                         
    End If
    ElseIf IsStrExp(bstack, b$, ss$) Then
        If x1 = 0 Then If MaybeIsSymbol(b$, ",") Then x1 = 1: Set pppp = New mArray: pppp.PushDim (1): pppp.PushEnd
        If x1 = 0 Then
            If Len(bstack.OriginalName$) > 3 Then
                If Mid$(bstack.OriginalName$, Len(bstack.OriginalName$) - 2, 1) <> "$" Then
                     MissNumExpr
                     Execute = False
                     Exit Function
                End If
            Else
                MissNumExpr
                Execute = 0
                Exit Function
            End If
            Set bstack.FuncObj = bstack.LastObj
            Set bstack.LastObj = Nothing
            bstack.FuncValue = ss$
        Else
            pppp.SerialItem 0, x1, 9
            If bstack.LastObj Is Nothing Then
                pppp.item(x1 - 1) = ss$
            Else
                Set pppp.item(x1 - 1) = bstack.LastObj
                Set bstack.LastObj = Nothing
            End If
            x1 = x1 + 1
            bstack.FuncValue = ss$
                        
        End If
    End If
    Loop Until Not FastSymbol(b$, ",")
    If x1 > 0 Then
     pppp.SerialItem 0, x1, 9
     Set bstack.FuncObj = pppp
     Set pppp = New mArray
     Set bstack.LastObj = Nothing
     If VarType(bstack.FuncValue) = 5 Then
     bstack.FuncValue = 0
     Else
     bstack.FuncValue = ""
     End If
    End If
    x1 = 0
End If
ElseIf MaybeIsSymbol(b$, "{") Then
b$ = Mid$(Trim$(b$), 2)
If MaybeIsSymbol(b$, "}") Then
b$ = Mid$(Trim$(b$), 2)
sss = Len(b$)
 GoTo again1
''GoTo loopcontinue
End If
If executeblock(Execute, bstack, b$, Once, kolpo) Then Exit Function

If kolpo Then ec$ = block(b$)
If Execute = 2 And b$ <> "" Then Exit Function

If Not FastSymbol(b$, "}") Then Execute = 0: Exit Function

If b$ = "" Then Exit Function
sss = LLL  'basic...


    End If
If MaybeIsSymbol(b$, "\'") Then
    NewStat = False
    VarStat = False
SetNextLine b$
 sss = Len(b$)
lbl = True
 GoTo again1
End If
jumpforCR:
If FastSymbol(b$, vbCrLf) Then
    If Trim(b$) = "" Then b$ = "": Exit Function
    NewStat = False
    VarStat = False
    sss = LLL: lbl = True: jump = False
    If IsNumberLabel(b$, w$) Then sss = Len(b$): sss = LLL: lbl = False: jump = False:  If sss = 0 Then sss = 2: b$ = vbCrLf
    UINK$ = ""
Else
    If lbl Then If IsNumberLabel(b$, w$) Then sss = Len(b$): sss = LLL: jump = False: If sss = 0 Then sss = 2: b$ = vbCrLf
End If
If VarStat Or NewStat Then If FastSymbol(b$, ",") Then sss = LLL: lbl = False: jump = False
If FastSymbol(b$, ":") Then
If linebyline Then Exit Do
NewStat = False: VarStat = False: sss = LLL: lbl = False: jump = False:  If sss = 0 Then sss = 2: b$ = vbCrLf
End If

again2:
If MaybeIsSymbol2(b$, "@") Then w$ = "": GoTo parsecommand
again3:

Select Case IsLabelDotSub(HERE$, b$, w$, ss$, lang)
Case 1234
GoTo jumpforCR
Case 2
MyEr "No with reference in left side of assignment", "¼÷é ìå áíáöïñÜ óôçí åê÷þñçóç ôéìÞò"
Execute = 0
Exit Function
Case 1

    If sss = LLL Then
If lbl And IsOperator(b$, ":") Then
If VarStat Or NewStat Then b$ = w$ + " :" + b$: sss = Len(b$): GoTo again1
sw$ = GetNextLine(b$)
If Trim$(sw$) <> "" Then
If MaybeIsSymbol(sw$, "\'") Then
LLL = Len(b$): sss = LLL: GoTo again1
Else
b$ = ": " + sw$ + vbCrLf + b$
End If
Else
LLL = Len(b$): sss = LLL: GoTo again1
End If

End If
       'If lang <> codeW(w$) Then Stop  ' lang = codeW(w$)

        '' w$ = myUcase(w$)
        If Trim(w$) = "" Then
        Execute = 1
        Exit Function
        End If
      
 ' trace here...
  If trace And (bstack.Process Is Nothing) Then
    Form2.Label1(0) = HERE$
    Form2.Label1(1) = w$
    Form2.Label1(2) = GetStrUntil(vbCrLf, b$ & vbCrLf, False)
    sbb$ = GetNextLine((sbf(bstack.OriginalCode).sb))
    If Left$(sbb$, 10) = "'11001EDIT" Then
    
    TestShowSub = Mid$(sbf(bstack.OriginalCode).sb, Len(sbb$) + 3)
    Else
    If bstack.OriginalCode <> 0 Then
     TestShowSub = sbf(bstack.OriginalCode).sb
     Else
     TestShowSub = b$
     End If
     End If
''TestShowStart = rinstr(TestShowSub, B$) - 1
    If bstack.addlen Then
        If Len(TestShowSub) - bstack.addlen > 0 Then
       TestShowStart = rinstr(Left$(TestShowSub, Len(TestShowSub) - bstack.addlen), Mid$(b$, 2)) - 1
        Else
        TestShowStart = 1
        End If
     Else
        TestShowStart = rinstr(TestShowSub, b$)
        End If
  If TestShowStart <= 0 Then
  TestShowStart = rinstr(TestShowSub, Mid$(b$, 2)) - 1
  End If
    
    Set Form2.Process = bstack
    stackshow bstack
    If Not Form1.Visible Then
    Form1.Show , Form5   'OK
    End If

    If STbyST Then
    
        STbyST = False
        If Not STEXIT Then
        If Not STq Then
        Form2.gList4.listindex = 0
        End If
        End If
        Do
        BLOCKkey = False
''        k1 = 0

        ''MyDoEvents1 Form1
    If di.Visible Then di.refresh
        ProcTask bstack
        
       ''
           Loop Until STbyST Or STq Or STEXIT Or NOEXECUTION Or myexit(bstack)
            If Not STEXIT Then
        If Not STq Then
        Form2.gList4.listindex = 0
        End If
        End If
        STq = False
        If STEXIT Then
        NOEXECUTION = True
        trace = False
        STEXIT = False
        Execute = 0
        Exit Function
        End If
    End If
Sleep 5
   '' SleepWaitNO 5
    If STEXIT Then
    
    trace = False
    STEXIT = False
    Execute = 0
    Exit Function
    Else
    
    End If
End If
If Left$(w$, 1) = "." Then
 ss$ = w$
IsLabel bstack, ss$, w$
GoTo varonly

End If

        Select Case w$

            Case "TARGET", "ÓÔÏ×ÏÓ"
            If VarStat Or NewStat Then GoTo errstat
                  If Abs(IsLabel(bstack, b$, w$)) = 1 Then
                    If Not GetVar(bstack, w$, v) Then
                     v = GlobalVar(w$, 0, , VarStat)

                               
                    End If
                Else
                    Execute = 0
                    Exit Function
                End If
                If Not FastSymbol(b$, ",") Then
                    Execute = 0
                    Exit Function
                ElseIf IsStrExp(bstack, b$, bb$) Then
                If bb$ = "" Then Execute = 0: Exit Function
                With players(GetCode(di))
               '' SetTextSZ di, Sz
               '' LCT di, yPos, xPos
                x1 = 1
                y1 = 1
                x2 = -1
                y2 = -1
                nd& = 0
                sbb$ = ""
         
                If FastSymbol(b$, ",") Then If IsExp(bstack, b$, p) Then x1 = Abs(p) Mod (.mx + 1)
                If FastSymbol(b$, ",") Then If IsExp(bstack, b$, p) Then y1 = Abs(p) Mod (.My + 1)
                If FastSymbol(b$, ",") Then If IsExp(bstack, b$, p) Then x2 = CLng(p)
                If FastSymbol(b$, ",") Then If IsExp(bstack, b$, p) Then y2 = CLng(p)
                If FastSymbol(b$, ",") Then If IsExp(bstack, b$, p) Then nd& = Abs(p)
                If FastSymbol(b$, ",") Then If Not IsStrExp(bstack, b$, sbb$) Then Execute = 0: Exit Function
                Targets = False
                MyDoEvents1 Form1
       
                ReDim Preserve q(UBound(q()) + 1)
                q(UBound(q()) - 1) = BoxTarget(bstack, x1, y1, x2, y2, sbb$, nd&, bb$, .Xt, .Yt, .uMineLineSpace)
                End With
                var(v) = UBound(q()) - 1
                Targets = True
                ElseIf IsExp(bstack, b$, p) Then
                  q(var(v)).enable = Not (p = 0)
                  RTarget bstack, q(var(v))
                Else
                  Execute = 0
                  Exit Function
                End If
          
        Case "SCAN", "ÓÁÑÙÓÅ"
If VarStat Or NewStat Then GoTo errstat
             ClearJoyAll
             PollJoypadk
             
            If Not Targets Then
            If IsExp(bstack, b$, p) Then
            End If
            Sleep 10: MyDoEvents0 di
            Else
                If di.Visible = False Then di.Visible = True
                NoAction = False
                nomore = True
                If IsExp(bstack, b$, p) Then
                y = Timer + p
                x1 = Form1.lockme
                Form1.lockme = False
                Do
                x1 = BLOCKkey
                 BLOCKkey = True
                MyDoEvents0 Form1
                BLOCKkey = x1
                If exWnd <> 0 Then
                ss$ = mytitle$(bstack)
          
                
               
                End If
                If FKey > 0 Then
                If FK$(FKey) <> "" Then
                b$ = FK$(FKey) + b$
                FKey = 0
                Exit Do
                End If
                End If
                Loop Until NoAction Or Timer > y Or myexit(bstack) Or bstack.IamThread
                Form1.lockme = x1

                Else
                Do
                MyDoEvents0 Form1

                If exWnd <> 0 Then
                ss$ = mytitle$(bstack)
                End If
                If FKey > 0 Then
                If FK$(FKey) <> "" Then
                b$ = FK$(FKey) + b$
                FKey = 0
                Exit Do
                End If
                End If
                Loop Until NoAction Or myexit(bstack)
                End If
                nomore = False
                End If
        Case "REFRESH", "ÁÍÁÍÅÙÓÇ"
        If VarStat Or NewStat Then GoTo errstat
        If IsLabelSymbolNew(b$, "ÄÏÊÉÌÇ", "TEST", lang) Then
        MyDoEvents1 di
        ElseIf IsExp(bstack, b$, p) Then
                If p = 0 Then
                k1 = uintnew(timeGetTime + REFRESHRATE)
                    Else
                    
                       REFRESHRATE = uintnew(p)
                    k1 = 0
MyDoEvents1 di

                     End If
                Else
                
    ' k1 = 0
      '          MyDoEvents1 di
     ' RRCOUNTER = 1
      If di.Visible Then di.refresh
      
                  MyDoEvents
        
            End If
       
                         If exWnd <> 0 Then
                    ss$ = mytitle$(bstack)
                End If
       
                          If FKey > 0 Then
                    If FK$(FKey) <> "" Then
                    MKEY$ = MKEY$ & FK$(FKey)
                         ''   b$ = vbcrlf + "set " + FK$(FKey) + vbCrLf + b$
                    End If
                End If
                FKey = 0
Case "ÓÔÁÔÉÊÇ", "ÓÔÁÔÉÊÅÓ", "STATIC"
 StaticNew bstack, b$, w$
Case "ÍÇÌÁ", "THREAD"
If VarStat Or NewStat Then GoTo errstat
Us$ = ""
If IsLabelSymbolNewExp(b$, "ÈÅÓÅ", "SET", lang, Us$) Then
If bstack.Process Is Nothing Then GoTo dothesame
If Not StaticNew(bstack, b$, w$) Then Execute = 0: Exit Function
ElseIf IsLabelSymbolNewExp(b$, "ÁÕÔÏ", "THIS", lang, Us$) Then
      If bstack.Process Is Nothing Then
dothesame:
                b$ = ""
                MyEr "Clause This can't used outside a thread", "Ï üñïò ÁÕÔÏ äåí ìðïñåß íá ÷ñçóéìïðïéçèåß Ýîù áðü Ýíá íÞìá"
                Execute = 0: Exit Function
                Once = False
            ElseIf IsLabelSymbolNewExp(b$, "ÓÂÇÓÅ", "ERASE", lang, Us$) Then
         Set bstack.Process.Process = Nothing

                b$ = "" ' get lost now
            ElseIf IsLabelSymbolNewExp(b$, "ÊÑÁÔÁ", "HOLD", lang, Us$) Then
                bstack.Process.busy = True
         
            ElseIf IsLabelSymbolNewExp(b$, "ÎÅÊÉÍÁ", "RESTART", lang, Us$) Then
                bstack.Process.busy = False
                b$ = ""
            ElseIf IsLabelSymbolNewExp(b$, "ÊÁÈÅ", "INTERVAL", lang, Us$) Then
                                 If IsExp(bstack, b$, p) Then
                                     If p < 2 Then p = 2
                                     
                                     bstack.Process.Interval = p
                                     Else
                                     b$ = ""
                                     MyEr "Expected number for interval, miliseconds", "Ðåñßìåíá áñéèìü ãéá ïñéóìü ôáêôéêïý äéáóôÞìáôïò åêêßíçóçò íÞìáôïò (÷ñüíï óå ÷éëéïóôÜ äåõôåñïëÝðôïõ)"
                                     Execute = 0: Exit Function
                                End If
               Else
                                    b$ = ""
                                    MyEr "can't find ERASE or HOLD or RESTART or INTERVAL clause", "Äåí ìðïñþ íá âñù üñï üðùò ôï ÓÂÇÓÅ Þ ôï ÊÑÁÔÁ Þ ôï ÎÅÊÉÍÁ Þ ôï ÊÁÈÅ"
                                    Execute = 0: Exit Function
            End If
            
   
            Else
                       If linebyline Then
          b$ = w$ + " " + b$
        Execute = Execute(bstack, b$, Once, False)
         Exit Do
        End If
            ok = False
 If Not I2(bstack, w$, b$, ok, lang) Then Execute = 0: Exit Function
      ''     If Not Identifier(bstack, w$, B$) Then Execute = 0: Exit Function
            If Left$(HERE$ & "#", 1) = "!" Then HERE$ = Mid$(HERE$, 2): ohere$ = HERE$
            End If
        Case "LOOP", "ÊÕÊËÉÊÁ"
        
        If Once = True Then Execute = 0: Exit Function
        If VarStat Or NewStat Then GoTo errstat
            loopthis = True
            Execute = 2
       Case "BREAK", "ÄÉÅÊÏØÅ"
       If VarStat Or NewStat Then GoTo errstat
                  b$ = "BREAK"
           Once = True
        Execute = 2
        Exit Function
       Case "CONTINUE", "ÓÕÍÅ×ÉÓÅ"
        If VarStat Or NewStat Then GoTo errstat
           If Execute <> 2 Then
              b$ = "CONTINUE"
           Once = True
           Execute = 3
         
           Else
           b$ = ""
           
        End If
          Exit Function
       Case "RESTART", "ÎÅÊÉÍÁ"
       If VarStat Or NewStat Then GoTo errstat
         b$ = ""
        Execute = 2
       
       Exit Function
       Case "RETURN", "ÅÐÉÓÔÑÏÖÇ"
       If IsStrExp(bstack, b$, ss$) Then
            append_table bstack, ss$, b$, True, lang
        Else
                Once = False
                b$ = Chr$(0)
                Execute = 2
                
                Exit Function
    End If
       Case "END", "ÔÅËÏÓ"
               If VarStat Or NewStat Then GoTo errstat
               If IsLabelSymbolNew(b$, "ÑÏÕÔÉÍÁÓ", "SUB", lang) Then
                Once = False
                b$ = Chr$(0)
                Execute = 2
                Exit Function
                Else
                b$ = ""   ' no more syntax error
                Execute = 1
                Exit Function
                End If
        Case "ÅÎÏÄÏÓ", "EXIT"
         ''\\"SUB", "ÑÏÕÔÉÍÁ"
        If VarStat Or NewStat Then GoTo errstat
        Us$ = ""
        If IsLabelSymbolNewExp(b$, "ÑÏÕÔÉÍÁÓ", "SUB", lang, Us$) Then
                Once = False
                b$ = Chr$(0)
                Execute = 2
                Exit Function
        ElseIf IsLabelSymbolNewExp(b$, "ÃÉÁ", "FOR", lang, Us$) Then
         Once = False
                b$ = "NEXT"
        Execute = 2
                Exit Function
        ElseIf IsLabelSymbolNewExp(b$, "ÅÊÔÕÐÙÓÇÓ", "PRINTING", lang, Us$) Then
        If bstack.toprinter Then
                    pnum = 0
                    oprinter.ClearUp
                    Form1.PrinterDocument1.Picture = LoadPicture("")
                    Set bstack.Owner = Form1.DIS
                    bstack.toprinter = False
                    SetNormal bstack.Owner
        
        End If
                    b$ = ""
           Once = True
             Else
 If Execute <> 2 Then Execute = 1 Else Execute = 3
            b$ = ""
           Once = True
           Exit Function
           End If
           
           
        Case "FOR", "ÃÉÁ"
        If VarStat Or NewStat Then GoTo errstat
                  If linebyline Then
                  If Asc(b$) <> 32 Then
                
          b$ = w$ + " " + b$
          Else
          b$ = w$ + b$
          End If
        Execute = Execute(bstack, b$, Once, False)
         Exit Do
        End If
        
               If Once = True Then Execute = 0: Exit Function
               If IsStrExp(bstack, b$, w$) Then
               b$ = w$ + " " + b$
               End If
        x1 = Abs(IsLabelBig(bstack, b$, w$, , sbb$))
nd& = x1
        Select Case x1
        Case 1, 4 'FLOATING POINT
        
        If MaybeIsSymbol(b$, "<=") Then
         If FastSymbol(b$, "=") Then
        If bstack.ExistVar(w$) Then
            x2 = -1
            x1 = nd&
            If IsExp(bstack, b$, p) Then
            
                If nd& = 4 Then p = Int(p) Else p = MyRound(p, 13)
                bstack.SetVar w$, p
                GoTo eos
            Else
            Execute = 0
            Exit Function
            End If
            Else
            x1 = Abs(GetlocalVar(w$, x2)) * x1
        End If
         ElseIf FastSymbol(b$, "<=") Then
  x1 = Abs(GetVar(bstack, w$, x2, True)) * x1
         End If
         If x1 Then
            If VarType(var(x2)) = vbLong Then
            x1 = 8
             If IsExp(bstack, b$, p) Then
             On Error Resume Next
              If x2 < 0 Then
                bstack.SetVar w$, CLng(p)
            Else
               var(x2) = CLng(p)
            End If
          
             If Err.Number = 6 Then
                 Execute = 0
        MyEr "OverFlow Long", "Yðåñ÷åßëéóç ìáêñý"
        Exit Function
             End If
             End If
            Else
             If IsExp(bstack, b$, p) Then
             If x1 = 1 Then var(x2) = MyRound(p, 13) Else var(x2) = Int(p)
             End If
             End If
            ElseIf IsExp(bstack, b$, p) Then
            If nd& > 1 Then p = Int(p)
              x2 = GlobalVar(w$, p, , VarStat)
                x1 = nd&
        Else
        
        Execute = 0
        Exit Function
        End If
eos:
        If IsLabelSymbolNew(b$, "ÅÙÓ", "TO", lang) Then
        If IsExp(bstack, b$, sp) Then
       sp = MyRound(sp, 13)
        p = MyRound(p, 13)
            If x1 > 1 Then sp = Int(sp)
                st = Sgn(sp - p)
                
        If IsLabelSymbolNew(b$, "ÁÍÁ", "STEP", lang) Then
        If IsExp(bstack, b$, st) Then
         If x1 > 1 Then st = Int(st)
         If Sgn(sp - p) = 0 Or st = 0 Then
        
         Else
         st = Abs(st)
         If sp < p Then

         If Fix(st) = st Then
         sp = sp - 1 + st / 2
         Else
              sx = Abs(((sp - p) / st))
               If sx = MyRound(sx) Then
                 sp = sp - MyRound(st / 2)
               ElseIf st < 1 Then
         sp = sp - 1 / EXP(18 - (Log(st + Abs(sp - p))) / Log(10))
         Else

         sp = p - Fix(sx) * st - st / 2
         End If
     
         End If
       Else
         If Fix(st) = st Then
         Else
         sx = Abs(((sp - p) / st))
         If sx = MyRound(sx) Then
         
         sp = sp + MyRound(st / 2)
         ElseIf st < 1 Then
         sp = sp + 1 / EXP(18 - (Log(st + Abs(sp - p))) / Log(10))
         Else
         sp = p + Fix(sx) * st + st / 2
         End If
         End If
        End If
         st = Sgn(sp - p) * st
         
         End If
     
        
     
        Else
        Execute = 0
        Exit Function
        End If
        End If
        If st = 0 Then sp = p
        If Not FastSymbol(b$, "{") Then
        '' this is the old like Basic For
        sw$ = b$
        ss$ = b$
          sx = p
    y1 = True
      bstack.RetStack.PushVal 0  ' RETURN LENGTH FROM END OF B$
      bstack.RetStack.PushStr w$   ' for check if is the right variable
  nd& = bstack.addlen
   slct = nd&
      GoTo contfor:
        Else
        y1 = False
        ss$ = block(b$) + "}"
        sw$ = ss$
        TraceStore bstack, nd&, b$, 1, slct  ' reusing slct variable
      
        If FastSymbol(b$, "}") Then
contfor:
        Execute = 1
        ok = False
        v = Len(b$)
        y2 = 0
If x1 = 1 Then
        Do
            TraceRestore bstack, slct
            If executeblock(Execute, bstack, ss$, Once, ok) Then
                    TraceRestore bstack, nd&
                    If Execute <> 1 Then
                        
                            b$ = ss$ + b$: Exit Function
                    End If
            Else
                    TraceRestore bstack, nd&
                    If Execute = 2 And ss$ <> "" And Not ok Then
                            If y1 And ss$ = "NEXT" Then
                                    If sx = p Then
                                            If lang Then ss$ = "NEXT " + sbb$ Else ss$ = "ÅÐ¼ÌÅÍÏ " + sbb$
                                            If search2KIND(b$, ss$, x1, True) Then
                                                          b$ = Mid$(b$, x1 + Len(w$))
                                                          bstack.RetStack.drop 2
                                                          sp = 0
                                                          y1 = 0
                                                          v = -1
                                                        ''  Set pppp = Nothing'     '''why
                                                          GoTo again1
                                             ElseIf Not lang Then ss$ = "ÅÐÏÌÅÍÏ " + sbb$
                                                    If search2KIND(b$, ss$, x1, True) Then
                                                          b$ = Mid$(b$, x1 + Len(w$))
                                                          bstack.RetStack.drop 2
                                                          sp = 0
                                                          y1 = 0
                                                          v = -1
                                                        ''  Set pppp = Nothing'     '''why
                                                          GoTo again1
                                                    Else
                                                            Execute = 0
                                                            MyEr "Can't find " + w$, "Äåí ìðïñþ íá âñù ôo " + w$
                                                            Exit Function
                                                    End If
                                            End If
                                    End If
                                    Execute = 1: Exit Do
                            End If
                            b$ = ss$
                            Exit Function
                    End If
            End If
        
        If Not (ok Or MOUT) Or Execute = 3 Then
        Execute = 1
        ss$ = sw$
        p = p + st
        Else
        Exit Do
        End If
        If myexit(bstack) Then Execute = 1: Exit Do
        If x2 < 0 Then
        bstack.SetVar w$, MyRound(p, 10)
        Else
        var(x2) = MyRound(p, 10)
        End If
        If st > 0 Then
        If p > sp Then Exit Do
        ElseIf st < 0 Then
        If p < sp Then Exit Do
        Else
        Exit Do
        End If
        Loop
ElseIf x1 > 4 Then
On Error GoTo LONGERR
y2 = p
x1 = sp
sss = st
sp = sss
Do
            TraceRestore bstack, slct
            If executeblock(Execute, bstack, ss$, Once, ok) Then
            TraceRestore bstack, nd&
            If Execute <> 1 Then
            
            b$ = ss$ + b$: Exit Function
            End If
            Else
            TraceRestore bstack, nd&
            If Execute = 2 And ss$ <> "" And Not ok Then
            If y1 And ss$ = "NEXT" Then
            If sx = p Then
            If lang Then ss$ = "NEXT " + sbb$ Else ss$ = "ÅÐÏÌÅÍÏ " + sbb$
            If search2KIND(b$, ss$, x1, True) Then
            b$ = Mid$(b$, x1 + Len(w$))
            bstack.RetStack.drop 2
            sss = sp
            sp = 0
            y1 = 0
            v = -1
            '' Set pppp = Nothing
            GoTo again1
            ElseIf Not lang Then ss$ = "ÅÐ¼ÌÅÍÏ " + sbb$
            If search2KIND(b$, ss$, x1, True) Then
            b$ = Mid$(b$, x1 + Len(w$))
            bstack.RetStack.drop 2
            sss = sp
            sp = 0
            y1 = 0
            v = -1
            '' Set pppp = Nothing
            GoTo again1
            Else
            Execute = 0
            MyEr "Can't find " + w$, "Äåí ìðïñþ íá âñù ôo " + w$
            Exit Function
            End If
            End If
            End If
            Execute = 1: Exit Do
            
            End If
            b$ = ss$
            
            Exit Function
            End If
            End If
            
            If Not (ok Or MOUT) Or Execute = 3 Then
            Execute = 1
            ss$ = sw$
            y2 = y2 + sss
        
            Else
            Exit Do
            End If
            If myexit(bstack) Then Execute = 1: Exit Do
            On Error Resume Next
            var(x2) = y2
         If st > 0 Then
            If y2 > x1 Then Exit Do
            ElseIf st < 0 Then
            If y2 < x1 Then Exit Do
            Else
            Exit Do
            End If
            Loop
On Error Resume Next
sss = sp
Else
Do
            TraceRestore bstack, slct
            If executeblock(Execute, bstack, ss$, Once, ok) Then
            TraceRestore bstack, nd&
            If Execute <> 1 Then
            
            b$ = ss$ + b$: Exit Function
            End If
            Else
            TraceRestore bstack, nd&
            If Execute = 2 And ss$ <> "" And Not ok Then
            If y1 And ss$ = "NEXT" Then
            If sx = p Then
            If lang Then ss$ = "NEXT " + sbb$ Else ss$ = "ÅÐÏÌÅÍÏ " + sbb$
            If search2KIND(b$, ss$, x1, True) Then
            b$ = Mid$(b$, x1 + Len(w$))
            bstack.RetStack.drop 2
            sp = 0
            y1 = 0
            v = -1
            '' Set pppp = Nothing
            GoTo again1
            ElseIf Not lang Then ss$ = "ÅÐ¼ÌÅÍÏ " + sbb$
                        If search2KIND(b$, ss$, x1, True) Then
            b$ = Mid$(b$, x1 + Len(w$))
            bstack.RetStack.drop 2
            sp = 0
            y1 = 0
            v = -1
            '' Set pppp = Nothing
            GoTo again1
            Else
            Execute = 0
            MyEr "Can't find " + w$, "Äåí ìðïñþ íá âñù ôo " + w$
            Exit Function
            End If
            End If
            End If
            Execute = 1: Exit Do
            
            End If
            b$ = ss$
            
            Exit Function
            End If
            End If
            
            If Not (ok Or MOUT) Or Execute = 3 Then
            Execute = 1
            ss$ = sw$
            p = p + st
            Else
            Exit Do
            End If
            If myexit(bstack) Then Execute = 1: Exit Do
            If x2 < 0 Then
             bstack.SetVar w$, p
            Else
            var(x2) = p
            End If
            If st > 0 Then
            If p > sp Then Exit Do
            ElseIf st < 0 Then
            If p < sp Then Exit Do
            Else
            Exit Do
            End If
            Loop
End If
        
        If Execute = 1 And y1 Then
        bstack.RetStack.drop 1
        b$ = Right$(b$, bstack.RetStack.PopVal)
        ' now NEXT is responsible to get rid the stack (else stack is flushing with bstack)
        End If
        x2 = 0  ' need to erased - because reused
        y2 = 0
        
         If MOUT Then Execute = 0: Exit Function
        ok = True
        End If
        ''' ELSE MAKE AN OTHER FOR NEXT
        
        End If
        End If
        End If
      
        Else
        v = -1
        Set pppp = Nothing
        GoTo startwithgroup


        End If
        Case 5
  

                    If neoGetArray(bstack, w$, pppp) Then

                            If NeoGetArrayItem(pppp, bstack, w$, v, b$) Then
                                    If Typename(pppp.item(v)) = "Group" Then
startwithgroup:

                                      Execute = SpeedGroup(bstack, pppp, "FOR", w$, b$, v)
                                      If Execute = 0 Then
                                      Exit Function
                                      ElseIf Execute <> 1 And b$ <> "" Then
                                     Once = False
                                      Exit Function
                                     End If
                                        sss = Len(b$)
                                        GoTo loopagain
                     
                                    End If
                                MissingGroup
                                Else
                                NotExistArray
                            End If
                                Execute = 0
                                Exit Function
                                Else
                                
                                Execute = 0
                                Exit Function
                    End If
        
        End Select
        If Not ok Then
        Execute = 0
        Exit Function
        End If
        Case "NEXT", "ÅÐÏÌÅÍÏ"
        If IsLabel(bstack, b$, w$) Then
        If bstack.RetStack.StackItemType(1) = "S" Then
        ss$ = bstack.RetStack.PopStr
        If ss$ <> w$ Then
         bstack.RetStack.PushStr ss$
        MyEr "Missing the right NEXT", "¸÷áóá ôï óùóôü ÅÐÏÌÅÍÏ"
        Execute = 0
        Exit Function
        Else
            With bstack.RetStack
                .drop 1
                .PushVal Len(b$)
                .PushStr ss$
            End With
         End If
               Exit Function
  
        End If
        Else
              MyEr "NEXT without FOR", "ÅÐÏÌÅÍÏ ÷ùñßò ÃÉÁ"
        Execute = 0
        Exit Function
        End If
        
        Case "INLINE", "ÅÍÈÅÓÇ"
        If VarStat Or NewStat Then GoTo errstat
               If Once = True Then Execute = 0: Exit Function
        If IsLabelSymbolNew(b$, "ÊÙÄÉÊÁ", "CODE", lang) Then
        If IsLabelDot(HERE$, b$, sw$) = 1 Then
                If GetSub(myUcase(sw$, True), nd&) Then
                                b$ = vbCrLf + sbf(nd&).sb & b$
                   sss = Len(b$)
                   GoTo again1
                    ElseIf GetSub(HERE$ + sw$, nd&) Then
                                b$ = vbCrLf + sbf(nd&).sb & b$
                   sss = Len(b$)
                        GoTo again1
                    End If
            Else
            GoTo errstat1
            End If
        Else
        If IsStrExp(bstack, b$, ss$) Then
        b$ = vbCrLf + ss$ & b$
           sss = Len(b$)
                
                GoTo again1
        End If
        End If
        Case "UPDATE", "ÅÐÉÊÁÉÑÏ"
        If bstack.UseGroupname <> "" Then
        
        b$ = ": set " + Left$(bstack.UseGroupname, Len(bstack.UseGroupname) - 1) + "=" + Left$(bstack.UseGroupname, Len(bstack.UseGroupname) - 1) + vbCrLf + b$
             sss = Len(b$)
             Else
             MyEr "Only in a group", "Ìüíï óå ìéá ïìÜäá"
             Execute = 0
             Exit Function
                End If
                GoTo again1
        Case "AFTER", "ÌÅÔÁ"
        If VarStat Or NewStat Then GoTo errstat
                 If linebyline Then
          b$ = w$ + " " + b$
        Execute = Execute(bstack, b$, Once, False)
         Exit Do
        End If
               If Once = True Then Execute = 0: Exit Function
        If IsExp(bstack, b$, p) Then
        If FastSymbol(b$, "{") Then
        ss$ = block(b$) + vbCrLf & "thread this erase"
        sp = GetTaskId + 20000
        b$ = NLtrim$(Mid$(b$, 2))
            Set bs = New basetask
            bs.reflimit = bstack.reflimit
                        Set bs.Parent = bstack
         bstack.PushThread CLng(sp), "after"
        sThreadInternal bs, sp, 0, ss$, uintnew(p), HERE$, True
        Set bs = Nothing
    LLL = 0
       Execute = 1
       
        Else
        LLL = 0
        b$ = vbCrLf & "WAIT " & CStr(p) & ": " & b$
        Execute = 1
        End If
        End If
        
        Case "ÌÅÑÏÓ", "PART"
                 If linebyline Then
          b$ = w$ + " " + b$
        Execute = Execute(bstack, b$, Once, False)
         Exit Do
        End If
        If VarStat Or NewStat Then GoTo errstat
               If Once = True Then Execute = 0: Exit Function
        Execute = 0
        If FastSymbol(b$, "{") Then
        ss$ = block(b$)
        b$ = NLtrim$(Mid$(b$, 2))  ' cut the code...
          If IsLabelSymbolNew(b$, "ÙÓ", "AS", lang) Then
          ' search for variable name only
            If Abs(IsLabel(bstack, b$, w$)) = 1 Then
                If GetlocalVar(w$, v) Then ' exist...
                LLL = 0
                    If var(v) = 0 Then var(v) = True: b$ = vbCrLf + ss$ & vbCrLf + w$ & "=false : " & b$
                ' we have the name
                ElseIf GetVar(bstack, w$, v) Then ' exist...
                LLL = 0
                    If var(v) = 0 Then var(v) = True: b$ = vbCrLf + ss$ & vbCrLf + w$ & "=false : " & b$
                Else
                v = True
                GlobalVar w$, v, , VarStat
                LLL = 0
                b$ = vbCrLf + ss$ & vbCrLf + w$ & "=false : " & b$
                End If
                Execute = 1
                Else
            Exit Function
            End If
            Else
             Exit Function
        End If
            Else
            Exit Function
        End If

        
        Case "DO", "REPEAT", "ÅÐÁÍÁËÁÂÅ", "ÅÐÁÍÅËÁÂÅ"
        If VarStat Or NewStat Then GoTo errstat
                   If linebyline Then
          b$ = w$ + " " + b$
        Execute = Execute(bstack, b$, Once, False)
         Exit Do
        End If
               If Once = True Then Execute = 0: Exit Function
        If FastSymbol(b$, "{") Then
        v = Len(b$)
                  ss$ = block(b$) + "}"
                  TraceStore bstack, x1, b$, 1, y1
                  b$ = NLtrim$(Mid$(b$, 2))
                  ok = False
                      sss = Len(b$)
                    ec$ = ss$
                 ' FIND UNTIL
                 If IsLabelSymbolNew(b$, "ÌÅ×ÑÉ", "UNTIL", lang) Then
                      Execute = 1
                      TraceRestore bstack, y1
           Call executeblock(Execute, bstack, ss$, Once, ok)
           TraceRestore bstack, x1
                         If Execute = 0 Then
                            b$ = Space$(v - (Len(ec$) - Len(ss$)))  ' êüëðï ãéá íá Ý÷ù ôá ìçíýìáôá ëÜèïõò óùóôÜ!
                            '
                            Execute = 0: Exit Function
                            ElseIf Execute = 2 And ss$ <> "" And Not ok Then
                            b$ = ss$: Exit Function
                            
                            
                        End If
                        If Execute = 3 Then ok = False
                 If ok Or MOUT Then
                 If ok Then
                    ok = True
                    ss$ = GetNextLine(b$)  'FORGET ANY CODE TO THE RIGHT
                 Else
                     Exit Function
                 End If
                 Else
                 
                     
        sss = Len(b)
        
        w$ = b$
        If IsExp(bstack, b$, p) Then
         w$ = Left$(w$, Len(w$) - Len(b$))
        If Not p Then
        bb$ = w$
        ok = False
              Do
                 ss$ = ec$
                 w$ = bb$
                      Call executeblock(Execute, bstack, ss$, Once, ok)
                         If Execute = 0 Then
                    b$ = Space$(v - (Len(ec$) - Len(ss$)))
                 Execute = 0: Exit Function
                                      ElseIf Execute = 2 And ss$ <> "" And Not ok Then
                            b$ = ss$: Exit Function
                            
                 End If
                  If Execute = 3 Then ok = False
                 If ok Or MOUT Then Exit Do
                          DUM = IsExp(bstack, w$, p)
          Loop Until p = True
        End If
              End If
              End If
                 Else
                 ' play always
                 If IsLabelSymbolNew(b$, "ÐÁÍÔÁ", "ALWAYS", lang) Then
                      Do
                 ss$ = ec$
                        Call executeblock(Execute, bstack, ss$, Once, ok)
                         If Execute = 0 Then
                    b$ = Space$(v - (Len(ec$) - Len(ss$)))
                 Execute = 0: Exit Function
                                             ElseIf Execute = 2 And ss$ <> "" And Not ok Then
                            b$ = ss$: Exit Function
                 End If
                 If ok Or MOUT Then Exit Do
                  Loop
 
                 
                 
                 
                 Else
                 
                 Execute = 0
                 Exit Function
                 End If
                 End If
            End If
            
        Case "ÅÍÙ", "WHILE"
        
        If VarStat Or NewStat Then GoTo errstat
                   If linebyline Then
          b$ = w$ + " " + b$
        Execute = Execute(bstack, b$, Once, False)
         Exit Do
        End If
               If Once = True Then Execute = 0: Exit Function
        w$ = b$
        If IsExp(bstack, b$, p) Then
         w$ = Left$(w$, Len(w$) - Len(b$))
                If p = 0 Then
                 If FastSymbol(b$, "{") Then
                 w$ = block(b$)
                 b$ = NLtrim$(b$)
           If FastSymbol(b$, "}") Then
                b$ = NLtrim(b$)
                 If b$ = "" Then Exit Function
                 GoTo again1
                 Else
                 b$ = NLtrim$(b$)
                 If b$ = "" Then Exit Function
                 GoTo again1
                 End If
                 Else
                 Exit Do
                 End If
                Else
                 If FastSymbol(b$, "{") Then
                 ss$ = block(b$) + "}"
                 TraceStore bstack, x1, b$, 1, y1
                 
                 ec$ = ss$
                 b$ = NLtrim$(Mid$(b$, 2))
                 sss = Len(b$)
                 bb$ = w$
                         Execute = 1
                         ok = False
                 Do
                 ss$ = ec$
                 w$ = bb$

                 TraceRestore bstack, y1
           If executeblock(Execute, bstack, ss$, Once, ok) Then
              TraceRestore bstack, x1
            b$ = ss$ & b$
           Exit Function
           Else
           TraceRestore bstack, x1
            If Execute = 2 And ss$ <> "" And Not ok Then
                            b$ = ss$: Exit Function
                            End If
           End If
                 If Execute = 3 Then ok = False
                 If ok Or MOUT Then Exit Do
        
                 DUM = IsExp(bstack, w$, p)
                 Loop Until p = 0 Or NOEXECUTION
                 
                 If MOUT Then Execute = 0: Exit Function
                 Else
                 sss = Len(b$)
                 End If
                 
                End If
        End If
        Case "ÊÁÈÅ", "EVERY"
        If VarStat Or NewStat Then GoTo errstat
        If Once = True Then Execute = 0: Exit Function
                   If linebyline Then
          b$ = w$ + " " + b$
        Execute = Execute(bstack, b$, Once, False)
         Exit Do
        End If
        If IsExp(bstack, b$, p) Then
              If p <= 0 Then
                 If FastSymbol(b$, "{") Then
                 w$ = block(b$)
                 b$ = NLtrim$(Mid$(b$, 2))
                 sss = Len(b$)
                 Else
                 Exit Do
                 End If
                Else
                 If FastSymbol(b$, "{") Then
                 ss$ = block(b$) + "}"
                 ec$ = ss$
                 b$ = NLtrim$(Mid$(b$, 2))
                 sss = Len(b$)
      
                         Execute = 1
                         ok = False
                ' GET A TICK HERE
                sx = p
                 p = p + uintnew(timeGetTime)
                 Do
                 ss$ = ec$
               ''''''''''  w$ = bb$
                 Call executeblock(Execute, bstack, ss$, Once, ok)
                 If Execute = 0 Then   '''Execute(bstack, ss$, ok) = 0
                            If NOEXECUTION Then
                                            b$ = "START"
                                            Execute = 1
                                            ok = True
                                            Exit Do
                            End If
                              b$ = ss$ & b$
                            Execute = 0: Exit Function
                 End If
                 If ok Or MOUT Then Exit Do
                 If p < timeGetTime Then
                 p = (sx - (uintnew(timeGetTime) - p) \ sx) + uintnew(timeGetTime)
                 End If
 
            If bstack.IamThread Then k1 = uintnew(timeGetTime + REFRESHRATE)
If p > uintnew(timeGetTime) Then
            ''  If TaskMaster.Processing Then TaskMaster.TimerTick Else Sleep 1

             ProcTask2 bstack
                   While p > uintnew(timeGetTime)
         ProcTask2 bstack
                  ''  If TaskMaster.Processing Then TaskMaster.TimerTick Else Sleep 1
                    Wend
                    End If
                   p = sx + uintnew(timeGetTime)
                 Loop
                  If NOEXECUTION Then
                b$ = "START"
                Execute = 1
                ok = True
                Exit Do
                End If
                 If MOUT Then Execute = 0: Exit Function
                 Else
                 sss = Len(b$)
                 End If
                 
                End If
        End If
        Case "ÊÕÑÉÏ.ÅÑÃÏ", "MAIN.TASK", "TASK.MAIN"
        If VarStat Or NewStat Then GoTo errstat
               If Once = True Then Execute = 0: Exit Function
              If linebyline Then
          b$ = w$ + " " + b$
        Execute = Execute(bstack, b$, Once, False)
         Exit Do
        End If
        ' only one task main
        If taskmainonly = True Then Execute = 0: Exit Function
        taskmainonly = True
        w$ = b$
        Execute = 1
         If IsExp(bstack, b$, p) Then
         If FastSymbol(b$, "{") Then
         ss$ = block(b$)
         sp = GetTaskId + 20000
            Set bs = New basetask
            bs.reflimit = bstack.reflimit
                        Set bs.Parent = bstack
              bstack.PushThread CLng(sp), "_multi"
         sThreadInternal bs, sp, 10, ss$, uintnew(-1), HERE$, True
         TaskMaster.Message CLng(sp), 3, CLng(uintnew(p))
      On Error Resume Next
        bstack.TaskMain = True
                Do
                
                TaskMaster.TimerTick
               '' mydoevents1 form1
               MyDoEvents0 di
          ''     MyDoEvents2 di
                ''TaskMaster.RestEnd1
                 bstack.TaskMain = bstack.Exist(CLng(sp), "_multi") = False
                
               
             Loop Until MOUT Or bstack.TaskMain Or NOEXECUTION Or TaskMaster.QueueCount < 2
     bstack.TaskMain = False
   If TaskMaster.PlayMusic Then mute = True
         End If
         If FastSymbol(b$, "}") Then
         End If
         End If
         taskmainonly = False
        If MOUT Then Execute = 0: Exit Function
        
        Case "ELSE", "ÁËËÉÙÓ"
        If VarStat Or NewStat Then GoTo errstat
               If Once = True Then Execute = 0: Exit Function
        If IFCTRL = 0 Then
        SyntaxError
        Execute = 0
        Exit Function
        Else
                If (Not jump) Or IFCTRL = 2 Then
                 If FastSymbol(b$, "{") Then
                w$ = block(b$)
                b$ = NLtrim$(Mid$(b$, 2))
                Else
                SetNextLine b$
                lbl = True
                End If
                jump = False
                End If
                End If
                   IFCTRL = 0 ' NONEED ANYTHING AND ERROR FOR IF.ELSE AND ELSE
            
                sss = Len(b$)
        Case "TRY", "ÄÅÓ"
        If VarStat Or NewStat Then GoTo errstat
               If Once = True Then Execute = 0: Exit Function
                 If linebyline Then
          b$ = w$ + " " + b$
        Execute = Execute(bstack, b$, Once, False)
        bstack.nokillvars = False
         Exit Do
        End If
        ' ÌÅÔÁÂËÇÔÇ
        I = Abs(IsLabel(bstack, b$, w$))
        
        Select Case I
        Case 0  ' new
          If FastSymbol(b$, "{") Then
  
         Execute = 1
         ss$ = "{" + block(b$) + "}"
        
            
            
       TraceStore bstack, x1, b$, 1
         
         b$ = NLtrim$(Mid$(b$, 2))
                     
                     Call executeblock(Execute, bstack, ss$, Once, ok)
          TraceRestore bstack, x1
   bstack.nokillvars = False
         Once = False
         NOEXECUTION = False
         NERR = False
         LastErNum = 0
            LastErName = ""
            LastErNameGR = ""
            Execute = 1
         End If
        
        
        Case 1, 4
        If FastSymbol(b$, "{") Then
        p = 0
         If Not GetlocalVar(w$, v) Then
         If Not GetVar(bstack, w$, v) Then
         v = GlobalVar(w$, p, , VarStat) '': GetlocalVar W$, v
         End If
         End If
         Execute = 1
         ss$ = "{" & block(b$) & "}"
          b$ = NLtrim$(Mid$(b$, 2))
                     Call executeblock(Execute, bstack, ss$, Once, ok)
     var(v) = Execute = 1
                 
         NOEXECUTION = False
         NERR = False
         LastErNum = 0
         End If
         Execute = 1
        End Select
        If MOUT Then Execute = 0: Exit Function
        Execute = 1
         Case "ELSE.IF", "ÁËËÉÙÓ.ÁÍ"
         If VarStat Or NewStat Then GoTo errstat
                If Once = True Then Execute = 0: Exit Function
       If IFCTRL = 0 Then
        SyntaxError
        Else
        
         If (Not jump) Or IFCTRL = 2 Then
         ' LOOK AHEAD...DO NOT PLAY THE LOGICAL EXPRESSION
         IFCTRL = 1
         ss$ = aheadstatus(b$, False, IFCTRL)
         b$ = Mid$(b$, IFCTRL)
                   If FastSymbol(b$, "{") Then
               w$ = block(b$)
             b$ = NLtrim$(Mid$(b$, 2))
              Else
                SetNextLine b$
                lbl = True
                End If
               jump = False
          
        Else   ' ONLY FOR NOT JUMP
        If IsExp(bstack, b$, p) Then
        IFCTRL = 1
        jump = (p = 0)
        Select Case Abs(IsLabel(bstack, b$, w$))  ' now w$ is Ucase
            Case 1
            Select Case w$
                Case "THEN", "ÔÏÔÅ"
                If VarStat Or NewStat Then GoTo errstat
                       If Once = True Then Execute = 0: Exit Function
                             If jump Then
                    If FastSymbol(b$, "{") Then
                    w$ = block(b$)
                    b$ = NLtrim$(Mid$(b$, 2))
                    
                    Else
                    SetNextLine b$
                    lbl = True
                    End If
                    Else
                    IFCTRL = 2 ' NONEED ANYTHING BUT NOT ERROR FOR IF.ELSE AND ELSE
              End If
                
               Case "ELSE", "ÁËËÉÙÓ"
               If VarStat Or NewStat Then GoTo errstat
                      If Once = True Then Execute = 0: Exit Function
                   '  IFCTRL = 1
                If Not jump Then      ' JUMP FALSE SKIP ELSE
                If FastSymbol(b$, "{") Then
                w$ = block(b$)
                b$ = NLtrim$(Mid$(b$, 2))
                Else
                 SetNextLine b$
                lbl = True
                End If
                IFCTRL = 0 ' NONEED ANYTHING AND ERROR FOR IF.ELSE AND ELSE
                End If
                sss = Len(b$)
                            Case "ELSE.IF", "ÁËËÉÙÓ.ÁÍ"
                            
                            If VarStat Or NewStat Then GoTo errstat
                                   If Once = True Then Execute = 0: Exit Function
                   '  IFCTRL = 1
                b$ = w$ & b$
                     
            Case Else
           
           Execute = 0
           Exit Function
            End Select
           Case Else
           Execute = 0
           Exit Function
        End Select
        Else
        ' error
        Execute = 0
         Exit Function
        End If
                End If
                End If
        sss = Len(b$)
        
        Case "IF", "ÁÍ"
        If VarStat Or NewStat Then GoTo errstat
        If IsExp(bstack, b$, p) Then
          IFCTRL = 1           ' NEED THEN OR ELSE OR ELSE.IF
        jump = (p = 0)                    ' JUMP TRUE GOTO ELSE
        Select Case Abs(IsLabel(bstack, b$, w$))
            Case 1
            Select Case w$
                Case "THEN", "ÔÏÔÅ"
                If VarStat Or NewStat Then GoTo errstat
                If jump Then
                    If FastSymbol(b$, "{") Then
                     If Once = True Then Execute = 0: Exit Function
                    w$ = block(b$)
                    b$ = NLtrim$(Mid$(b$, 2))
                    
                    Else
                    If Once Then
                    w$ = GetStrUntil(vbCrLf, b$, False)
                    Exit Function
                    Else
                    SetNextLine b$
                    lbl = True
                    End If
                   
                    End If
                    
                    Else
                    
                    IFCTRL = 2 ' NONEED ANYTHING BUT NOT ERROR FOR IF.ELSE AND ELSE
                    If Once Then
                    sss = Len(b$): GoTo again1
           
                    End If
              End If
        
                
                Case "ELSE", "ÁËËÉÙÓ"
                If VarStat Or NewStat Then GoTo errstat
                   '  IFCTRL = 1
                If Not jump Then      ' JUMP FALSE SKIP ELSE
                If FastSymbol(b$, "{") Then
                 If Once = True Then Execute = 0: Exit Function
                w$ = block(b$)
                b$ = NLtrim$(Mid$(b$, 2))
                Else
                 SetNextLine b$
                lbl = True
                End If
                IFCTRL = 0 ' NONEED ANYTHING AND ERROR FOR IF.ELSE AND ELSE
                End If
                sss = Len(b$)
                            Case "ELSE.IF", "ÁËËÉÙÓ.ÁÍ"
                            If VarStat Or NewStat Then GoTo errstat
                          
                   '  IFCTRL = 1
                b$ = w$ & b$
                
           Case Else
           
           Execute = 0
           Exit Function
            End Select
           Case Else
           Execute = 0
           Exit Function
        End Select
        Else
        ' error
        If LastErNum = -2 Then
        Execute bstack, b$, True

        Else
        MissNumExpr
       
         End If
          Execute = 0
         Exit Function
        End If
        sss = Len(b$)
        Case "SELECT", "ÅÐÅËÅÎÅ", "ÅÐÉËÅÎÅ"  '*************************************** SELECT CASE
        
        If VarStat Or NewStat Then GoTo errstat
         If Once = True Then Execute = 0: Exit Function
        x1 = 0 ' mode numbers using p, sp and st
                ' x1=2 using sw$ w$ ss$
                Us$ = ""
            If IsLabelSymbolNew(b$, "ÌÅ", "CASE", lang) Then
                        If IsExp(bstack, b$, sp) Then
                        x1 = 1
                        ElseIf IsStrExp(bstack, b$, sw$) Then
                        x1 = 2
                        End If
                    If x1 > 0 Then ' SELECT CASE NUMBER or STRING
                        SetNextLine b$
                    slct = 1
                        Do
                        If b$ = "" Then Exit Do
                                If IsLabelSymbolNew(b$, "ÌÅ", "CASE", lang) Then  ' WE HAVE CASE
                                If slct > 0 Then         ' WE ARE IN SEARCH
                                Do
                                ' åäþ êïéôÜìå ôá CASE
                                x2 = 0
                                If x1 = 1 Then
                                If IsExp(bstack, b$, p) Then x2 = 1
                                Else
                                If IsStrExp(bstack, b$, w$) Then x2 = 2
                                End If
                                       If x2 > 0 Then 'WE HAVE NUMBER OR STRING
                                            If IsLabelSymbolNew(b$, "ÅÙÓ", "TO", lang) Then   ' range ?
                                            y1 = 0
                                               If x1 = 1 Then
                                                    If IsExp(bstack, b$, st) Then y1 = 1

                                                Else
                                                    If IsStrExp(bstack, b$, ss$) Then y1 = 2
                                                End If
                                                If y1 > 0 Then
                                                y2 = 0
                                                   If x1 = 1 Then
                                                    If (sp >= p And sp <= st) Then y2 = 1

                                                Else
                                                    If sw$ >= w$ And sw$ <= ss$ Then y2 = 2
                                                End If
                                                    If y2 > 0 Or slct = -1 Then 'slct=-1 from break
                                                   If slct = 1 Then slct = 0   ' slct=0 we found
                                                        SetNextLine b$
                                                         v = Len(b$)  ' for the error system shift+f1 jumps to error
                                                        If FastSymbol(b$, "{") Then  ' block
                                                            v = Len(b$)
                                                            ss$ = block(b$)
                                                            DUM = False
                                                            I = 1
                                                             Call executeblock(I, bstack, ss$, False, DUM)
                                                              b$ = ss$ & b$
                                                            If I = 0 Then
                                                               
                                                                Execute = 0: Exit Function
                                                            ElseIf I = 2 Then  ' break
                                                                If DUM = True And b$ <> "" Then slct = -1
                                                            ElseIf I = 3 Then  ' continue
                                                                If DUM = True And b$ <> "" Then slct = 0 ' we found leave structure
                                                            End If
                                                        Else
                                                        DUM = True
                                
                                                            I = 1
                             
                                                             Call executeblock(I, bstack, b$, True, DUM)
                                                            If I = 0 Then
                                                                b$ = Space$(v)
                                                                Execute = 0: Exit Function
                                                            ElseIf I = 1 And b$ = "" Then 'this is an exit ÏÊ2
                                                          
                                                            Execute = 1
                                                            Exit Function
                                                            ElseIf I = 2 Then
                                                                   
                                                                          If DUM = True And b$ <> "" Then
                                                                            slct = -1
                                                                          ElseIf b$ <> "" Then
                                                                            Execute = 2
                                                                            Once = False
                                                                             Exit Function
                                                                          Else
                                                                        Execute = I
                                                                         Once = True
                                                                            Exit Function
                                                                        End If
                                                            ElseIf I = 3 Then
                                                                If DUM = True And b$ <> "" Then slct = 0
                                                            End If
        
                                                        End If
                
                                                        
                                                        Exit Do
                                                    End If
                                                Else
                                                    Execute = 0
                                                    Exit Function
                                                End If
                                            Else
                                            ' NO WE HAVE ONE VALUE...X1 MASTER, X2 ONE VALUE  Y2 FOR LAST CHECK
                                            y2 = 0
                                                   If x1 = 1 Then
                                                    If sp = p Then y2 = 1

                                                Else
                                                    If w$ = sw$ Then y2 = 2
                                                End If
                                                If y2 > 0 Or slct = -1 Then ' ONE VALUE
                                                 If slct = 1 Then slct = 0
                                                    SetNextLine b$
                                                         v = Len(b$)
                                                        If FastSymbol(b$, "{") Then  ' block
                                                          v = Len(b$)
                                                          ss$ = block(b$)
                                                            DUM = False
                                                            I = 1
                                                            Call executeblock(I, bstack, ss$, False, DUM)
                                                            b$ = ss$ & b$
                                                            If I = 0 Then
                                                         
                                                                Execute = 0: Exit Function
                                                            ElseIf I = 2 Then
                                                                If DUM = True And b$ <> "" Then slct = -1
                                                            ElseIf I = 3 Then
                                                               If DUM = True And b$ <> "" Then slct = 0
                                                            End If
                                                        Else   ' or line
                                                            DUM = True
                                                        
                                                            I = 1
                                                            Call executeblock(I, bstack, b$, True, DUM)
                                                            If I = 0 Then
                                                                b$ = Space$(v)
                                                                Execute = 0: Exit Function
                                                            ElseIf I = 1 And b$ = "" Then 'this is an exit ÏÊ3
                                                           '' B$ = ss$
                                                            Execute = 1
                                                            Exit Function
                                                            ElseIf I = 2 Then
                                                                       
                                                                          If DUM = True And b$ <> "" Then
                                                                            slct = -1
                                                                          ElseIf b$ <> "" Then
                                                                            Execute = 2
                                                                            Once = False
                                                                             Exit Function
                                                                          Else
                                                                        Execute = I
                                                                         Once = True
                                                                            Exit Function
                                                                        End If
                                                            ElseIf I = 3 Then
                                                           ''     If DUM = True And B$ <> "" Then slct = 0: B$ = GetNextLine(ss$) 'ok
                                                                If DUM = True And b$ <> "" Then slct = 0  '': B$ = GetNextLine(ss$) 'ok
                                                            End If
                                                       'ÏÊ
                                                        End If
                                                        Exit Do
                                                End If
                                            End If
                                        Else
                                     
                                     
                                                    If x1 = 1 Then
                                                    b$ = Str$(sp) & " " & b$
                                                
                                                Else
                                                ' HERE............................IS A PROBLEM IF SW$ HAS <3 ASCII CODE
                                                b$ = Sput(sw$) + b$
                                                
                                              
                                                End If
                                        
                                        If IsExp(bstack, b$, p) Then
                                            If p <> 0 Or slct = -1 Then
                                             If slct = 1 Then slct = 0
                                                        SetNextLine b$
                                                         v = Len(b$)
                                                        If FastSymbol(b$, "{") Then  ' block
                                                          v = Len(b$)
                                                            ss$ = block(b$)
                                                            DUM = False
                                                            I = 1
                                               Call executeblock(I, bstack, ss$, False, DUM)
                                                         b$ = ss$ & b$
                                                            If I = 0 Then
                                                            
                                                            Execute = 0: Exit Function
                                                            ElseIf I = 2 Then
                                                                If DUM = True And b$ <> "" Then slct = -1
                                                            ElseIf I = 3 Then
                                                              If DUM = True And b$ <> "" Then slct = 0
                                                            End If
                                                        Else
                                                          DUM = True
                                                  
                                                            I = 1
                                                            Call executeblock(I, bstack, b$, True, DUM)
                                                            If I = 0 Then
                                                                b$ = Space$(v)
                                                                Execute = 0: Exit Function
                                                            ElseIf I = 1 And b$ = "" Then  'this is an exit  ÏÊ1
                            
                                                            Execute = 1
                                                            Exit Function
                                                            ElseIf I = 2 Then
                                                           
                                                                          If DUM = True And b$ <> "" Then
                                                                            slct = -1
                                                                          ElseIf b$ <> "" Then
                                                                            Execute = 2
                                                                            Once = False
                                                                             Exit Function
                                                                          Else
                                                                            Execute = I
                                                                            Once = True
                                                                            Exit Function
                                                                        End If
                                                            ElseIf I = 3 Then
                                                                If DUM = True And b$ <> "" Then slct = 0
                                                            End If
        
                                                        End If
                
                                                        
                                                        Exit Do
                                            End If
                                        Else
                                        Execute = 0
                                        Exit Function
                                        End If
                                        End If
                                    Loop While FastSymbol(b$, ",")
                                     End If
                                SetNextLine b$
        
                                ' drop case
        
                                If IsLabelSymbolNew(b$, "ÌÅ", "CASE", lang, , , True) Then
                               
                                ElseIf IsLabelSymbolNew(b$, "ÁËËÉÙÓ", "ELSE", lang, , , True) Then
                            
                                ElseIf IsLabelSymbolNew(b$, "ÔÅËÏÓ", "END", lang, , , True) Then
                             
                                Else
                                         v = Len(b$)
                                    If FastSymbol(b$, "{") Then
                                           If slct >= 0 Then
                                                    ss$ = block(b$) + "}"
                                                    b$ = NLtrim$(Mid$(b$, 2))
                                            Else
                                                    v = Len(b$)
                                                    ss$ = block(b$)
                                                    DUM = False
                                                    I = 1
                                                            Call executeblock(I, bstack, ss$, False, DUM)

                                                    b$ = ss$ & b$
                                                    If I = 0 Then
                                                       
                                                        Execute = 0: Exit Function
                                                    ElseIf I = 2 Then
                                                            If DUM = True And b$ <> "" Then slct = -1
                                                   
                                                     ElseIf I = 3 Then
                                                            If DUM = True And b$ <> "" Then slct = 0

                                                     End If
                                                            
                                            End If
                                     
                                        SetNextLine b$
                                      ElseIf slct < 0 Then
                                                        DUM = True
                                                   
                                                            I = 1
                                                            Call executeblock(I, bstack, b$, True, DUM)
                        
                                                            If I = 0 Then   ' where is exit
                                                                b$ = Space$(v)
                                                                Execute = 0: Exit Function
                                                            ElseIf I = 2 Then
                                                                    
                                                                          If DUM = True And b$ <> "" Then
                                                                            slct = -1
                                                                          ElseIf b$ <> "" Then
                                                                            Execute = 2
                                                                            Once = False
                                                                             Exit Function
                                                                          Else
                                                                            Execute = I
                                                                            Once = True
                                                                            Exit Function
                                                                        End If
                                                            ElseIf I = 3 Then
                                                                If DUM = True And b$ <> "" Then slct = 0: b$ = GetNextLine(ss$)
                                                            End If
        
                                    SetNextLine b$
                                    Else
                                    SetNextLine b$
                                
                                        End If
                                    
                                End If
                                
                                ElseIf IsLabelSymbolNew(b$, "ÁËËÉÙÓ", "ELSE", lang) Then
                                    SetNextLine b$
                                    v = Len(b$)
                                    If FastSymbol(b$, "{") Then
                                    v = Len(b$)
                                        ss$ = block(b$)
                                        b$ = NLtrim$(Mid$(b$, 2))
                                        If slct > 0 Then
                                                    v = Len(b$)
                                                    DUM = False
                                                    I = 1
                                                       Call executeblock(I, bstack, ss$, False, DUM)
                              b$ = ss$ & b$
                                                                 If I = 0 Then
                                                        
                                                        Execute = 0: Exit Function
                                                            ElseIf I = 2 Then
                                                                          If DUM = True And b$ <> "" Then
                                                                            slct = -1
                                                                          ElseIf b$ <> "" Then
                                                                            Execute = 2
                                                                            Once = False
                                                                             Exit Function
                                                                          Else
                                                                            Once = True
                                                                            Exit Function
                                                                        End If
                                                            ElseIf I = 3 Then
                                                                If DUM = True And b$ <> "" Then slct = 0: b$ = GetNextLine(ss$)
                                                            End If
                                        End If
                                    Else
                                    If slct > 0 Then
                                                                       DUM = True
                                             
                                                            I = 1
                                                            Call executeblock(I, bstack, b$, True, DUM)
                                                            If I = 0 Then
                                                                b$ = Space$(v)
                                                                Execute = 0: Exit Function
                                                            ElseIf I = 1 And b$ = "" Then 'this is an exit
                                             
                                                            Execute = 1
                                                            Exit Function
                                                            ElseIf I = 2 Then
                                                              
                                                                          If DUM = True And b$ <> "" Then
                                                                            slct = -1
                                                                          ElseIf b$ <> "" Then
                                                                            Execute = 2
                                                                            Once = False
                                                                             Exit Function
                                                                          Else
                                                                          Execute = I
                                                                            Once = True
                                                                            Exit Function
                                                                        End If
                                                            ElseIf I = 3 Then
                                                    If DUM = True And b$ <> "" Then slct = 0
                                              End If
                                    End If
                                End If
                                SetNextLine b$
                                slct = 0
                        ElseIf IsLabelSymbolNew(b$, "ÔÅËÏÓ", "END", lang) Then
                            If IsLabelSymbolNew(b$, "ÅÐÉËÏÃÇÓ", "SELECT", lang) Then
                                slct = 0
                                Exit Do
                            Else
                                Execute = 0
                                Exit Function
                            End If
                        Else
                             b$ = Space$(v)
                            Execute = 0
                            Exit Function
                        End If
  
                        Loop
                        If slct > 0 Then
                        b$ = Space$(v)
                        Execute = 0: Exit Function
                        End If
                        
                    '-----------ENDIF ---------------
                       Else
                        Execute = 0
                        Exit Function
                    End If
        Else
           Execute = 0
           Exit Function
        End If
      sss = Len(b$)
        Case "ÁÐÏ", "ON"                 '************************************* ON NUMBER GOTO LABELS
        If VarStat Or NewStat Then GoTo errstat
        If IsExp(bstack, b$, p) Then
        y1 = IsLabelSymbolNew(b$, "ÐÑÏÓ", "GOTO", lang)
        y2 = False
        If Not y1 Then
        y1 = IsLabelSymbolNew(b$, "ÄÉÁÌÅÓÏÕ", "GOSUB", lang, True)
        y2 = True
        End If
            If y1 Then
                p = CLng(p)
                If p <= 0 Then ' no exit
                SetNextLine b$
                If Execute <> 2 Then Execute = 1 Else Execute = 3
            b$ = ""
           Once = True
           Exit Function
          '' SetNextLine B$
                '' sss = Len(B$)
               ''  lbl = True
                
                Else
                w$ = ""
                I = 0
                Do
                I = 1
                 x1 = Abs(IsLabelOnly(b$, w$))
                    If x1 = 0 Then
                    If Not IsNumberLabel(b$, w$) Then p = 1000: Exit Do
                    
                    ElseIf x1 > 1 Then
                        p = 1000
                        Exit Do
                    End If
                    I = 0
                    p = p - 1
                    If Not FastSymbol(b$, ",") Then Exit Do
                    
                Loop Until p = 0
                If p <> 0 Then
                
                If I = 0 Then
                Execute = 1: w$ = GetNextLine$(b$): sss = Len(b$):
                End If
                w$ = ""
                'Exit Do
                Else
                If I > 0 Then
                MyEr "Missing label/Number line", "Ëåßðåé ÅôéêÝôá/Áñéèìüò ãñáììÞò"
                sss = LLL
                  Execute = 0
                Exit Function
                Else
                If y2 Then
                If bstack.SubLevel > deep And deep <> 0 Then
' GO BACK TO FIRST CALL
If bstack.RetStack.Total >= 9 * deep Then
             MyEr "No more " + CStr(deep) + " levels gosub allowed", "Äåí åðéôñÝðïíôáé ðÜíù áðü " + CStr(deep) + " åðßðåäá ãéá åíôïëÞ ÄÉÁÌÅÓÏÕ"

             Execute = 0
             Exit Function

            
Else
bstack.RetStack.drop bstack.RetStack.Total
 End If
  MyEr "Internal Error", "Åóùôåñéêü ËÜèïò"
 NOEXECUTION = True
 Execute = 0
Exit Function
 
End If
               
               If p = 1000 Then Exit Function
                SetNextLine b$
               If x1 = 1 Then
               I = 1
               GoTo contHereFromOn
               Else
               GoTo contHere2FromOn
               End If
               
                
                End If
                b$ = w$
                Execute = 2
                Exit Function
                End If
                End If
                End If
            Else
              sss = LLL
            End If
        Else
            MissParam b$
            Execute = 0
            Exit Function
        End If
          
        Case "SUB", "ÑÏÕÔÉÍÁ"
          If VarStat Or NewStat Then GoTo errstat
           If Once = True Then Execute = 0: Exit Function
   If Execute <> 2 Then
              b$ = w$
           Once = True
           Execute = 3
         
           Else
           b$ = ""
           
        End If
           Exit Function
        Case "GOSUB", "ÄÉÁÌÅÓÏÕ"
autogosub:
         If VarStat Or NewStat Then GoTo errstat
If bstack.SubLevel > deep And deep <> 0 Then
' GO BACK TO FIRST CALL
If bstack.RetStack.Total >= 9 * deep Then
             MyEr "No more " + CStr(deep) + " levels gosub allowed", "Äåí åðéôñÝðïíôáé ðÜíù áðü " + CStr(deep) + " åðßðåäá ãéá åíôïëÞ ÄÉÁÌÅÓÏÕ"

             Execute = 0
             Exit Function

            
Else
bstack.RetStack.drop bstack.RetStack.Total
 End If
  MyEr "Internal Error", "Åóùôåñéêü ËÜèïò"
 NOEXECUTION = True
 Execute = 0
Exit Function
 
End If
        I = Abs(IsLabelOnly(b$, w$))
contHereFromOn:
                If I = 5 Then
                Once = False
                
                PushParamGeneral bstack, b$
                If FastSymbol(b$, ")") Then
                
                 PushStage bstack, False
                bstack.RetStack.PushVal Len(b$)
                 
                If lang Then
                bstack.RetStack.PushStr "SUB " + w$
                Else
                bstack.RetStack.PushStr "ÑÏÕÔÉÍÁ " + w$
                End If
                    b$ = Chr$(0)
                    '' here is the fault...execute 2 means loop...
                    '' it is known only here...
                    loopthis = Execute = 2
                    Execute = 2
                  Exit Function
                Else
                MissSymbol b$, ")"
                Execute = 0
                Exit Function
                End If
                ElseIf I = 1 Then
                Once = False
        
                PushStage bstack, True
                bstack.RetStack.PushVal Len(b$)
                bstack.RetStack.PushStr "S " + w$
                b$ = Chr$(0)

                Execute = 2
                Exit Function
                ElseIf I = 0 Then
                
                If IsNumberLabel(b$, w$) Then
contHere2FromOn:
                      Once = False
                              PushStage bstack, True  ' CORRECT FROM REV 45 - VER 8
                      bstack.RetStack.PushVal Len(b$)
                     bstack.RetStack.PushStr "* " + w$
                b$ = Chr$(0)
                
                Execute = 2
                Exit Function
                Else
                 b$ = w$ & b$
                End If
                Else
                b$ = w$ & b$
                
                Exit Do
                End If
        Case "GOTO", "ÐÑÏÓ"               '**************************************** This is the GOTO statement
        If VarStat Or NewStat Then GoTo errstat
        If Trim$(b$) = "" Or FastSymbol(b$, ":") Then
                Execute = 0
                MyEr "No Label or Number in GOTO", "×ùñßò üíïìá Þ áñéèìü ç ÐÑÏÓ"
                Exit Function
        Else
        I = Abs(IsLabelOnly(b$, w$))
                If I = 1 Then
                Once = False
                b$ = w$
                Execute = 2
                Exit Function
                ElseIf I = 0 Then
                If IsNumberLabel(b$, w$) Then
                      Once = False
                b$ = w$
                Execute = 2
                Exit Function
                Else
                 b$ = w$ & b$
                End If
                Else
                b$ = w$ & b$
                
                Exit Do
                End If
              End If
              Case "LOCAL", "ÔÏÐÉÊÁ", "ÔÏÐÉÊÇ", "ÔÏÐÉÊÅÓ"
                    NewStat = True
                    sss = Len(b$)
                GoTo again1
                
                Case "GLOBAL", "ÃÅÍÉÊÏ", "ÃÅÍÉÊÇ", "ÃÅÍÉÊÅÓ"
                If NewStat Then MyEr "Global and local together;", "ÃåíéêÞ êáé ôïðéêÞ ìáæß!": Execute = 0: Exit Function
                If Not VarStat Then
             
                If IsLabelSymbolNew(b$, "ÏÌÁÄÁ", "GROUP", lang) Then
               If Not GlobalGroup(bstack, b$, lang) Then Execute = 0: Exit Function
               
               End If
                Else
                End If
                VarStat = True
                sss = Len(b$)
                
                GoTo again1
                

        Case Else
varonly:
        If Len(w$) > 3 Then
            If Fast2LabelCheck(w$, "THIS", "ÁÕÔÏ", "", 4) Then
           ' If Left$(w$, 4) = "THIS" Or Left$(w$, 4) = "ÁÕÔÏ" Then
            ss$ = ".DELETEME"
            If IsLabel(bstack, ss$, bb$) < 0 Then
            
If Len(bb$) = 8 Then Execute = 0: Exit Function
            w$ = Left$(bb$, Len(bb$) - 9) + Mid$(w$, 5)
            End If
        End If
    End If
     If FastSymbol(b$, "=") Then
            If Not VarStat Then

                If bstack.ExistVar(w$) Then
                If NewStat Then
                MyEr "Only Static needed", "Ìüíï ôï áíáãíùñéóôéêü ÓôáôéêÞ ÷ñåéÜæåôáé"
                    Execute = 0: Exit Function
                End If
                If IsExp(bstack, b$, p) Then bstack.SetVar w$, p Else GoTo aproblem1
                
                ElseIf GetlocalVar(w$, v) And Not NewStat Then
   
                        If IsExp(bstack, b$, p) Then
                        If Typename(var(v)) = "PropReference" Then
                        var(v).Value = p
                        ElseIf Typename(var(v)) = "Group" Then             '' Group 2 Group
                        If Not bstack.LastObj Is Nothing Then
                                If Typename(bstack.LastObj) = "Group" Then
                                  Set myobject = bstack.LastObj
                                        Set bstack.LastObj = Nothing
                                    
                                       ss$ = bstack.GroupName
                                      If Len(var(v).GroupName) > Len(w$) Then
                                        
                                        UnFloatGroupReWriteVars bstack, w$, v, myobject
                          
                                        Else
                                        bstack.GroupName = Left$(w$, Len(w$) - Len(var(v).GroupName) + 1)
                                        w$ = Left$(var(v).GroupName, Len(var(v).GroupName) - 1)
                                          UnFloatGroupReWriteVars bstack, w$, v, myobject
                                        End If
                                   Set myobject = Nothing
                                        bstack.GroupName = ss$

                             
                                Else
                                '' maybe a block of itemd''
                                
                                  Execute = 0
                                End If
                        Else  '' make an upgrade
                                Execute = 0

                        End If
                        Else
                        If VarType(var(v)) = vbLong Then
                                If Not bstack.LastObj Is Nothing Then
                                If Typename(bstack.LastObj) = "Group" Then
                                      Set myobject = bstack.LastObj
                                        Set bstack.LastObj = Nothing
                                    UnFloatGroup bstack, w$, v, myobject  ' global??
                                    Set myobject = Nothing
                             
                                Else
                                Execute = 0
                                End If
                                Else
                                var(v) = CLng(p)
                                End If
                        Else
                                If Not bstack.LastObj Is Nothing Then
                                If Typename(bstack.LastObj) = "Group" Then
                                        Set myobject = bstack.LastObj
                                                                        Set bstack.LastObj = Nothing
                                                                    UnFloatGroup bstack, w$, v, myobject  ' global??
                                                                    Set myobject = Nothing
                                Else
                                var(v) = 0
                                End If
                                Else

                             var(v) = p
      End If
                            End If
                        End If
                        End If
                ElseIf IsExp(bstack, b$, p) Then
                            If Not bstack.LastObj Is Nothing Then
                                If Typename(bstack.LastObj) = "Group" Then
                                        If NewStat Then
                                            MyEr "No New statement for groups", "¼÷é äÞëùóç íÝïõ ãéá ïìÜäåò"
                                            Exit Function
                                        Else
                                            If Not GetVar(bstack, w$, x1, True) Then x1 = GlobalVar(w$, p, , VarStat)
                                        End If
                                        Set myobject = bstack.LastObj
                                        Set bstack.LastObj = Nothing
                                        If x1 <> 0 Then
                                        
                                            If Typename(var(x1)) = "Group" Then
                                            ''crosscopy - look if we have  a float group
                                            
                                            UnFloatGroupReWriteVars bstack, w$, x1, myobject
                                            Else

                                                UnFloatGroup bstack, w$, x1, myobject   ' global??
                                                Set myobject = Nothing
                                          
                                            End If
                                            ''I have to recreate all items...As names.
                                            ''  Also Functions / Modules and
                                            
                                            
                                        End If
                                        
                                
                                Else
                                
                                SyntaxError
                                  End If
                             Else
                   
                                GlobalVar w$, p, , VarStat
                           
                            End If
                    Else
                    ' error in execute ?
                   If LastErNum <> -2 Then
                   NoValueForvariable w$
                    Execute = 0
                     Exit Function
                                       
                     End If
                     
                End If
                ElseIf IsExp(bstack, b$, p) Then
                    GlobalVar w$, p, , VarStat
                    Else
                    ' error in execute ?
                   If LastErNum <> -2 Then
                   NoValueForvariable w$
                    Execute = 0
                     Exit Function
                     End If
                End If
               
        Else
        If VarStat Or NewStat Then
        p = 0
            GlobalVar w$, p, , VarStat
              If Not MaybeIsSymbol(b$, ",") Then b$ = " :" + b$
                    sss = Len(b$)
                GoTo again1
        End If
        
        
        ss$ = ""
        
         If MaybeIsSymbol(b$, "-+*/<~") Then
            If IsOperator(b$, "--") Then
                ss$ = "--"
            ElseIf IsOperator(b$, "-!") Then
                ss$ = "-!"
            ElseIf IsOperator(b$, "~") Then
                ss$ = "!!"
            ElseIf IsOperator(b$, "++") Then
                ss$ = "++"
            ElseIf FastSymbol(b$, "+=") Then
                ss$ = "+"
            ElseIf FastSymbol(b$, "/=") Then
                ss$ = "/"
            ElseIf FastSymbol(b$, "-=") Then
                ss$ = "-"
            ElseIf FastSymbol(b$, "*=") Then
                ss$ = "*"
            ElseIf FastSymbol(b$, "<=") Then
                ss$ = "g"
            Else
            GoTo parsecommand
            End If
again123456:
        If GetVar(bstack, w$, v, ss$ = "g") Then
        'NOT YET FOR PropReference
           If Typename(var(v)) = "PropReference" Then Execute = 0: Exit Function
        If Len(ss$) = 1 Then
                    If IsExp(bstack, b$, p) Then
                            On Error Resume Next
                            If Typename(var(v)) = "Group" Then
                            Select Case ss$
                                Case "g"
                                  If Not bstack.LastObj Is Nothing Then
                                If Typename(bstack.LastObj) = "Group" Then
                                  Set myobject = bstack.LastObj
                                        Set bstack.LastObj = Nothing
                             ss$ = HERE$
                                  HERE$ = ""
                                    ''  bstack.UseGroupname = var(V).GroupName
                                    UnFloatGroupReWriteVars basestack1, w$, v, myobject
                                    HERE$ = ss$
                                   '' Debug.Print SB(3)
                             
                                Else
                                '' maybe a block of itemd''
                                
                                  Execute = 0
                                End If
                        Else  '' make an upgrade
                                Execute = 0

                        End If
                            Case "="
                                  If Not bstack.LastObj Is Nothing Then
                                If Typename(bstack.LastObj) = "Group" Then
                                  Set myobject = bstack.LastObj
                                        Set bstack.LastObj = Nothing
                                    ss$ = bstack.UseGroupname
                                      bstack.UseGroupname = var(v).GroupName
                                    UnFloatGroupReWriteVars bstack, w$, v, myobject
                                    bstack.UseGroupname = ss$
                                   '' Debug.Print SB(3)
                             
                                Else
                                '' maybe a block of itemd''
                                
                                  Execute = 0
                                End If
                        Else  '' make an upgrade
                                Execute = 0

                        End If
                                Case Else
                                Execute = 0
                                Exit Do
                             End Select
                            ElseIf VarType(var(v)) = vbLong Then
                               Select Case ss$
                                Case "=", "g"
                                   If Not bstack.LastObj Is Nothing Then
                                If Typename(bstack.LastObj) = "Group" Then
                                  Set myobject = bstack.LastObj
                                        Set bstack.LastObj = Nothing
                                        UnFloatGroup bstack, w$, v, myobject
                                        Set myobject = Nothing
                                        If bstack.UseGroupname <> "" Then

                               
                                    
                                    End If
                                   '' Debug.Print SB(3)
                                   Else
                                   MissNumExpr
                                   Execute = 0
                                   End If
                                   Else
                                var(v) = CLng(p)
                                End If
                                      Case "+"
                                var(v) = CLng(p) + var(v)
                                Case "*"
                                 var(v) = CLng(p) * var(v)
                                Case "-"
                                var(v) = var(v) - CLng(p)
                                Case "/"
                                If p = 0 Then
                                   Execute = 0
                                   Exit Do
                                End If
                                ' only for long
                                 var(v) = var(v) \ CLng(p)
                               Case "!"
                                 var(v) = -1 - (var(v) <> 0)
                            End Select
                            
                            Else
                            Select Case ss$
                                Case "=", "g"
                                var(v) = p
                                Case "+"
                                var(v) = p + var(v)
                                Case "*"
                                 var(v) = p * var(v)
                                Case "-"
                                var(v) = var(v) - p
                                Case "/"
                                If p = 0 Then
                                   Execute = 0
                                   Exit Do
                                End If
                                 var(v) = var(v) / p
                                         Case "!"
                                 var(v) = -1 - (var(v) <> 0)
                                 End Select
                                  var(v) = MyRound(var(v), 13)
                            End If
                         
                            If Err.Number = 6 Then
                                Exit Do   'why ?
                          
                                             
                               End If
                               On Error GoTo 0
                    Else
        
                        If LastErNum <> -2 Then
                         NoValueForvariable w$
                         Execute = 0
                          Exit Do
                    
      
                    End If
              End If
        Else
        If ss$ = "++" Then
        var(v) = 1 + var(v)
        ElseIf ss$ = "--" Then
        var(v) = var(v) - 1
             ElseIf ss$ = "-!" Then
                    var(v) = -var(v)
                Else
                          var(v) = -1 - (var(v) <> 0)
        End If
     
        End If
        GoTo loopcontinue
        Else
        If v = -1 Then
         If Len(ss$) = 1 Then If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
                    
             If Not bstack.AlterVar(w$, p, ss$, False) Then Execute = 0: Exit Function
            GoTo loopcontinue
        Else
         If ss$ = "g" Then ss$ = "=":   GoTo again123456
        MyEr "", ""
        b$ = w$ + b$
        MyErMacro b$, "No such variable", "Äåí õðÜñ÷åé ôÝôïéá ìåôáâëçôÞ"
        sss = LLL
            End If
        End If


        Else
parsecommand:
            If VarStat Or NewStat Then GoTo errstat
            
               If Not Identifier(bstack, w$, b$) Then
               If LastErNum1 = -1 And bstack.IamThread Then Execute = 1 Else Execute = 0
               Exit Function
               Else
               If b$ <> "" Then lbl = Asc(b$) = 13
          If Len(HERE$) > 0 Then
          If Left$(HERE$, 1) = "!" Then
          HERE$ = Mid$(HERE$, 2): ohere$ = HERE$
          ConnectStatic bstack, HERE$
          End If
          End If
                            If bstack.LastComm <> "" Then
                                        Execute = bstack.LastExecute
                                        Once = bstack.LastOnce
                                        b$ = bstack.LastComm
                                         bstack.LastComm = ""
                                        Exit Function
                            ElseIf b$ = "" Then
                            Exit Do
                            End If
               End If
           
        End If
    End If
        
    
        End Select
      '  End If
    Else
   b$ = w$ & b$
    Execute = 0
         If FindNameForGroup(bstack, w$) Then
                 MyEr "Unknown Property " & w$, "¢ãíùóôç éäéüôçôá " & w$
                 Else
                MyEr "Unknown Variable " & w$, "¢ãíùóôç ìåôáâëçôÞ " & w$
                End If

    Exit Function
    End If

Case 2
If Not lbl Then b$ = w$ & b$: Exit Do
b$ = Mid$(b$, 2)
lbl = False
sss = Len(b$)
Case 3
If Left$(w$, 1) = "." Then
 ss$ = w$
IsLabel bstack, ss$, w$
End If

        ss$ = ""
        If FastSymbol(b$, ".") Then
        If GetVar(bstack, w$, v) Then  'GetlocalVar(w$, V) Then
             If MaybeIsSymbol(b$, "-+*/<~") Then
             b$ = var(v) + b$
             ElseIf MaybeIsSymbol(b$, "=") Then
             If Right$(var(v), 1) = ")" Then
              b$ = var(v) + b$
             Else
              b$ = var(v) + "<" + b$
              End If
             Else
             ' maybe is a
             b$ = var(v) + "." + b$
             IsLabelDot HERE$, b$, w$
            
              If MaybeIsSymbol(b$, "=") Then
              b$ = w$ + "<" + b$
              ElseIf MaybeIsSymbol(b$, "-+*/<~") Then
               b$ = w$ + b$
              Else
               b$ = w$ + " " + b$
              End If
             End If
              GoTo again3
        Else
         MyEr "Unknown Weak " & w$, "¢ãíùóôç éó÷íÞ " & w$
        End If
        End If
         If MaybeIsSymbol(b$, "=<") Then
            If FastSymbol(b$, "<=") Then
                ss$ = "g"  'global
            ElseIf FastSymbol(b$, "=") Then
            ss$ = "="
         End If
        End If
       

If ss$ <> "" Then

    If ss$ = "=" Then
    If VarStat Then
            If IsStrExp(bstack, b$, ss$) Then
                    GlobalVar w$, ss$, , VarStat
            Else
                    NoValueForvariable w$
                    Execute = 0
                    Exit Function
         End If
    Else
            If NewStat Then
                    If IsStrExp(bstack, b$, ss$) Then GlobalVar w$, ss$, , VarStat
            Else
            If bstack.ExistVar(w$) Then
           If IsStrExp(bstack, b$, ss$) Then bstack.SetVar w$, ss$ Else GoTo aproblem1
            
            ElseIf GetlocalVar(w$, v) Then
            
            
                If IsStrExp(bstack, b$, ss$) Then
                  If Typename(var(v)) = "PropReference" Then
                  var(v).Value = ss$
                  Else
                CheckVar var(v), ss$
                End If
                End If
            ElseIf IsStrExp(bstack, b$, ss$) Then
            
                GlobalVar w$, ss$, , VarStat
            
            End If
            End If
    End If
    Else    ' g
again12345:
          If GetVar(bstack, w$, v, ss$ = "g") Then
          
               If IsStrExp(bstack, b$, ss$) Then
               CheckVar var(v), ss$
               Else
               NoValueForvariable w$
               End If
            Else
            If ss$ = "g" Then ss$ = "":   GoTo again12345
            Nosuchvariable w$
          End If
    End If
Else
        If VarStat Or NewStat Then
            
            GlobalVar w$, ss$, , VarStat
            If Not MaybeIsSymbol(b$, ",") Then b$ = " :" + b$
          
                    sss = Len(b$)
                GoTo again1
                
        End If

                 NoValueForvariable w$
                    Execute = 0
                    Exit Function
End If
Case 4
If Left$(w$, 1) = "." Then
 ss$ = w$
IsLabel bstack, ss$, w$
End If
If MaybeIsSymbol(b$, "=-+*/<~") Then
    If FastSymbol(b$, "=") Then
    If VarStat Then
    
    If IsExp(bstack, b$, p) Then
                                       
                GlobalVar w$, p, , VarStat
                Else
                      If LastErNum <> -2 Then
                     NoValueForvariable w$
                    Execute = 0
                     Exit Function
                     End If
            
            End If
    Else
            If bstack.ExistVar(w$) Then
            If IsExp(bstack, b$, p) Then bstack.SetVar w$, Int(p) Else GoTo aproblem1
            
            ElseIf GetlocalVar(w$, v) Then
            
                If IsExp(bstack, b$, p) Then
                If Typename(var(v)) = "PropReference" Then
                        var(v).Value = Int(p)
                        Else
                 var(v) = Int(p)
                 End If
                If Err.Number = 6 Then Execute = 0: Exit Do
                On Error GoTo 0
                End If
            ElseIf IsExp(bstack, b$, p) Then
            p = Int(p)
            GlobalVar w$, p, , VarStat

          
                Else
                      If LastErNum <> -2 Then
aproblem1:
                     NoValueForvariable w$
                    Execute = 0
                     Exit Function
                     End If
            
            End If
    End If
    Else
        ss$ = ""
        If FastSymbol(b$, "+=") Then
        ss$ = "+"
        ElseIf FastSymbol(b$, "/=") Then
        ss$ = "/"
        ElseIf FastSymbol(b$, "-=") Then
        ss$ = "-"
        ElseIf FastSymbol(b$, "*=") Then
        ss$ = "*"
        ElseIf IsOperator(b$, "++") Then
        ss$ = "++"
        ElseIf IsOperator(b$, "--") Then
        ss$ = "--"
        ElseIf IsOperator(b$, "-!") Then
        ss$ = "-!"
        ElseIf IsOperator(b$, "~") Then
        ss$ = "!!"
        ElseIf FastSymbol(b$, "<=") Then
        ss$ = "g"
        End If
again1234567:
        If GetVar(bstack, w$, v, ss$ = "g") Then
        'NOT YET FOR PropReference
        If Typename(var(v)) = "PropReference" Then Execute = 0: Exit Function
            If Len(ss$) = 1 Then
                        If IsExp(bstack, b$, p) Then
                        
                                On Error Resume Next
                                Select Case ss$
                                Case "=", "g"
                                    var(v) = Int(p)
                                Case "+"
                                    var(v) = Int(p) + var(v)
                                Case "*"
                                    var(v) = Int(Int(p) * var(v))
                                Case "-"
                                    var(v) = var(v) - Int(p)
                                Case "/"
                                    If p = 0 Then Execute = 0: Exit Do
                                    var(v) = Int(var(v) / Int(p))
                                    
         
                   
                                End Select
                                If Err.Number = 6 Then Execute = 0: Exit Do
                                On Error GoTo 0
                        Else
                                Execute = 0: Exit Do
                        End If
            Else
                If ss$ = "++" Then
                    var(v) = 1 + var(v)
                ElseIf ss$ = "--" Then
                    var(v) = var(v) - 1
                ElseIf ss$ = "-!" Then
                    var(v) = -var(v)
                Else
                          var(v) = -1 - (var(v) <> 0)
                End If
  
            End If
            GoTo loopcontinue
     Else
        If v = -1 Then
         If Len(ss$) = 1 Then If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
                    
             If Not bstack.AlterVar(w$, p, ss$, True) Then Execute = 0: Exit Function
            
     GoTo loopcontinue
    Else
        If ss$ = "g" Then ss$ = "=":   GoTo again1234567
          MyEr "No value for variable " & w$, "×ùñßò ôéìÞ ç ìåôáâëçôÞ " & w$
       Execute = 0: Exit Function
       End If
      End If
   
    End If
Else
    If VarStat Or NewStat Then
        p = 0
        GlobalVar w$, p, , VarStat
        If Not MaybeIsSymbol(b$, ",") Then b$ = " :" + b$
        sss = Len(b$): GoTo again1
    Else
        MyEr "No value for variable " & w$, "×ùñßò ôéìÞ ç ìåôáâëçôÞ " & w$
        Execute = 0: Exit Function
    End If
End If
    
    

Case 5

If Asc(w$) = 46 Then
IsLabel bstack, (w$), w$
End If
If VarStat Or NewStat Then

MakeArray bstack, w$, 5, b$, pppp, NewStat, VarStat

 If Not MaybeIsSymbol(b$, ",") Then b$ = " :" + b$
        sss = Len(b$): GoTo again1
End If

If neoGetArray(bstack, w$, pppp) Then
If FastSymbol(b$, ")") Then
'need to found an expression
If FastSymbol(b$, "=") Then
    If IsExp(bstack, b$, p) Then
        If Not bstack.LastObj Is Nothing Then
        
            bstack.LastObj.CopyArray pppp
            Set bstack.LastObj = Nothing
            GoTo loopcontinue
        End If
    Else
        SyntaxError
    End If
    Execute = 0
    Exit Function
End If

ElseIf Not NeoGetArrayItem(pppp, bstack, w$, v, b$) Then
''MyEr "Error too", "ËÜèïò"
If LastErNum = -2 Then

Execute bstack, b$, True
Execute = 0: Exit Function
Else
Execute = 0
Exit Do
End If
End If
On Error Resume Next

If MaybeIsSymbol(b$, ":+-*/~") Then
With pppp

If IsOperator(b$, "++") Then
.item(v) = .item(v) + 1
GoTo loopcontinue
ElseIf IsOperator(b$, "--") Then
.item(v) = .item(v) - 1
GoTo loopcontinue
ElseIf FastSymbol(b$, "+=") Then
If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
.item(v) = .item(v) + p
ElseIf FastSymbol(b$, "-=") Then
If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
.item(v) = .item(v) - p
ElseIf FastSymbol(b$, "*=") Then
If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
.item(v) = .item(v) * p
ElseIf FastSymbol(b$, "/=") Then
If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
If p = 0 Then
 MyEr "division by zero", "äéáßñåóç ìå ôï ìçäÝí"
 Else
 .item(v) = .item(v) / p
End If
ElseIf IsOperator(b$, "-!") Then
.item(v) = -.item(v)
GoTo loopcontinue
ElseIf IsOperator(b$, "~") Then
.item(v) = -1 - (.item(v) <> 0)
GoTo loopcontinue
ElseIf FastSymbol(b$, ":=") Then

    If IsExp(bstack, b$, p) Then
        .item(v) = p
    ElseIf IsStrExp(bstack, b$, ss$) Then
      If Not IsObject(.item(v)) Then
          .item(v) = ss$
          Else
        CheckVar .item(v), ss$
        
        End If

    Else
        Exit Do
    End If
    If FastSymbol(b$, ",") Then v = v + 1: GoTo contarr
    GoTo loopcontinue
End If
.item(v) = MyRound(.item(v), 13)

End With
GoTo loopcontinue
End If
If IsOperator(b$, ".") Then

If Typename(pppp.item(v)) = "Group" Then
Execute = SpeedGroup(bstack, pppp, "", w$, b$, v)
If Execute = 0 Then
Exit Function

End If
GoTo loopcontinue
End If

ElseIf Not FastSymbol(b$, "=", True) Then


sss = 0
GoTo loopagain
End If
If Not IsExp(bstack, b$, p) Then
If LastErNum = -2 Then
Execute bstack, b$, True
Else
MissNumExpr
End If
Execute = 0: Exit Function
End If
     If Not bstack.LastObj Is Nothing Then
     Set myobject = pppp.GroupRef
     If pppp.IHaveClass Then
     bstack.soros.PushObj bstack.LastObj
     If Typename(pppp.item(v)) = "Empty" Then
     Set pppp.item(v) = New Group
     End If
     
     SpeedGroup bstack, pppp, "@READ ", w$, "", v
     Else
     Set pppp.item(v) = bstack.LastObj
     End If
     Set pppp.item(v).LinkRef = myobject
     Set bstack.LastObj = Nothing
     Else
pppp.item(v) = p
End If
Do While FastSymbol(b$, ",")
If pppp.UpperMonoLimit > v Then
v = v + 1

If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
  If Not bstack.LastObj Is Nothing Then
     Set myobject = pppp.GroupRef
     If pppp.IHaveClass Then
     bstack.soros.PushObj bstack.LastObj
     SpeedGroup bstack, pppp, "@READ ", w$, "", v
     Else
     Set pppp.item(v) = bstack.LastObj
     End If
     Set pppp.item(v).LinkRef = myobject
     Set bstack.LastObj = Nothing
     Else
pppp.item(v) = p
End If
Else
Exit Do
End If
Loop
Else
If GetSub(w$ + ")", I) Then
Else
b$ = ss$ + b$
GoTo autogosub
MyEr "Can't find array " & w$ & ")", "Äåí âñßóêù ðßíáêá " & w$ & ")"
Execute = 0: Exit Function
End If
End If
Case 6
If Asc(w$) = 46 Then
IsLabel bstack, (w$), w$
End If
If VarStat Or NewStat Then
MakeArray bstack, w$, 6, b$, pppp, NewStat, VarStat
 If Not MaybeIsSymbol(b$, ",") Then b$ = " :" + b$
        sss = Len(b$): GoTo again1
End If
If neoGetArray(bstack, w$, pppp) Then
    If FastSymbol(b$, ")") Then
    'need to found an expression - HEREHERE
        If FastSymbol(b$, "=") Then
            If IsStrExp(bstack, b$, w$) Then
                If Not bstack.LastObj Is Nothing Then
                    bstack.LastObj.CopyArray pppp
                    Set bstack.LastObj = Nothing
                    GoTo loopcontinue
                End If
            Else
                SyntaxError
            End If
            Execute = 0
            Exit Function
        End If
        End If

If Not NeoGetArrayItem(pppp, bstack, w$, v, b$) Then Execute = 0: Exit Function
On Error Resume Next

If Not FastSymbol(b$, "=") Then
  If FastSymbol(b$, ":=") Then   ''????????????
contarr:
    ss$ = Left$(aheadstatus(b$), 1)
        If ss$ = "S" Then
        If Not IsStrExp(bstack, b$, ss$) Then Execute = 0:   Exit Function
        Else
        If Not IsExp(bstack, b$, p) Then Execute = 0:   Exit Function
        ss$ = Trim$(Str$(p))
        End If
             If Not IsObject(pppp.item(v)) Then
          pppp.item(v) = ss$
          Else
        CheckVar pppp.item(v), ss$
        
        End If
        Do While FastSymbol(b$, ",")
        If pppp.UpperMonoLimit > v Then
        v = v + 1
          ss$ = Left$(aheadstatus(b$), 1)
                        If ss$ = "S" Then
        If Not IsStrExp(bstack, b$, ss$) Then Execute = 0:   Exit Function
        Else
        If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
        ss$ = Trim$(Str$(p))
        End If
        
                If Not IsObject(pppp.item(v)) Then
                  pppp.item(v) = ss$
                  Else
                  
                  
                CheckVar pppp.item(v), ss$
                
                End If
        Else
        Exit Do
        End If
        Loop
   
    Else
        Execute = 0: Exit Function
    End If
Else
If Not IsStrExp(bstack, b$, ss$) Then
     Execute = 0: Exit Function
     End If
    If Not IsObject(pppp.item(v)) Then
        pppp.item(v) = ss$
    Else
        CheckVar pppp.item(v), ss$
    End If
        Do While FastSymbol(b$, ",")
        If pppp.UpperMonoLimit > v Then
        v = v + 1
        If Not IsStrExp(bstack, b$, ss$) Then Execute = 0: Exit Function
        
        If Not IsObject(pppp.item(v)) Then
          pppp.item(v) = ss$
          Else
        CheckVar pppp.item(v), ss$
        
        End If
        Else
        Exit Do
        End If
        Loop
End If
Else
Execute = 0: Exit Function
End If
Case 7
If Asc(w$) = 46 Then
IsLabel bstack, (w$), w$
End If
If VarStat Or NewStat Then
MakeArray bstack, w$, 7, b$, pppp, NewStat, VarStat
 If Not MaybeIsSymbol(b$, ",") Then b$ = " :" + b$
        sss = Len(b$): GoTo again1
End If
If neoGetArray(bstack, w$, pppp) Then
    If FastSymbol(b$, ")") Then
    'need to found an expression
        If FastSymbol(b$, "=") Then
            If IsExp(bstack, b$, p) Then
                If Not bstack.LastObj Is Nothing Then
                    bstack.LastObj.CopyArray pppp
                    Set bstack.LastObj = Nothing
                    GoTo loopcontinue
                End If
            Else
                SyntaxError
            End If
            Execute = 0
            Exit Function
        End If
        End If

If Not NeoGetArrayItem(pppp, bstack, w$, v, b$) Then Execute = 0: Exit Function
On Error Resume Next
If MaybeIsSymbol(b$, "+-*/~") Then
With pppp
If IsOperator(b$, "++") Then
.item(v) = .item(v) + 1
ElseIf IsOperator(b$, "--") Then
.item(v) = .item(v) - 1
ElseIf FastSymbol(b$, "+=") Then
If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
.item(v) = .item(v) + Int(p)
ElseIf FastSymbol(b$, "-=") Then
If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
.item(v) = .item(v) - Int(p)
ElseIf FastSymbol(b$, "*=") Then
If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
.item(v) = .item(v) * Int(p)
ElseIf FastSymbol(b$, "/=") Then
If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
If Int(p) = 0 Then
 MyEr "division by zero", "äéáßñåóç ìå ôï ìçäÝí"
 Else
 .item(v) = Int(.item(v) / Int(p))
End If
ElseIf IsOperator(b$, "-!") Then
.item(v) = -.item(v)
ElseIf IsOperator(b$, "~") Then
.item(v) = -1 - (.item(v) <> 0)
End If
End With
GoTo loopcontinue
End If
If Not FastSymbol(b$, "=") Then Execute = 0: Exit Function
If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
p = Int(p)
If Err.Number > 0 Then Execute = 0: Exit Function
pppp.item(v) = p
Do While FastSymbol(b$, ",")
If pppp.UpperMonoLimit > v Then
v = v + 1
If Not IsExp(bstack, b$, p) Then Execute = 0: Exit Function
pppp.item(v) = p
Else
Exit Do
End If
Loop
Else
Execute = 0: Exit Function
End If
Case Else

If MaybeIsSymbol(b$, ".") Then
b$ = NLtrim$(b$)
        nd& = Len(b$)
        If bstack.GetDot(b$, (1)) Then
            
                   
           sss = (Len(b$) - nd&) + sss
           LLL = (Len(b$) - nd&) + LLL
        End If
        GoTo again2
End If
If MaybeIsSymbol(b$, ",-+*/_!@()[];<>|~`0123456789") Then
SyntaxError
Execute = 0
Exit Function
End If
End Select
loopcontinue:
HERE$ = ohere$
If Once And Not jump Then Exit Do
loopagain:
If linebyline Then Exit Do
Loop

''If B$ = "" Or ONCE Then
 ''Execute = 1
''End If
If linebyline Then
With bstack
.IFCTRL = IFCTRL
.jump = jump
End With
End If
Exit Function
errstat1:
MyEr "Missing module name", "Ëåßðåé üíïìá ôìÞìáôïò"
     Execute = 0: Exit Function
errstat:
MyEr "Missing variable name", "Ëåßðåé üíïìá ìåôáâëçôÞò"
     Execute = 0: Exit Function
LONGERR:
    If Err.Number = 6 Then
            Execute = 0
            MyEr "OverFlow Long", "Yðåñ÷åßëéóç ìáêñý"
            
            End If
End Function
Function GoFunc(mystack As basetask, what$, rest$, vl As Variant) As Boolean
Dim p As Double, I As Long, s$, it As Long, pa$
Dim x1 As Long, frm$, par As Boolean, ohere$, w$
Dim vars As Long, vname As Long, subs As Long, snames As Long
Dim threads As Long, vvv As Variant

Dim basestack As basetask
' get a reference to Parent task
Set basestack = mystack.Parent
ohere$ = HERE$

If iRVAL(HERE$, 1) > funcdeep Then
    MyEr "Function's Stack is Full - 15", "Ç óôïßâá ôùí óõíáñôÞóåùí Ý÷åé ãåìßóåé - 15"
    Set basestack = Nothing
    GoFunc = False: Exit Function
End If
' get parameters here
' if we can expose Rest$ to functions in functions then we can programmaticaly
' change how to interpret the parameter list or whatever is...Maybe. Is a think
pa$ = mystack.UseGroupname
mystack.UseGroupname = basestack.UseGroupname
'' CHECK THIS -- WHY ??
mystack.StaticInUse = basestack.StaticInUse
Set mystack.StaticCollection = basestack.StaticCollection
mystack.Look2Parent = True  ' new workaround for passing &this to function
 If Not PushParamGeneralV7(mystack, rest$) Then
 Exit Function
 End If
 
 mystack.Look2Parent = False
  mystack.UseGroupname = pa$
If InStr(what$, "(") > 0 Then
If GetSub(what$, x1) Then  'get the reference x1 for function (functions and modules are in an array)
    ' here we change NameSpace
    If HERE$ = "" Then  ' from the command line
If ohere$ = "" Then HERE$ = what$
    Else  ' from other...maybe the same... so make an increment by 1 to an index in the name.
    HERE$ = RVAL(HERE$, 1) & "." & Trim$(what$)
    End If
End If
Else
If HERE$ = "" Then
If GetSub(what$, x1) Then
  HERE$ = RVAL(HERE$, 1)
End If
ElseIf GetlocalSub(what$, x1) Then
 HERE$ = RVAL(HERE$, 1)
'ElseIf GetlocalSubExtra(what$, x1) Then
'HERE$ = RVAL(HERE$, 1)
 ElseIf GetSub(what$, x1) Then
  HERE$ = RVAL(HERE$, 1)
End If
End If
If basestack.StaticCollection.Count > 0 Then
If what$ <> mystack.StaticInUse Then
If StripRVAL(HERE$) & "." & mystack.StaticInUse = what$ Then
    Set mystack.StaticCollection = basestack.StaticCollection
    
Else
            If basestack.ExistVar("%_" + what$) Then
                   basestack.ReadVar "%_" + what$, vvv
                   If IsObject(vvv) Then Set mystack.StaticCollection = vvv
                    Set vvv = Nothing
                 End If
        mystack.StaticInUse$ = what$
End If
Else
            mystack.StaticInUse$ = what$
End If
 End If
If HERE$ <> ohere$ Or mystack.IamChild Then     ' so now we check that we are in an new namespace...

' this system must change.. and become member of a basetask

' these are for safety
vname = varhash.Count
vars = var2used
subs = sb2used: snames = subHash.Count
I = 1: FK$(13) = ""


Dim ok As Boolean, nokillvars As Boolean
nokillvars = basestack.nokillvars: basestack.nokillvars = False
I = preProcessor(mystack, sbf(x1).sb)
If Mid$(sbf(x1).sb, I) = "" Then
GoFunc = True
GoTo there1234
End If
   mystack.OriginalName$ = HERE$
Do
    mystack.UseGroupname = sbf(x1).sbgroup
    frm$ = Mid$(sbf(x1).sb, I)
    it = 1
Call executeblock(it, mystack, frm$, False, ok)
    Select Case it ''Execute(mystack, frm$, False)
    Case 0
    Set mystack.LastObj = Nothing
Set mystack.FuncObj = Nothing
        mystack.ThrowThreads  ' always throw threads
    If Not NERR Then   ' Nerr = true from command ERROR 0 means Fatal Error, shows a message and act as a crash!
            If mystack.UseGroupname <> "" Then
If InStr(mystack.UseGroupname, ChrW(&H1FFF)) > 0 Then
pa$ = GetNextLine((sbf(mystack.OriginalCode).sb))
FK$(13) = Mid$(pa$, 7) + "-" + CStr(Len(NLtrim$(frm$)) - 2)
MyErMacro rest$, "Problem in class", "Ðñüâëçìá óôç êëÜóç"
GoFunc = True
GoTo there1234
End If

        End If
    ''pa$ = "EDIT " & what$ & ", 1" ''& CStr(Len(sbf(x1).sb))
     pa$ = "EDIT " & StripRVAL(HERE$) & ", " + CStr(Len(sbf(x1).sb))
        If Left$(sbf(x1).sb, 10) = "'11001EDIT" Then
          pa$ = Mid$(GetNextLine(sbf(x1).sb), 7) ''+ "+1"
             sbf(x1).sb = Mid$(sbf(x1).sb, 3) ' needed because we measure length...look the preparation of Shift F1 below
            If InStrRev(HERE$, ".") > 0 Then
            ' any fucntion defined inside module or function has this direction
                MyEr "in function " & Mid$(what$, InStrRev(what$, ".") + 1), "óôç óõíÜñôçóç " & Mid$(what$, InStrRev(what$, ".") + 1)
            Else
                MyEr "in function " & what$, "óôç óõíÜñôçóç " & what$
            End If
        Else
        If Right$(HERE$, 1) = ")" Then
        MyEr "in function " & Left$(what$, Len(what$) - 1), "óôç óõíÜñôçóç " & Left$(what$, Len(what$) - 1)
        Else
        MyEr "in module " & HERE$, "óôï ôìçìá " & HERE$
        End If
        
        End If
        If (Len(sbf(x1).sb) - Len(frm$)) < 0 Then ' Maybe in a galaxy far away
            FK$(13) = pa$
        Else  ' Or in Earth
            If pa$ = "" Then
            ' no we have nothig....??? when??

            Else
                ' prepare Shift F1 for a jump to the point of interest..the faulty one
                '
             
                If InStr(FK$(13), ",") > 0 Then
                 GoTo there1234
                    If Left$(pa$, InStr(pa$, ",")) = Left$(FK$(13), InStr(FK$(13), ",")) Then GoTo there1234
                 ''pa$ = pa$ + "+2"
                 ''''DropLeft ",", FK$(13)
                   '' If FK$(13) <> "" Then FK$(13) = "+" & FK$(13)
                    
                End If

                    If (Len(sbf(x1).sb) - Len(frm$)) < 0 Then
                    FK$(13) = pa$
                    Else
                    DropLeft ",", FK$(13)
                    If FK$(13) <> "" Then FK$(13) = "+" & FK$(13)
                               If sbf(x1).sbgroup <> "" Then
                    FK$(13) = pa$ & "-" & CStr(Len(frm$) - 2) + FK$(13)
                    Else
                    FK$(13) = pa$ & "-" & CStr(Len(frm$)) + FK$(13)
                    End If
                   
                    End If
 
 
            End If
        End If
there1234:
       If LastErNum = 0 Then MyErMacro rest$, "", ""
    End If
    GoFunc = False
  ' üëá áõôÜ èá ðÜíå óôï Basestack
  If what$ <> mystack.StaticInUse Then
  ElseIf mystack.StaticCollection.Count > 0 Then
  Set vvv = mystack.StaticCollection
   basestack.SetVar "%_" + mystack.StaticInUse, vvv
   Set vvv = Nothing
   End If
   'Set mystack.StaticCollection = Nothing
    'mystack.StaticInUse$ = ""
    HERE$ = ohere$

    var2used = vars
         varhash.ReduceHash vname, var()
If UBound(var()) / 3 >= var2used And UBound(var()) > 99 Then

    ReDim Preserve var(UBound(var()) / 2 + 1) As Variant

End If
 
 sb2used = subs
 subHash.ReduceHash snames, sbf()
  If UBound(sbf()) / 3 > sb2used And UBound(sbf()) > 99 Then
            ReDim Preserve sbf(UBound(sbf()) / 2 + 1) As modfun
    End If
  
   If Not basestack.soros Is mystack.soros Then
   End If
    basestack.soros.MergeTop mystack.soros


    Exit Do
Case 1, 3
HERE$ = mystack.OriginalName$
  mystack.ThrowThreads
''''  If Not mystack.FuncObj Is Nothing Then
Set mystack.LastObj = mystack.FuncObj
Set mystack.FuncObj = Nothing
''End If
    If IsObject(mystack.LastObj) Then
                 If mystack.LastObj Is Nothing Then
                 vl = mystack.FuncValue
                 Else
                Set basestack.LastObj = mystack.LastObj
                 End If
    Else
              vl = mystack.FuncValue
    End If
      If what$ <> mystack.StaticInUse Then
  ElseIf mystack.StaticCollection.Count > 0 Then
  Set vvv = mystack.StaticCollection
   basestack.SetVar "%_" + mystack.StaticInUse, vvv
   Set vvv = Nothing
   End If
   'Set mystack.StaticCollection = Nothing
    'mystack.StaticInUse$ = ""
    HERE$ = ohere$
    If FastSymbol(rest$, ")") Then GoFunc = True
     If Not nokillvars Then
    var2used = vars
 varhash.ReduceHash vname, var()
If UBound(var()) / 3 >= var2used And UBound(var()) > 99 Then
    ReDim Preserve var(UBound(var()) / 2 + 1) As Variant
    
End If

      sb2used = subs
 subHash.ReduceHash snames, sbf()
  If UBound(sbf()) / 3 > sb2used And UBound(sbf()) > 99 Then
            ReDim Preserve sbf(UBound(sbf()) / 2 + 1) As modfun
    End If
    End If

    Exit Do
Case 2
  mystack.ThrowThreads  ' for safety...
    I = 1

                        If frm$ <> "" Then
                             If frm$ = Chr$(0) Then
                                     If basestack.IsInRetStackNumber(p) Then I = Len(sbf(x1).sb) - CLng(p) + 1
                             Else
                                 If InStr(frm$, vbCr) > 0 Then
                                         I = rinstr(sbf(x1).sb, frm$)
                                         If I = 0 Then I = Len(sbf(x1).sb) + 1
                                          Else
                                          I = PosLabel(frm$, sbf(x1).sb)
                                         End If
                             End If
                     End If
 
    
End Select

Loop
Else
rest$ = what$ & " " & rest$
GoFunc = False
End If
End Function
Sub stackshow(b As basetask)
Dim p As Double, r$, AL$, s$, dl$, dl2$  ', X As Index
Static Once As Boolean, ok As Boolean
If Once Then Exit Sub
Once = True
If TestShowCode Then
With Form2.testpad
.Enabled = True
.SelectionColor = rgb(255, 64, 128)
.nowrap = True
.Text = TestShowSub
.mdoc.WrapAgainColor
If AscW(Form2.Label1(1)) = 8191 Then
.SelStartSilent = TestShowStart - 1 ''Len(Mid$(Form2.Label1(1), 7)) - 1
.SelLength = Len(Mid$(Form2.Label1(1), 7))
Else
.SelStartSilent = TestShowStart - Len(Form2.Label1(1)) - 1
.SelLength = Len(Form2.Label1(1))
End If

.Enabled = False
If .SelLength > 1 And Not AscW(Form2.Label1(1)) = 8191 Then
If Not myUcase(.SelText, True) = Form2.Label1(1) Then

End If
End If
''Debug.Print b.addlen
MyDoEvents
End With

Once = False
Exit Sub
Else
Form2.testpad.nowrap = False
End If




Dim Stack As mStiva
Set Stack = b.soros

If Form2.compute <> "" Then
dl$ = Form2.compute
With Form2.testpad
.Enabled = True
.ResetSelColors
''
.nowrap = False
''
End With
Do
dl2 = dl$
ok = False
If FastSymbol(dl$, ")") Then
ok = True
ElseIf IsExp(b, dl$, p) Then

    AL$ = Left$(dl2$, Len(dl2$) - Len(dl$)) & "=" & CStr(p) & "," & AL$
    ok = True
    ElseIf IsStrExp(b, dl$, s$) Then
    AL$ = Left$(dl2$, Len(dl2$) - Len(dl$)) & "=" & Chr(34) + s$ & Chr(34) & "," & AL$
    ok = True
    ElseIf InStr(dl$, ",") > 0 Then
       If InStr(dl$, Chr(2)) > 0 Then
     r$ = GetStrUntil(Chr(2), dl$, False)
     s$ = "<"
If ISSTRINGA(dl$, r$) Then If pagio$ <> "GREEK" Then s$ = s$ & r$
If ISSTRINGA(dl$, r$) Then If pagio$ = "GREEK" Then s$ = s$ & r$
AL$ = s$ & ">" & AL$
ok = True
Else
AL$ = AL$ & " " & GetStrUntil(",", dl$)
    
     dl$ = ""
  
End If
    
    ok = True
    ElseIf dl$ <> "" Then
      If InStr(dl$, Chr(2)) > 0 Then
     r$ = GetStrUntil(Chr(2), dl$, False)
     s$ = "<"
If ISSTRINGA(dl$, r$) Then If pagio$ <> "GREEK" Then s$ = s$ & r$
If ISSTRINGA(dl$, r$) Then If pagio$ = "GREEK" Then s$ = s$ & r$
AL$ = s$ & ">" & AL$
ok = True
Else
     AL$ = AL$ & " " & dl$
     dl$ = ""
  
End If

    End If
    
DropLeft ",", dl$

Loop Until Not ok
End If
If AL$ <> "" Then AL$ = AL$ & vbCrLf
If pagio$ = "GREEK" Then
AL$ = AL$ & "ÓÙÑÏÓ "
Else
AL$ = AL$ & "STACK "
End If
Dim I As Long

Do
I = I + 1
If Stack.Total < I Then Exit Do
If Stack.StackItemType(I) = "N" Then
AL$ = AL$ & CStr(Stack.StackItem(I)) & " "
ElseIf Stack.StackItemType(I) = "S" Then
r$ = Stack.StackItem(I)
    If Len(r$) > 78 Then
    AL$ = AL$ & Chr(34) + Left$(r$, 75) & "..." & Chr(34)
    Else
    AL$ = AL$ & Chr(34) + r$ & Chr(34)
    End If
Else
AL$ = AL$ & Stack.StackItemTypeObjectType(I) & " "
End If
Loop
With Form2
    .gList1.BackColor = &H3B3B3B
        .Label1(2) = .Label1(2)
    
        .testpad.Enabled = True
        .testpad.Text = AL$
        .testpad.SetRowColumn 1, 1
        .testpad.Enabled = False
End With
Once = False
End Sub
Function RepPara(basestack As basetask, rest$) As Boolean
Dim x1 As Long, y1 As Long, I As Long, j As Long
Dim x As Double, y As Double, ss$, s$, what$
Dim pppp As mArray
RepPara = True
        If Not IsExp(basestack, rest$, y) Then
            MissNumExpr
            RepPara = False
            Exit Function
        Else
         If FastSymbol(rest$, ",") Then
                    If IsExp(basestack, rest$, x) Then
                        x = Int(x)
                        If x < 1 Then
                        MyErMacro rest$, "the index base must be >=1", "ç âÜóç äåßêôç ðñÝðåé íá åßíáé >=1"
                        Exit Function
                        End If
                     
                    End If
            Else
                x = 0
            End If
        
           
            x1 = Abs(IsLabel(basestack, rest$, what$))
            If x1 = 3 Then
                    If GetVar(basestack, what$, I) Then
                            If Typename(var(I)) = doc Then
                                    If Not FastSymbol(rest$, "=") Then
                                        MissSymbolMyEr "="
                                        RepPara = False
                                        Exit Function
                                    Else
                                            If Not IsStrExp(basestack, rest$, what$) Then
                                                MissStringExpr
                                                RepPara = False
                                                Exit Function
                                            Else
                                            
                                            s$ = GetNextLine(what$)
                                                 j = var(I).ParagraphFromOrder(y)
                                                 If j = -1 Then
                                                        
                                                           MyErMacro rest$, "no such paragraph " & CStr(y), "äåí õðÜñ÷åé ôÝôïéá ðáñÜãñáöïò " & CStr(y)
                                                         Exit Function
                                                Else
                                                If x > 1 Then
                                                If what$ = "" Then
                                                
                                                ss$ = var(I).TextParagraph(j)
                                                
                                                s$ = Left(ss$ + Space$(x - 1), x - 1) + s$ + Mid$(ss$, Len(s$) + x)
                                                Else
                                                
                                                s$ = Left(var(I).TextParagraph(j) + Space$(x - 1), x - 1) + s$
                                                
                                                End If
                                            
                                                End If
                                                ''var(i).ReWritePara j, s$
                                                var(I).TextParagraph(j) = s$
                                                SetNextLine what$
                                                While what$ <> ""
                                                    s$ = GetNextLine(what$)
                                                    y = y + 1
                                                    j = var(I).ParagraphFromOrder(y)
                                                    If j = -1 Then
                                                        var(I).AppendParagraph s$
                                                    Else
                                                        If what$ = "" Then s$ = s$ + Mid$(var(I).TextParagraph(j), Len(s$) + 1)
                                                        ''var(i).ReWritePara j, s$
                                                        var(I).TextParagraph(j) = s$
                                                    End If
                                                    SetNextLine what$
                                                Wend
                                                
                                                End If
                                            End If
                                    End If
                            Else
                                 MissingDoc   ' only doc not string var
                                 RepPara = False
                                Exit Function
                            End If
                    Else
                        Nosuchvariable what$
                        RepPara = False
                        Exit Function
                    End If
            ElseIf x1 = 6 Then
                    If neoGetArray(basestack, what$, pppp) Then
                        If Not NeoGetArrayItem(pppp, basestack, what$, I, rest$) Then RepPara = False: Exit Function
                        If Typename(pppp.item(I)) = doc Then
                                    If Not FastSymbol(rest$, "=") Then
                                            MissSymbolMyEr "="
                                            RepPara = False
                                            Exit Function
                                            Else
                                If IsStrExp(basestack, rest$, what$) Then
                                            s$ = GetNextLine(what$)
                                                 j = pppp.item(I).ParagraphFromOrder(y)
                                                 
                                                If j = -1 Then
                                            
                                               MyErMacro rest$, "no such paragraph " & CStr(y), "äåí õðÜñ÷åé ôÝôïéá ðáñÜãñáöïò " & CStr(y)
                                             Exit Function
                                             Else
                                                If x > 1 Then
                                                    If what$ = "" Then
                                                        ss$ = pppp.item(I).TextParagraph(j)
                                                        s$ = Left(ss$ + Space$(x - 1), x - 1) + s$ + Mid$(ss$, Len(s$) + x)
                                                    Else
                                                        s$ = Left(pppp.item(I).TextParagraph(j) + Space$(x - 1), x - 1) + s$
                                                    End If
                                                End If
                                                ''pppp.item(i).ReWritePara j, s$
                                                pppp.item(I).TextParagraph(j) = s$
                                                SetNextLine what$
                                                While what$ <> ""
                                                    s$ = GetNextLine(what$)
                                                    
                                                    y = y + 1
                                                    j = pppp.item(I).ParagraphFromOrder(y)
                                                    If j = -1 Then
                                                    
                                                    pppp.item(I).AppendParagraph s$
                                                    Else
                                                    
                                                    If what$ = "" Then s$ = s$ + Mid$(pppp.item(I).TextParagraph(j), Len(s$) + 1)
                                                    
                                                   '' pppp.item(i).ReWritePara j, s$
                                                     pppp.item(I).TextParagraph(j) = s$
                                                    End If
                                                    SetNextLine what$
                                                Wend
                                                
                                              End If
                                Else
                                    MissStringExpr
                                    RepPara = False
                                    Exit Function
                                
                                End If

                            End If
                        Else
                             MissingDoc   ' only doc not string var
                             RepPara = False
                            Exit Function
                        End If
                    End If
            Else
                MissingDoc   ' only doc not string var
                RepPara = False
                Exit Function
            End If
        End If
End Function
Function IdPara(basestack As basetask, rest$, lang As Long) As Boolean
Dim x1 As Long, y1 As Long, I As Long, it As Long, vvl As Variant
Dim x As Double, y As Double, s$, what$, W3 As Long, W4 As Long
Dim xa As Long, ya As Long
Dim pppp As mArray


IdPara = True
If IsLabelSymbolNew(rest$, "ÓÔÏ", "TO", lang) Then
        If Not IsExp(basestack, rest$, y) Then
            MissNumExpr
            IdPara = False
            Exit Function
        Else
        
          y = y - 1
                     If y < 0 Then y = -1
         If FastSymbol(rest$, ",") Then
                    If IsExp(basestack, rest$, x) Then
                        x = Int(x)
                        If x < 1 Then
                        MyErMacro rest$, "the index base must be >=1", "ç âÜóç äåßêôç ðñÝðåé íá åßíáé >=1"
                        ' not needed to change idpara must be true because macro embed an ERROR command
                        Exit Function
                        End If
                   
                    End If
                    
            Else
                x = 0
            End If
        
            x1 = Abs(IsLabel(basestack, rest$, what$))
            If x1 = 3 Then
                    If GetVar(basestack, what$, I) Then
                        If Typename(var(I)) = doc Then
                                If Not FastSymbol(rest$, "=") Then
                                    MissSymbolMyEr "="
                                    IdPara = False
                                    Exit Function
                                Else
                                    If Not IsStrExp(basestack, rest$, s$) Then
                                        MissStringExpr
                                        IdPara = False
                                        Exit Function
                                    Else
                                    If y = -1 Then
                                    y = var(I).DocParagraphs
                                    End If
                                   If var(I).ParagraphFromOrder(y + 1) = -1 Then
                                   CheckVar var(I), s$
                                    ElseIf y < 1 Then
                        
                                    var(I).InsertDoc var(I).ParagraphFromOrder(1), CLng(x), s$
                                    Else
                                    var(I).InsertDoc var(I).ParagraphFromOrder(y + 1), CLng(x), s$
                                    End If
                                    End If
                                End If
                        Else
                             MissingDoc   ' only doc not string var
                             IdPara = False
                            Exit Function
                        End If
                    Else
                        Nosuchvariable what$
                        IdPara = False
                        Exit Function
                    End If
            ElseIf x1 = 6 Then
                    If neoGetArray(basestack, what$, pppp) Then
                        If Not NeoGetArrayItem(pppp, basestack, what$, it, rest$) Then IdPara = False: Exit Function
                        If Typename(pppp.item(it)) = doc Then
                                    If Not FastSymbol(rest$, "=") Then
                                            MissSymbolMyEr "="
                                            IdPara = False
                                            Exit Function
                                            Else
                                If IsStrExp(basestack, rest$, s$) Then
                                
                                
                                    If pppp.item(it).ParagraphFromOrder(y + 1) = -1 Then
                                       CheckVar pppp.item(it), s$
                                        ElseIf y < 1 Then
                                      
                                        pppp.item(it).InsertDoc pppp.item(it).ParagraphFromOrder(1), CLng(x), s$
                                        Else
                                        pppp.item(it).InsertDoc pppp.item(it).ParagraphFromOrder(y + 1), CLng(x), s$
                                        End If
                                
                                
                                
                                Else
                                    MissStringExpr
                                    IdPara = False
                                    Exit Function
                                
                                End If

                            End If
                        Else
                             MissingDoc   ' only doc not string var
                             IdPara = False
                            Exit Function
                        End If
                    End If
            Else
                MissingDoc   ' only doc not string var
                IdPara = False
                Exit Function
            End If
        End If
 ElseIf IsExp(basestack, rest$, x) Then
    x = Int(x)
    If x < 1 Then
    MyErMacro rest$, "the index base must be >=1", "ç âÜóç äåßêôç ðñÝðåé íá åßíáé >=1"
    ' not needed to change idpara must be true because macro embed an ERROR command
    Exit Function
    End If
    If FastSymbol(rest$, ",") Then
        If Not IsExp(basestack, rest$, y) Then
        MissNumExpr
        IdPara = False
        Exit Function
        End If
        y = Int(y)
        If y < 0 Then
            MyErMacro rest$, "number to delete chars must positive or zero", "ï áñéèìüò ãéá íá äéáãñÜøù ðñÝðåé íá åßíáé èåôéêüò Þ ìçäÝí"
            Exit Function
        End If
    Else
    y = 0  ' only insert
    End If

     x1 = Abs(IsLabel(basestack, rest$, what$))
        If x1 = 3 Then
            If GetVar(basestack, what$, I) Then
        
                If Typename(var(I)) = doc Then
                    If Not FastSymbol(rest$, "=") Then
                    MissSymbolMyEr "="
                    IdPara = False
                    Exit Function
                    Else
                            If Not IsStrExp(basestack, rest$, s$) Then
                                MissStringExpr
                                IdPara = False
                                Exit Function
                            Else
                                    If y = 0 Then
                                           var(I).FindPos 1, 0, CLng(x), x1, y1, W3, W4
                                           If W4 = 0 Then
                                          ' ' merge to previous
                                           End If
       
                                    Else
                                             var(I).FindPos 1, 0, x + y, x1, y1, W3, W4
                                            ' so now we now the paragraph w3 and the position w4
                                            var(I).BackSpaceNchars W3, W4, y
                                    End If
                                    If s$ <> "" Then var(I).InsertDoc W3, W4, s$
                            End If
                     End If
                Else
                    If Not FastSymbol(rest$, "=") Then
                    MissSymbolMyEr "="
                    IdPara = False
                    Exit Function
                    Else
                    If Not IsStrExp(basestack, rest$, s$) Then
                                MissStringExpr
                                IdPara = False
                                Exit Function
                            Else
                                    If y = 0 Then
                                        var(I) = Left$(var(I), x - 1) & s$ & Mid$(var(I), x)
                                    Else
                                        If s$ = "" Then
                                        var(I) = Left$(var(I), x - 1) & Mid$(var(I), x + y)
                                        Else
                                        Mid$(var(I), x, y) = s$
                                        End If
                                    End If
                            End If
                    End If
                
                End If
            Else
            Nosuchvariable what$
            IdPara = False
            Exit Function
            
            End If
        ElseIf x1 = 6 Then
        
        
        If neoGetArray(basestack, what$, pppp) Then
                If Not NeoGetArrayItem(pppp, basestack, what$, it, rest$) Then IdPara = False: Exit Function
                If Typename(pppp.item(it)) = doc Then
                    If FastSymbol(rest$, "=") Then
                        If IsStrExp(basestack, rest$, s$) Then
                      If y = 0 Then
                                     pppp.item(it).FindPos 1, 0, CLng(x), xa, ya, W3, W4
                                           If W4 = 0 Then
                                          ' ' merge to previous
                                           End If

                      Else
                                     pppp.item(it).FindPos 1, 0, x + y, xa, ya, W3, W4
                                            ' so now we now the paragraph w3 and the position w4
                                            pppp.item(it).BackSpaceNchars W3, W4, y
                      End If
                       If s$ <> "" Then pppp.item(it).InsertDoc W3, W4, s$
                        Else
                            MissStringExpr
                            IdPara = False
                        End If
                    End If
                Else
                If FastSymbol(rest$, "=") Then
                If IsStrExp(basestack, rest$, s$) Then
                If y = 0 Then
                    pppp.item(it) = Left$(pppp.item(it), x - 1) & s$ & Mid$(var(I), x)
                Else
                                                        If s$ = "" Then
                                        pppp.item(it) = Left$(pppp.item(it), x - 1) & Mid$(pppp.item(it), x + y)
                                        Else
                                      vvl = pppp.item(it)
                                        Mid$(vvl, x, y) = s$
                                        pppp.item(it) = vvl
                                        End If
                End If
                Else
                     MissStringExpr
                            IdPara = False
                End If
                End If
                End If
        Else
            IdPara = True
        End If
        
        
        
        Else
        MissingStrVar
        IdPara = False
        ' wrong parameter
        End If


 
 
End If

End Function
Function Identifier(basestack As basetask, what$, rest$) As Boolean
Dim p As Double, I As Long, w$, pa$, s$, ss$, x As Double, y As Double, it As Long, vvl As Variant
Dim x1 As Long, y1 As Long, par As Boolean, ohere$, flag As Boolean, flag2 As Boolean
Dim ps As mStiva, bs As basetask, lang As Long, f As Long
Dim pppp As mArray, myobject As Object
Dim col As Long
Dim myIdentifier As Boolean
   If TaskMaster.PlayMusic Then
                    TaskMaster.OnlyMusic = True
                        TaskMaster.TimerTick
                        TaskMaster.OnlyMusic = False
End If

If myexit(basestack) Then
' done ..
rest$ = ""
Identifier = True
Exit Function
End If


On Error GoTo NERR

ohere$ = HERE$

If what$ = "" Then
Identifier = IsLabel(basestack, rest$, what$)
If Not Identifier Then Exit Function
what$ = myUcase(what$)
lang = codeW(what$)
Else
what$ = myUcase(what$)

lang = codeW(what$)
Identifier = True
x1 = Len(rest$)
If Left$(what$, 1) <> "@" Then
If Not NoOptimum Then If LookFastForModule(what$) Then GoTo JUMPHEREFORMODULESFAST
Else
what$ = Mid$(what$, 2)
End If
End If

Select Case what$
Case "LET", "ÓÔÇ", "ÓÔÇÍ", "ÓÔÏ"
Do
    x1 = IsLabel(basestack, rest$, what$)
    If x1 <> 0 Then
            If x1 > 4 Then
                    ss$ = BlockParam(rest$)
                    what$ = what$ + ss$ + ")"
                    rest$ = Mid$(rest$, Len(ss$) + 2)
                    Do While IsSymbol(rest$, ".")
                    x1 = IsLabel(basestack, rest$, ss$)
                    If x1 > 0 Then what$ = what$ + "." + ss$ Else Exit Do
                            If x1 > 4 Then
                            ss$ = BlockParam(rest$)
                            what$ = what$ + ss$ + ")"
                            rest$ = Mid$(rest$, Len(ss$) + 2)
                            End If
                    Loop
            End If
    
If FastSymbol(rest$, "=") Then

    I = 1
    aheadstatus rest$, False, I
    If I > 1 Then
ss$ = Left$(rest$, I - 1)
                I2 basestack, "PUSH", ss$, flag, lang
                If LastErNum = -2 Then
                rest$ = ss$ + Mid$(rest$, I)
                Identifier = flag
                Exit Function
                End If
              If Identifier Then
             Identifier = Identifier(basestack, "@READ", what$)
             rest$ = Mid$(rest$, I)
             Else
             MyEr "Nothig to assign", "Ôßðïôá ãéá íá äþóù"
             Exit Function
             End If
    Else
            MyEr "Expecting expression", "Ðåñßìåíá Ýêöñáóç"
            Identifier = False
    End If
  
End If

End If
Loop Until Not FastSymbol(rest$, ",")
Exit Function
Case "GROUP", "ÏÌÁÄÁ"
  If IsLabelSymbolNew(rest$, "ÁÕÔÏ", "THIS", lang) Then
  If basestack.UseGroupname <> "" Then
  Identifier = False
  MyEr "Not in a Group Definition: Remove Group This { }", "¼÷é óå ïñéóìü ïìÜäáò: Áöáßñåóå ôçí ÏìÜäá Áõôü {} "
  Exit Function
  Else
    
    If IsLabel(basestack, ".DELETEME", s$) < 0 Then
        If Len(s$) = 8 Then Identifier = False: Exit Function
    what$ = Left$(s$, Len(s$) - 9)
    x1 = 1
    Else
    Identifier = False
  MyEr "Used in a For statement, For Group { this= or =this }", "×ñçóéìïðïéåßôáé åíôüò åíüò ÃÉÁ ïìÜäá { áõôü= Þ =áõôü} "
  Exit Function
    End If
  End If
  
Else
 x1 = Abs(IsLabel(basestack, rest$, what$))
 If HERE$ = what$ Then
NameConflict
    Identifier = False
Exit Function
 End If
 End If
 
 If x1 = 1 Then

  If IsLabelSymbolNew(rest$, "ÔÕÐÏÓ", "TYPE", lang) Then
If IsStrExp(basestack, rest$, ss$) Then
s$ = basestack.GroupName
prepareGroup basestack, what$, y1
 Identifier = ExecuteVarOnly(basestack, basestack.GroupName & what$, y1, ss$, lang) <> 0
 basestack.GroupName = s$
End If

Else
par = Not FastSymbol(rest$, "+")
   If FastSymbol(rest$, "{") Then
 If par Then

 '' GROUP
              s$ = basestack.GroupName
              prepareGroup basestack, what$, y1
            If ExecuteVarOnly(basestack, basestack.GroupName & what$, y1, rest$, lang) = 0 Then
            
            var(y1).edittag = "'11001EDIT " + HERE$ + ", " + CStr(Len(rest$))
             End If
        
            Identifier = FastSymbol(rest$, "}")
           
Else
'' CLASS
            ss$ = block(rest$)
              s$ = basestack.GroupName
              prepareGroup basestack, what$, y1
            If ExecuteVarOnly(basestack, basestack.GroupName & what$, y1, ss$, lang) = 0 Then
            rest$ = ss$ + rest$
Else
Identifier = FastSymbol(rest$, "}")
End If
End If
 basestack.GroupName = s$
Else
If GetVar(basestack, basestack.GroupName & what$, I) Then
Else
 I = GlobalVar(basestack.GroupName & what$, CLng(0))
 Set var(I) = New Group
 
 End If
End If
  End If
  End If
  Exit Function
Case "CALL", "ÊÁËÅÓÅ"
' CHECK FOR NUMBER...

If FastSymbol(rest$, "!") Then basestack.nokillvars = True
par = False: f = 0
If IsLabelSymbolNew(rest$, "ÊÅÍÇ", "VOID", lang) Then par = True
If IsLabelSymbolNew(rest$, "ÅÎÙÔÅÑÉÊÇ", "EXTERN", lang) Then
' NOW WE HAVE TO GET THE NUMBER
basestack.nokillvars = False
If IsExp(basestack, rest$, p) Then
' WE HAVE THE NUMBER, BUT IS f OUR OBJECT???
I = CLng(p)
If I >= 0 Or I <= p Then
If Typename(var(I)) = "stdCallFunction" Then
CallByObject basestack, I, Not par
Exit Function
Else
' INVALID FUNCTION HANDLE

End If

Else
' INVALID FUNCTION HANDLE
End If
Else
'WRONG...
End If
Else
If IsLabelSymbolNew(rest$, "ÓÕÍÁÑÔÇÓÇ", "FUNCTION", lang) Then f = 3
reenter1:
I = Abs(IsLabel(basestack, rest$, what$))
If f > 0 And I < 5 Then I = I + 4: what$ = what$ & "("
If I = 1 Then
    If FastSymbol(rest$, ",") Then
    End If
  ''  what$ = myUcase$(what$)
    MakeThisSub basestack, what$
   it = GetlocalSub(what$, x1)
   ' If Not it Then it = GetlocalSubExtra(what$, x1)

    '
    If Not it Then it = GetSub(what$, x1)
    
    If it Then
     Set bs = New basetask
     bs.reflimit = varhash.Count
        Set bs.Parent = basestack
        If basestack.IamThread Then Set bs.Process = basestack.Process
        Set bs.Sorosref = basestack.soros  ' same stack
        Set bs.Owner = basestack.Owner
        bs.UseGroupname = sbf(x1).sbgroup
        bs.OriginalCode = x1

       Call GoFunc(bs, what$, rest$, vvl)
               
        Set bs = Nothing
        basestack.nokillvars = False
        If LastErNum = -1 Then Identifier = False: Exit Function
        Else
         rest$ = ":" & what$ & " " & rest$
    End If
    Identifier = True
    ''basestack.Nokillvars = False
   Exit Function
ElseIf I = 3 Then
    If FastSymbol(rest$, ",") Then
    
    End If
    If IsStrExp(basestack, what$, s$) Then
        
        rest$ = ": Call " & s$ & " " & rest$
    Else
        ' error
        basestack.nokillvars = False
        Identifier = False
        Exit Function
    End If
ElseIf I > 3 Then
' call function as module


    ss$ = what$ & ")"
     If FastSymbol(rest$, ",") Then
    
    End If
    ''ss$ = myUcase$(ss$)

    
    MakeThisSub basestack, ss$
    it = CLng(GetSub(ss$, x1))
    
    If Not it Then it = CLng(GetlocalSub(ss$, x1))
 
    If it Then
        Set bs = New basetask
        bs.reflimit = varhash.Count
        Set bs.Parent = basestack
        If basestack.IamThread Then Set bs.Process = basestack.Process
        If Not TheSame(HERE$, ss$) Then Set bs.Sorosref = basestack.soros
        Set bs.Owner = basestack.Owner
             bs.UseGroupname = sbf(x1).sbgroup
             bs.OriginalCode = x1
        Call GoFunc(bs, ss$, rest$, vvl)
        Set bs = Nothing
        If Not par Then
        If InStr(ss$, "$") > 0 Then
            If vvl <> "" Then  ' no zero we have error
            x = InStr(vvl, "|")
            If x = 0 Then
                MyEr "ERROR " & vvl, "ËÁÈÏÓ " & vvl
            Else
                MyEr "ERROR " & Left$(vvl, x - 1), "ËÁÈÏÓ " & Mid$(vvl, x + 1)
            End If
            Identifier = False
            basestack.nokillvars = False
            Exit Function
            End If
        Else
            If Val(vvl) <> 0 Then  ' no zero we have error
                MyEr "ERROR " & Trim$(Str$(Val(vvl))), "ËÁÈÏÓ " & Trim$(Str$(Val(vvl)))
                Identifier = False
                basestack.nokillvars = False
                Exit Function
            End If
        End If
        End If
    End If
ElseIf IsStrExp(basestack, rest$, s$) Then
If f = 3 Then s$ = s$ & "("
If FastSymbol(rest$, ",") Then
End If
If s$ <> "" Then
If InStr(s$, ").") > 0 And f <> 3 Then
If Right$(s$, 1) = ")" Then

rest$ = s$ & " " & rest$

GoTo reenter1
Else

rest$ = ": " + s$ & " " & rest$
End If
Else
If Right$(s$, 1) = ")" Then

rest$ = Left$(s$, Len(s$) - 1) & " " & rest$

Else

rest$ = s$ & " " & rest$
End If
GoTo reenter1
End If
End If
Else
rest$ = ": " & rest$
End If
End If
basestack.nokillvars = False
Exit Function
Case "COMMIT", "ÁÍÅÈÅÓÅ"
If basestack.UseGroupname <> "" Then
f = True
col = 1
Set bs = basestack
GoTo contFromRebound
Else
BadReBound
Identifier = False
End If
Exit Function
Identifier = ProcAbout(basestack, rest$, lang)
Exit Function
Case "ICON", "ÅÉÊÏÍÉÄÉÏ"
' ÍÁ ÔÏ ÖÔÉÁÎÙ ÏÐÙÓ ÐÑÅÐÅÉ ÃÉÁ INLINE ÅÉÓÁÃÙÃÇ ÅÉÊÏÍÉÄÉÏÕ...hex$
If ttl Then
If IsStrExp(basestack, rest$, s$) Then

If CFname$(s$) <> "" Then
Set Form3.Icon = LoadPicture(GetDosPath(s$))
End If
Else
Set Form3.Icon = Form2.Icon
End If
End If
Case "TITLE", "ÔÉÔËÏÓ"
If IsStrExp(basestack, rest$, s$) Then
If Not ttl Then Load Form3
Form3.Caption = s$
Form3.Visible = True

If FastSymbol(rest$, ",") Then

    If IsExp(basestack, rest$, p) Then
        If p = 0 Then
                   If Not Form3.WindowState = 1 Then
                        Form3.Visible = True: Form3.Move -48000, 48000
                        Form3.WindowState = 1
                   
                   End If
        Else
            If Not Form3.WindowState = 0 Then
                Form3.Visible = True

                Form3.WindowState = 0
             Form3.Move -48000, 48000
                End If
            
        End If
             mywait basestack, 100
        Identifier = True
        Exit Function
    Else
        Identifier = False
    End If
Else
    Form3.WindowState = 0
    MyDoEvents
    Sleep 1
End If
ElseIf ttl Then
    If Form3.WindowState = 1 Then
    Form3.WindowState = 0
    MyDoEvents
    Sleep 1
    End If
Unload Form3
End If
Exit Function
Case "WRITE", "ÃÑÁØÅ"
If IsLabelSymbolNew(rest$, "HEX", "ÄÅÊÁÅÎ", lang) Then it = 1
If FastSymbol(rest$, "#") Then

    Identifier = False
    If IsExp(basestack, rest$, p) Then

        On Error Resume Next
        I = p Mod 512
        
        par = False
        Do While FastSymbol(rest$, ",")

            If IsExp(basestack, rest$, p) Then
                If par Then
                        If Uni(I) Then
                                putUniString I, ","
                        Else
                                putANSIString I, ","
                               ' Print #i, ",";
                        End If
                End If
                If Uni(I) Then
                If it Then
                putUniString I, PACKLNG2$(p)
                Else
                    putUniString I, NLtrim$(Str$(p))
                    End If
                Else
                    putANSIString I, NLtrim$(Str$(p))
                    'Print #i, NLtrim$(str$(p));
                End If
                If Err.Number > 0 Then Exit Function
                ElseIf IsStrExp(basestack, rest$, s$) Then
                        If Uni(I) Then
                                putUniString I, ","
                        Else
                                putANSIString I, ","
                        '       Print #i, ",";
                        End If
                         s$ = Replace$(s$, Chr(34), Chr(34) + Chr(34))
                         If Uni(I) Then
                        
                    putUniString I, Chr(34) + s$ & Chr(34)
                Else
                    putANSIString I, Chr(34) + s$ & Chr(34)
'                    Print #i, chr(34) + S$ & chr(34);
                    End If
                    If Err.Number > 0 Then Exit Function
                Else
                
                    Exit Function
                End If
                par = True
        Loop
        If Uni(I) Then
            putUniString I, vbCrLf
        Else
            putANSIString I, vbCrLf
            'Print #i, Chr$(13) + Chr$(10);
        End If
        Identifier = True

    End If
End If
Exit Function

Case "TEXT", "ÊÅÉÌÅÍÏ", "HTML"
Identifier = ProcText(basestack, what$, rest$)
Exit Function
Case "STRUCTURE", "ÄÏÌÇ"
TABLENAMES basestack, rest$, lang
Exit Function
Case "ÂÁÓÇ", "BASE"
' ÍÅÁ ÂÁÓÇ
NewBase basestack, rest$
Exit Function
Case "ÁÑ×ÅÉÏ", "TABLE"
NewTable basestack, rest$
Exit Function
' ÍÅÏÓ ÐÉÍÁÊÁÓ ÓÔÇÍ ÂÁÓÇ
Exit Function
Case "ÅÊÔÅËÅÓÇ", "EXECUTE"
CommExecAndTimeOut basestack, rest$
' ÍÅÁ ËÉÓÔÁ
Case "ÁÍÁÊÔÇÓÇ", "RETRIEVE"
getrow basestack, rest$, , , lang
Exit Function
Case "ÁÍÁÆÇÔÇÓÇ", "SEARCH"
getrow basestack, rest$, , "", lang
Exit Function
Case "ÐÑÏÓÈÇÊÇ", "APPEND"
' ÂÁÓÇ,ÐÉÍÁÊÁÓ,ÓÔÏÉ×ÅÉÁ
If IsStrExp(basestack, rest$, s$) Then
append_table basestack, s$, rest$, False
Else
SyntaxError
Identifier = False
End If
Exit Function
Case "ÁÖÁÉÑÅÓÇ", "DELETE"
' ÂÁÓÇ, ÐÉÍÁÊÁÓ,ÐÏÉÏ , ÔÉ
par = DELfields(basestack, rest$)
Case "ÔÁÎÇ", "ORDER"
MyOrder basestack, rest$
Case "ÅÐÉÓÔÑÏÖÇ", "RETURN"
' ÂÁÓÇ,"SELECT ÐÉÍÁÊÁÓ",ÓÔÏÉ×ÅÉÁ
If IsStrExp(basestack, rest$, s$) Then
append_table basestack, s$, rest$, True, lang
End If
Exit Function
Case "ÓÕÌÐÉÅÓÇ", "COMPRESS"
BaseCompact basestack, rest$
Exit Function

Case "LAYER", "ÅÐÉÐÅÄÏ"
Identifier = ProcLayer(basestack, rest$)
Exit Function
Case "PRINTER", "ÅÊÔÕÐÙÔÇÓ"
Identifier = ProcPrinter(basestack, rest$)
Exit Function
Case "MOTION", "ÊÉÍÇÓÇ"
Identifier = ProcMotion(basestack, rest$, lang)
Exit Function
Case "PAGE", "ÓÅËÉÄÁ"
ProcPage basestack, rest$, lang
Exit Function
Case "PRINTING", "ÅÊÔÕÐÙÓÇ"
 Identifier = ProcPrinting(basestack, rest$, lang)
 Exit Function
Case "ESCAPE"
If IsLabelSymbolLatin(rest$, "ON") Then
escok = True
ElseIf IsLabelSymbolLatin(rest$, "OFF") Then
escok = False
Else
Identifier = False
End If
Case "ÄÉÁÖÕÃÇ"
If IsLabelSymbol(rest$, "ÍÁÉ") Then
escok = True
ElseIf IsLabelSymbol(rest$, "Ï×É") Then
escok = False
Else
Identifier = False
End If
Case "HIDE", "ÓÂÇÓÅ"
newHide basestack
Exit Function
Case "SHOW", "ÁÍÁØÅ"
newshow basestack
Exit Function
Case "LEGEND", "ÅÐÉÃÑÁÖÇ"
' NEW JUSTIFY...1 RIGHT,2 CENTER ,3 LEFT
Identifier = ProcLegend(basestack, rest$)
Exit Function
Case "MEDIA", "MOVIE", "ÔÁÉÍÉÁ", "MUSIC", "ÌÏÕÓÉÊÇ"  ' ìüíï Ýíá êáé ìðïñåß íá ðåñéìÝíåé Þ íá ôï äéþîåé ãéá Üëëï
Identifier = ProcMedia(basestack, rest$, lang)
Exit Function
Case "PUT", "ÄÙÓÅ"
Identifier = False
 IsSymbol3 rest$, "#"
If IsExp(basestack, rest$, p) Then
f = p Mod 512
If Not FastSymbol(rest$, ",") Then Exit Function
If Not IsStrExp(basestack, rest$, s$) Then Exit Function
If Uni(f) Then
s$ = Left$(s$, FLEN(f) \ 2)
s$ = s$ & Space$(FLEN(f) \ 2 - Len(s$))
Else
s$ = Left$(s$, FLEN(f))
s$ = s$ & Space$(FLEN(f) - Len(s$))
End If
If FastSymbol(rest$, ",") Then
If IsExp(basestack, rest$, p) Then
I = p Mod 2147483647
Seek #f, (I - 1) * FLEN(f) + 1
Else
Exit Function
End If
End If
If Uni(f) Then
putUniString f, s$
Else
Put #f, , s$
End If

Identifier = True
End If

Case "ÖÏÑÌÁ", "FORM"
kForm = True
Identifier = MakeForm(basestack, rest$)


Exit Function
Case "SUBDIR", "ÕÐÏÊÁÔÁËÏÃÏÓ"
x1 = Abs(IsLabelBig(basestack, rest$, ss$, , w$))
If x1 = 1 Then
ss$ = w$
ElseIf x1 = 0 Or x1 = 3 Or x1 = 6 Then
rest$ = ss$ + rest$
x1 = IsStrExp(basestack, rest$, ss$)
End If
If x1 <> 0 Then
ss$ = mcd + ss$
AddDirSep ss$
If PathMakeDirs(ss$) Then
mcd = ss$
Identifier = True
Else
BadFilename
Identifier = False
End If
End If
Exit Function
Case "DIR", "ÊÁÔÁËÏÃÏÓ"
' SYMBOL {
If IsLabelSymbolNew(rest$, "×ÑÇÓÔÇ", "USER", lang) Then
If IsSupervisor Then
dset
Else
    mcd = userfiles
    End If
    Identifier = True
    Exit Function
ElseIf IsLabelSymbolNew(rest$, "ÊÕÑÉÏ", "MASTER", lang) Then

    userfiles = GetSpecialfolder(CLng(26)) & "\M2000\"
    Identifier = True
    Exit Function
ElseIf IsLabelSymbolNew(rest$, "ÕÐÏËÏÃÉÓÔÇ", "COMPUTER", lang) Then
 If IsSupervisor Then pa$ = "#" Else BadCommand: Identifier = False: Exit Function
Else
    pa$ = ""
End If
If FastSymbol(rest$, "?") Or pa$ <> "" Then
If IsSelectorInUse Then
Identifier = False
SelectorInUse
Exit Function
End If

    If pa$ = "#" Then
    w$ = "#"
    pa$ = ""
    Else
    p = CBool(IsStrExp(basestack, rest$, w$))
    End If
    If pa$ = "" Then If FastSymbol(rest$, ",") Then p = CBool(IsStrExp(basestack, rest$, pa$))
    olamazi
    DialogSetupLang lang
    par = False
    If w$ <> "" Then
    
        If Right$(w$, 1) = "?" Then
            w$ = Trim$(Left$(w$, Len(w$) - 1))
    mcd = w$ '' userfiles = W$
            par = True
        End If
    Else
    If IsSupervisor Then w$ = "\" Else w$ = userfiles
    End If

s$ = ""
    If Form1.Visible Then
    If w$ = "#" Then
        If IsSupervisor Then
          If FolderSelector(basestack, Form1, "", "*", pa$, False) Then
            s$ = ReturnFile
        End If
        Else
        BadCommand
        Identifier = False
        Exit Function
        End If
    Else
    If w$ <> "" Then If Not isdir(w$) Then BadPath: Identifier = False: Exit Function
    If Not CanKillFile(w$) Then FilePathNotForUser: Identifier = False: Exit Function
        If FolderSelector(basestack, Form1, mcd, w$, pa$, par) Then
            s$ = ReturnFile
        End If
    End If
    ElseIf form5iamloaded Then
      If w$ <> "" Then If Not isdir(w$) Then BadPath: Identifier = False: Exit Function

      If Not CanKillFile(w$) Then FilePathNotForUser: Identifier = False: Exit Function
        If FolderSelector(basestack, Form5, mcd, w$, pa$, par) Then
           s$ = ReturnFile
        End If
    End If
    s$ = mylcasefILE(s$)
            If s$ <> "" Then
            AddDirSep s$
                ''If Right(s$, 1) <> "\" Then s$ = s$ & "\"
                If IsLabelSymbolNew(rest$, "ÓÔÏ", "TO", lang) Then
                      Select Case Abs(IsLabel(basestack, rest$, what$))
                        Case 3
                        Identifier = True
                            If GetVar(basestack, what$, I) Then
                            CheckVar var(I), s$
                            Else
                            GlobalVar what$, s$
                    
                            End If
                        Case Else
                            MissingStrVar
                            Identifier = True
                            Exit Function
                        End Select
                 Else
                   mcd = s$
        
                   Identifier = True
                   Exit Function
                End If
            End If
Else
x1 = Abs(IsLabelBig(basestack, rest$, ss$, , w$))
If x1 = 1 Then
ss$ = w$
ElseIf x1 = 0 Or x1 = 3 Or x1 = 6 Then
rest$ = ss$ + rest$
x1 = IsStrExp(basestack, rest$, ss$)
End If

If Left$(ss$, 1) = "." Then x1 = 1
If ss$ = ".." And mcd = userfiles And Not IsSupervisor Then Identifier = True: Exit Function ' no error
FixPath ss$
If x1 = 0 Then
IsSymbol3 rest$, "."
If FastSymbol(rest$, "*") Then
rest$ = Chr(34) + "*" + Chr(34) + rest$
ElseIf Not FastSymbol(rest$, "!") Then
rest$ = Chr(34) + "GSB" + Chr(34) + rest$
End If
 x1 = 1: ss$ = mcd
 par = True
End If
If x1 <> 0 Then
AddDirSep ss$
    If isdir(ss$) Then
        If Right(ss$, 1) <> "\" Then ss$ = ss$ & "\"
        If IsLabelSymbolNew(rest$, "ÓÔÏ", "TO", lang) Then
                Select Case Abs(IsLabel(basestack, rest$, what$))
                Case 3
                Identifier = True
                    If GetVar(basestack, what$, I) Then
                    CheckVar var(I), ss$
                    Else
                    GlobalVar what$, ss$
            
                    End If
                Case Else
               MissingStrVar
               Identifier = False
            Exit Function
                End Select
          
        Else
        If CanKillFile(ss$) Then
            mcd = ss$
            Identifier = True
            If par = True Then
            'GOTO FILES
            If UserPath = "." Then
            If lang Then
            ss$ = Chr(34) & "Dir User " & Originalusername & Chr(34)
                Else
            ss$ = Chr(34) & "ÊáôÜëïãïò ×ñÞóôç " & Originalusername & Chr(34)
            End If
            Else
            If IsSupervisor Then
            If lang Then
            ss$ = Chr(34) & "Dir: " & UserPath2 & Chr(34)
                Else
            ss$ = Chr(34) & "ÊáôÜëïãïò: " & UserPath2 & Chr(34)
            End If
            Else
            If lang Then
            ss$ = Chr(34) & "Dir User " & Originalusername & ": " & mylcasefILE(UserPath2) & Chr(34)
                Else
            ss$ = Chr(34) & "ÊáôÜëïãïò ×ñÞóôç " & Originalusername & ": " & mylcasefILE(UserPath2) & Chr(34)
            End If
            End If
            End If
            I2 basestack, "REPORT", ss$, par, lang
            I3 basestack, "FILES", rest$, par, lang
            I3 basestack, "CAT", "", par, lang
            End If
            Else
            
         mcd = ss$
            Identifier = True
            If par Then
            If lang Then
            ss$ = "{Read Only Folder: " & mcd & "}"
            Else
            ss$ = "{ÊáôÜëïãïò ìüíï ãéá áíÜãíùóç: " & mcd & "}"
            End If
            I2 basestack, "REPORT", ss$, par, lang
            I3 basestack, "FILES", rest$, par, lang
            I3 basestack, "CAT", "", par, lang
            
            End If
            End If
            Exit Function
          
        End If
     Else
     BadPath
            Identifier = False
            Exit Function
    End If
    End If
End If

Case "START", "ÁÑ×Ç"
newStart basestack, rest$
Exit Function
Case "REMOVE", "ÄÉÁÃÑÁÖÇ"
If IsLabelSymbolNew(rest$, "ÁÄÅÉÁÓ", "LICENCE", lang) Then
If IsStrExp(basestack, rest$, ss$) Then
Licenses.remove ss$
Else
MissStringExpr
End If
Else
If sb2used <= basestack.OriginalCode And basestack.OriginalCode <> 0 Then
MyEr "Can't Remove Last Module/Function", "Äåí ìðïñþ íá äéáãñÜøù ôï ôåëåõôáßï ôìÞìá/óõíÜñôçóç"
Identifier = False
Else
If sb2used > 0 Then
If subHash.Count > 0 Then subHash.ReduceHash subHash.Count - 1, sbf()
    If UBound(sbf()) / 2 > sb2used And UBound(sbf()) > 19 Then
       ReDim Preserve sbf(UBound(sbf()) / 2 + 1) As modfun
         
    End If
    sb2used = sb2used - 1

If lckfrm <> 0 Then
If lckfrm > sb2used Then lckfrm = 0

End If
End If


End If
End If
Case "CLASS", "ÊËÁÓÇ"
y1 = IsLabelSymbolNew(rest$, "ÃÅÍÉÊÇ", "GLOBAL", lang)
If IsLabelA("", rest$, w$) = 1 Then
        If FastSymbol(rest$, "{") Then
                ss$ = block(rest$)
                I = Len(rest$)
                If lang = 1 Then
                        rest$ = w$ + "{'11001EDIT " & StripRVAL(ohere$) & ",-" & CStr(I) + vbCrLf + "group " + w$ + " +{" + ss$ & "}" + vbCrLf + "if module(" + w$ + "." + w$ + ") then call! " + w$ + "." + w$ + vbCrLf + "=" + w$ + rest$
                Else
                        rest$ = w$ + "{'11001EDIT " & StripRVAL(ohere$) & ",-" & CStr(I) + vbCrLf + "ïìáäá " + w$ + " +{" + ss$ & "}" + vbCrLf + "if module(" + w$ + "." + w$ + ") then call! " + w$ + "." + w$ + vbCrLf + "=" + w$ + rest$
                End If
                GoTo classcont
         Else
                If Not GetVar(basestack, basestack.GroupName & what$, I) Then
                        I = GlobalVar(basestack.GroupName & what$, CLng(0))
                        Set var(I) = New Group
                Else
                        If Typename(var(I)) <> "Group" Then Set var(I) = New Group
                End If
        End If
Else
        MyEr what$ & " without name", what$ & "÷ùñßò üíïìá"
        Identifier = False
End If
Exit Function
Case "DEF", "ÊÁÍÅ"
y1 = IsLabel(basestack, rest$, what$)
If y1 >= 5 Then
s$ = BlockParam(rest$)
rest$ = Mid$(rest$, Len(s$) + 1)
If FastSymbol(rest$, ")", True) Then
If FastSymbol(rest$, "=", True) Then
I = 1
aheadstatus rest$, False, I
ss$ = Left$(rest$, I - 1)
rest$ = Mid$(rest$, I)
Identifier = Identifier(basestack, "FUNCTION", Left$(what$, Len(what$) - 1) + " {  @read " + s$ + vbCrLf + "=" + ss$ + "}")
Exit Function
End If
End If
Else
MyEr "Need name for function with parenthesis", "ÈÝëù üíïìá óõíÜñôçóçò ìå ðáñåíèÝóåéò"
Identifier = False
Exit Function
End If
Case "FUNCTION", "ÓÕÍÁÑÔÇÓÇ"
        y1 = IsLabelSymbolNew(rest$, "ÃÅÍÉÊÇ", "GLOBAL", lang)
classcont:
        If y1 <> 0 Then
                ' FUNCTION GLOBAL "ALFA[212].other" {definition} so we can place [ ] in a definition..
                ' FOR INTERNAL USE..
                    If MaybeIsSymbol(rest$, Chr(34)) Then
                        ISSTRINGA rest$, what$
                            x1 = 1
                        If Right$(what$, 1) = "$" Then
                            x1 = 3
                        ElseIf Right$(what$, 1) = "%" Then
                            x1 = 4
                        End If
                        what$ = what$ & "()"
                        If FastSymbol(rest$, "{") Then
                                ss$ = block(rest$)
                                I = Len(rest$)
                                If Not FastSymbol(rest$, "}") Then
                                        Identifier = False
                                Else
                                ''*****************************************************************************
                                      If Right$(ss$, 2) <> vbCrLf Then ss$ = ss$ + vbCrLf
                                                If Left$(sbf(basestack.OriginalCode).sb, 10) = "'11001EDIT" Then
                                                        If InStr(HERE$, ChrW(&H1FFF)) > 0 Then
                                                                s$ = ""
                                                        Else
                                                                pa$ = sbf(basestack.OriginalCode).sb
                                                                If Not Left$(ss$, 10) = "'11001EDIT" Then
                                                                         s$ = GetNextLine(pa$) & "-" & CStr(I) + vbCrLf
                                                                End If
                                                        End If
                                                Else
                                                        If Left$(ss$, 10) <> "'11001EDIT" Then
                                                                s$ = "'11001EDIT " & StripRVAL(ohere$) & ",-" & CStr(I) + vbCrLf
                                                        End If
                                                End If
                                   
                                        basestack.IndexSub = GlobalSub(what$, s$ + ss$)
                                End If
                                Exit Function
                        End If
                End If
        End If
        x1 = Abs(IsLabel(basestack, rest$, what$))
        If x1 = 1 Or x1 = 3 Or x1 = 4 Then   ' C() C%() C$()
                what$ = what$ & "()"
                MakeThisSub basestack, what$
                If y1 Then  ' We have a global function
                        If Not GetGlobalSubAfterHere(what$, x1) Then
                                If FastSymbol(rest$, "{") Then
                                        ss$ = block(rest$)
                                        I = Len(rest$)
                                        If Not FastSymbol(rest$, "}") Then
                                                Identifier = False
                                        Else
                                                  If Right$(ss$, 2) <> vbCrLf Then ss$ = ss$ + vbCrLf
                                                  If Left$(sbf(basestack.OriginalCode).sb, 10) = "'11001EDIT" Then
                                                        If InStr(HERE$, ChrW(&H1FFF)) > 0 Then
                                                                s$ = ""
                                                        Else
                                                                pa$ = sbf(basestack.OriginalCode).sb
                                                                If Not Left$(ss$, 10) = "'11001EDIT" Then
                                                                         s$ = GetNextLine(pa$) & "-" & CStr(I) + vbCrLf
                                                                End If
                                                        End If
                                                Else
                                                        If Left$(ss$, 10) <> "'11001EDIT" Then
                                                                s$ = "'11001EDIT " & StripRVAL(ohere$) & ",-" & CStr(I) + vbCrLf
                                                        End If
                                                End If
                                             basestack.IndexSub = GlobalSub(what$, s$ + ss$)
                                    
                                        End If
                                Else
                                       MyEr what$ & " missing definition", what$ & " ëåßðåé ï ïñéóìüò"
                                End If
                         Else
                                If FastSymbol(rest$, "{") Then
                                        what$ = block(rest$)
                                        If Not FastSymbol(rest$, "}") Then
                                                Identifier = False
                                        Else
                                                If Right$(what$, 2) <> vbCrLf Then what$ = what$ + vbCrLf
                                                sbf(x1).sb = what$: basestack.IndexSub = x1
                                        End If
                                Else
                                    MyEr what$ & " missing definition", what$ & " ëåßðåé ï ïñéóìüò"
                                End If
                        End If
                        Exit Function
                Else
                        If HERE$ = "" And GetSub(what$, x1) Then
                                If x1 >= lckfrm And lckfrm <> 0 Then   ' when we load a scrabled program..we have locked functions/modules
                                            MyEr what$ & " is locked", what$ & " åßíáé êëåéäùìÝíï"
                                            rest$ = ""
                                            Identifier = False: Exit Function
                                End If
                                If FastSymbol(rest$, "{") Then
                                          ''  I = Len(Rest$)      'function point in source
                                            what$ = block(rest$) + " "
                                           '' While Left$(what$, 10) = "'11001EDIT"
                                            ''        SetNextLine what$
                                           '' Wend
                                         ''   what$ = "'11001EDIT " & StripRVAL(ohere$) & ",-" & CStr(I) + vbCrLf + what$
                                            If Not FastSymbol(rest$, "}") Then
                                                    Identifier = False
                                            Else
                                                    If Right$(what$, 2) <> vbCrLf Then what$ = what$ + vbCrLf
                                                    sbf(x1).sb = what$: basestack.IndexSub = x1
                                            End If
                                    Else
                                            Identifier = False
                                    End If
                                    Exit Function
                        ElseIf GetlocalSub(basestack.GroupName & what$, x1) Then
                                    If x1 >= lckfrm And lckfrm <> 0 Then
                                            MyEr what$ & " is locked", what$ & " åßíáé êëåéäùìÝíï"
                                            rest$ = ""
                                            Identifier = False: Exit Function
                                    End If
                                    If FastSymbol(rest$, "{") Then
                                            I = Len(rest$)
                                            what$ = block(rest$) + " "
                                            While Left$(what$, 10) = "'11001EDIT"
                                                    SetNextLine what$
                                            Wend
                                            If Right$(what$, 2) <> vbCrLf Then what$ = what$ + vbCrLf
                                            what$ = "'11001EDIT " & StripRVAL(ohere$) & ",-" & CStr(I) + vbCrLf + what$
                                            If Not FastSymbol(rest$, "}") Then
                                                    Identifier = False
                                            Else
                                                    If Right$(what$, 2) <> vbCrLf Then what$ = what$ + vbCrLf
                                                    sbf(x1).sb = what$
                                                    basestack.IndexSub = x1
                                            End If
                                    Else
                                    '' or identifier=false
                                            rest$ = ":" & basestack.GroupName & what$ & " " & rest$
                                    End If
                                    Exit Function
                        ElseIf FastSymbol(rest$, "{") Then
                                    If HERE$ = "" Then
                                                s$ = block(rest$)
                                                If Right$(s$, 2) <> vbCrLf Then s$ = s$ + vbCrLf
                                                ' NEED TO HAVE A HEADER ******************************************************************************
                                                basestack.IndexSub = GlobalSub(what$, s$)
                                    Else
                                                ss$ = block(rest$)
                                                I = Len(rest$)
                                                If Right$(ss$, 2) <> vbCrLf Then ss$ = ss$ + vbCrLf
                                                If Left$(sbf(basestack.OriginalCode).sb, 10) = "'11001EDIT" Then
                                                        If InStr(HERE$, ChrW(&H1FFF)) > 0 Then
                                                                s$ = ""
                                                        Else
                                                                pa$ = sbf(basestack.OriginalCode).sb
                                                                If Not Left$(ss$, 10) = "'11001EDIT" Then
                                                                
                                                                         s$ = GetNextLine(pa$) & "-" & CStr(I) + vbCrLf
                                                                         
                                                                End If
                                                        End If
                                                Else
                                                        If Left$(ss$, 10) <> "'11001EDIT" Then
                                                                s$ = "'11001EDIT " & StripRVAL(ohere$) & ",-" & CStr(I) + vbCrLf
                                                        End If
                                                End If

                                                basestack.IndexSub = GlobalSub(HERE$ & "." & basestack.GroupName & what$, s$ + ss$)
                                    End If
                                    If Not FastSymbol(rest$, "}") Then Identifier = False
                                    Exit Function
                            Else
                                    Identifier = False
                            End If
                End If
        Else
                rest$ = what$ & " " & rest$
                Identifier = False
        End If
Case "MODULE", "ÔÌÇÌÁ"
x1 = IsLabelSymbolNew(rest$, "ÃÅÍÉÊÏ", "GLOBAL", lang)
If x1 <> 0 Then
        If MaybeIsSymbol(rest$, Chr(34)) Then
                ISSTRINGA rest$, what$
                GoTo BYPASS1
        End If
End If
If Abs(IsLabel(basestack, rest$, what$)) = 1 Then
        If x1 Then
BYPASS1:
                If Not GetGlobalSubAfterHere(what$, x1) Then
                        x1 = GlobalSub(what$, ""): basestack.IndexSub = x1
                End If
                If FastSymbol(rest$, "{") Then
                       '''' I = Len(Rest$)
                       '''' what$ = block(Rest$)
                       '' If Right$(what$, 2) <> vbCrLf Then what$ = what$ + vbCrLf
                       '''' If Not FastSymbol(Rest$, "}") Then Identifier = False Else sbf(x1).sb = "'11001EDIT " & StripRVAL(ohere$) & ",-" & CStr(I) + vbCrLf + what$
 ss$ = block(rest$)
                                I = Len(rest$)
                                If Right$(ss$, 2) <> vbCrLf Then ss$ = ss$ + vbCrLf
                                If Left$(sbf(basestack.OriginalCode).sb, 10) = "'11001EDIT" Then
                                        If InStr(HERE$, ChrW(&H1FFF)) > 0 Then
                                                s$ = ""
                                        Else
                                                pa$ = sbf(basestack.OriginalCode).sb
                                                If Not Left$(ss$, 10) = "'11001EDIT" Then
                                                            s$ = GetNextLine(pa$) & "-" & CStr(I) + vbCrLf
                                                End If
                                        End If
                                Else
                                        If Left$(ss$, 10) <> "'11001EDIT" Then
                                                s$ = "'11001EDIT " & StripRVAL(ohere$) & ",-" & CStr(I) + vbCrLf
                                        End If
                                End If
                                 sbf(x1).sb = s$ + ss$: basestack.IndexSub = x1
                         If Not FastSymbol(rest$, "}") Then Identifier = False
                        
                Else
                        MyEr what$ & " missing definition", what$ & " ëåßðåé ï ïñéóìüò"
                End If
                Exit Function
        Else
                If HERE$ = "" And GetSub(what$, x1) Then
                        If x1 >= lckfrm And lckfrm <> 0 Then
                                MyEr what$ & " is locked", what$ & " åßíáé êëåéäùìÝíï"
                                rest$ = ""
                                Identifier = False: Exit Function
                        End If
                        If FastSymbol(rest$, "{") Then
                            what$ = block(rest$)
                        If Right$(what$, 2) <> vbCrLf Then what$ = what$ + vbCrLf
                                   If Not FastSymbol(rest$, "}") Then
                                           Identifier = False
                                      Else
                                                If Right$(what$, 2) <> vbCrLf Then what$ = what$ + vbCrLf
                                            sbf(x1).sb = what$: basestack.IndexSub = x1
                                End If
                               
                                        
                        Else
                                rest$ = ":" & what$ & " " & rest$      ''why
                        End If
                        Exit Function
                ElseIf GetlocalSub(basestack.GroupName & what$, x1) Then
                        If x1 >= lckfrm And lckfrm <> 0 Then
                                MyEr what$ & " is locked", what$ & " åßíáé êëåéäùìÝíï"
                                rest$ = ""
                                Identifier = False: Exit Function
                        End If
                        If FastSymbol(rest$, "{") Then
                                I = Len(rest$) ''
                                what$ = block(rest$) + " "
                                While Left$(what$, 10) = "'11001EDIT"
                                        SetNextLine what$
                                Wend
                                If Right$(what$, 2) <> vbCrLf Then what$ = what$ + vbCrLf
                                what$ = "'11001EDIT " & StripRVAL(ohere$) & ",-" & CStr(I) + vbCrLf + what$
                                If Not FastSymbol(rest$, "}") Then
                                        Identifier = False
                                Else
                                If Right$(what$, 2) <> vbCrLf Then what$ = what$ + vbCrLf
                                sbf(x1).sb = what$
                                basestack.IndexSub = x1
                                End If
                        Else
                                rest$ = ":" & basestack.GroupName & what$ & " " & rest$
                        End If
                        Exit Function
                ElseIf FastSymbol(rest$, "{") Then
                        If HERE$ = "" Then
                                pa$ = block(rest$)
                                If Right$(pa$, 2) <> vbCrLf Then pa$ = pa$ + vbCrLf
                                basestack.IndexSub = GlobalSub(what$, pa$)
                        Else
                                ss$ = block(rest$)
                                I = Len(rest$)
                                If Right$(ss$, 2) <> vbCrLf Then ss$ = ss$ + vbCrLf
                                If Left$(sbf(basestack.OriginalCode).sb, 10) = "'11001EDIT" Then
                                        If InStr(HERE$, ChrW(&H1FFF)) > 0 Then
                                                s$ = ""
                                        Else
                                                pa$ = sbf(basestack.OriginalCode).sb
                                                If Not Left$(ss$, 10) = "'11001EDIT" Then
                                                            s$ = GetNextLine(pa$) & "-" & CStr(I) + vbCrLf
                                                End If
                                        End If
                                Else
                                        If Left$(ss$, 10) <> "'11001EDIT" Then
                                                s$ = "'11001EDIT " & StripRVAL(ohere$) & ",-" & CStr(I) + vbCrLf
                                        End If
                                End If
                                basestack.IndexSub = GlobalSub(HERE$ & "." & basestack.GroupName & what$, s$ + ss$) 's$ + block(Rest$)
                        End If
                        If Not FastSymbol(rest$, "}") Then Identifier = False
                        Exit Function
                Else
                        HERE$ = "!" & what$
                End If
        End If
Else
        If what$ <> "" Then rest$ = what$ & " :" & rest$
        If IsStrExp(basestack, rest$, s$) Then
                HERE$ = "!" & myUcase(s$)
        Else
                rest$ = what$ & " " & rest$
                Identifier = False
        End If
End If
Case "LOAD", "ÖÏÑÔÙÓÅ" '
Do
x1 = Abs(IsLabelBig(basestack, rest$, s$, , w$))
If x1 = 1 Then
s$ = w$
Else
rest$ = s$ + rest$
x1 = IsStrExp(basestack, rest$, s$)
End If
If x1 <> 0 Then
If ExtractType(s$) <> "gsb" Then

s$ = CFname(mcd + ExtractNameOnly(s$) & ".gsb")

If s$ = "" Then s$ = mcd + ExtractNameOnly(s$) & ".gsb"
Else
para$ = s$
If ExtractPath$(s$) = "" Then
s$ = ExtractName(s$)
para$ = Trim$(Mid$(para$, Len(s$) + 1))
s$ = mcd + s$
Else
s$ = ExtractPath(s$) + ExtractName(s$)
para$ = Trim$(Mid$(para$, Len(s$) + 1))

End If

Switches para$
End If
If ExtractNameOnly(s$) = "" Then
MyEr "No such file", "Äåí õðÜñ÷åé ôÝôïéï áñ÷åßï"
Exit Function
End If
ss$ = ReadUnicodeOrANSI(s$, True)
If ss$ <> "" Then
If Err.Number = 0 And HERE$ = "" Then LASTPROG$ = s$
If FastSymbol(rest$, ",") Then
        If IsStrExp(basestack, rest$, w$) Then
                ss$ = mycoder.decryptline(ss$, w$, (Len(ss$) / 2) Mod 33)
                If Abs(IsLabel(basestack, ss$, w$)) Then
                        If Not Left$(ss$, 3) = ":" & vbCrLf Then Identifier = False: Exit Function
                        If lckfrm = 0 And Not NORUN1 Then lckfrm = sb2used + 1
                End If
        End If
End If
par = False

Do While MaybeIsSymbol(ss$, "\'[*")
SetNextLine ss$
par = True
Loop
ss$ = Replace(ss$, Chr$(9), "      ")
If ss$ <> "" Then
If par Then GoTo skipme
If (Asc(ss$) > 127 And myUcase(Left$(ss$, 5)) <> "ÊËÁÓÇ" And myUcase(Left$(ss$, 5)) <> "ÔÌÇÌÁ" And myUcase(Left$(ss$, 9)) <> "ÓÕÍÁÑÔÇÓÇ") Or (((AscW(ss$) And &H4000) = &H4000)) Then
    ss$ = mycoder.must(ss$)
    If NORUN1 Then
        Clipboard.clear
        ''Clipboard.SetText SS$, vbCFText
        
        SetTextData CF_UNICODETEXT, ss$
    End If

    If IsLabelA("", ss$, w$) Then
        If Not (Left$(ss$, 3) = ":" & vbCrLf) Then Identifier = False: Exit Function
        'lock that module
        If lckfrm = 0 And Not NORUN1 Then lckfrm = sb2used + 1
    Else
        MOUT = True
    End If
Else
skipme:
    While FastSymbol(ss$, vbCrLf)
    
      ''  SleepWait 20
    Wend
    If Abs(IsLabel(basestack, ss$, w$)) Then
        If Not (Left$(ss$, 3) = ":" & vbCrLf) Then
        ss$ = w$ & " " & ss$
        End If
    End If
End If

vvl = CStr(vvl) + vbCrLf + ss$ & vbCrLf
End If
End If
End If
Loop Until MOUT Or Not IsSymbol(rest$, "&&")
rest$ = CStr(vvl) + rest$
Case "SAVE", "ÓÙÓÅ"
Identifier = ProcSave(basestack, rest$, lang)
Exit Function
Case "OVERWRITE", "ÊÁÔÁ×ÙÑÇÓÇ"
Identifier = RepPara(basestack, rest$)
Exit Function
Case "INSERT", "ÐÁÑÅÌÂÏËÇ"
Identifier = IdPara(basestack, rest$, lang)
Exit Function
Case "LONG", "ÌÁÊÑÕÓ"
Identifier = True

     Do While Abs(IsLabel(basestack, rest$, what$)) = 1
     If Not FastSymbol(rest$, "<") Then  ' get local var first
            If GetlocalVar(basestack.GroupName & what$, I) Then
            p = var(I)
            GoTo there01
            ElseIf GetVar(basestack, basestack.GroupName & what$, I) Then
             p = var(I)
            GoTo there01
            Else
            I = GlobalVar(basestack.GroupName & what$, s$)   ' MAKE ONE  '

             GoTo makeitnow1
            End If
            ElseIf GetVar(basestack, basestack.GroupName & what$, I) Then
            
there01:
                
                MakeitObjectLong var(I)
                CheckVarLong var(I), CLng(p)
                GoTo there12
            Else
        
                I = GlobalVar(basestack.GroupName & what$, s$) ' MAKE ONE
                If I <> 0 Then
makeitnow1:
                    MakeitObjectLong var(I)
there12:
                    If FastSymbol(rest$, "=") Then
                        If IsExp(basestack, rest$, p) Then
                        
                            CheckVarLong var(I), CLng(p)
                        Else
                            MissNumExpr
                            Identifier = False
                        End If
                    Else
                    ' DO NOTHING
                    End If
                End If
            End If
     
     If Not FastSymbol(rest$, ",") Then Exit Do
     Loop
          
Case "DOCUMENT", "ÅÃÃÑÁÖÏ"
Identifier = True
ss$ = ""
Do
    x1 = Abs(IsLabel(basestack, rest$, what$))
    If x1 = 3 Or x1 = 6 Then
        If x1 = 3 Then
        
                
                
            If Not FastSymbol(rest$, "<") Then  ' get local var first
            If GetlocalVar(basestack.GroupName & what$, I) Then
            GoTo there0
            ElseIf GetVar(basestack, basestack.GroupName & what$, I) Then
            GoTo there0
            Else
            I = GlobalVar(basestack.GroupName & what$, s$)  ' MAKE ONE  '
             GoTo makeitnow
            End If
            ElseIf GetVar(basestack, basestack.GroupName & what$, I) Then
            
there0:
                s$ = var(I)
                MakeitObject var(I)
                CheckVar var(I), s$
                GoTo there1
            Else
        
                I = GlobalVar(basestack.GroupName & what$, s$) ' MAKE ONE
                If I <> 0 Then
makeitnow:
                    MakeitObject var(I)
there1:
                    If FastSymbol(rest$, "=") Then
                        If IsStrExp(basestack, rest$, s$) Then
                            CheckVar var(I), s$
                        Else
                            MissStringExpr
                            Identifier = False
                        End If
                    Else
                    ' DO NOTHING
                    End If
                End If
            End If
        Else
            ' ARRAY

            ''*************************
            If neoGetArray(basestack, what$, pppp, HERE$ <> "") Then  ' basestack.GroupName &
           '' basestack.GroupName &
                If Not NeoGetArrayItem(pppp, basestack, what$, it, rest$) Then Identifier = False: Exit Function
                x1 = 0
         
                
                If Not IsObject(pppp.item(it)) Then
                    s$ = pppp.item(it)
                    Set pppp.item(it) = New Document
                    If s$ <> "" Then pppp.item(it).textDoc = s$
                    If FastSymbol(rest$, "=") Then
                        If IsStrExp(basestack, rest$, s$) Then
                            CheckVar pppp.item(it), s$
                        Else
                            MissStringExpr
                        Identifier = False
                        End If
                    End If
                Else
                If FastSymbol(rest$, "=") Then
                    If IsStrExp(basestack, rest$, s$) Then
                        CheckVar pppp.item(it), s$
                    Else
                        MissStringExpr
                        Identifier = False
                    End If
                Else
                    Exit Do
                   End If
                End If
                Identifier = True
            Else
            MyErMacro rest$, "array has no dimension", "ï ðßíáêáò äåí Ý÷åé ïñéóôåß"
             Identifier = False
             Exit Function
            End If
          
            End If
    Else
    SyntaxError
    Identifier = False
    
    End If
    Loop Until Not FastSymbol(rest$, ",")
    Exit Function
Case "STOCK", "ÓÔÏÊ"
Identifier = StockValues(basestack, rest$, lang)
Exit Function
Case "LINK", "ÅÍÙÓÅ"
Set myobject = basestack.soros
Set basestack.Sorosref = New mStiva
s$ = ""

Do
If IsLabelSymbolNew(rest$, "ÉÓ×ÍÇ", "WEAK", lang) Then
     
If IsStrExp(basestack, rest$, ss$) Then
If GetSub(ss$, x1) Then
 basestack.soros.DataStr "{" + sbf(x1).sb + "}": x1 = 1: GoTo contlink2
Else
 basestack.soros.DataStr ss$: x1 = 1: GoTo contlink2

End If

End If
MissStringExpr
Identifier = False
Exit Function
End If
it = IsLabelDot(HERE$, rest$, ss$)
If it = 2 Then it = IsLabelDot(HERE$, rest$, ss$)

If it = 0 Then If IsStrExp(basestack, rest$, ss$) Then x1 = 1: basestack.soros.DataStr ss$: GoTo contlink2  ''s$ = "DATA {" + SS$ + "}": GoTo contlink1

If it <> 0 And ss$ <> "" Then
If Left$(ss$, 1) = "&" Then ss$ = Mid$(ss$, 2)
If it < 0 Then
IsLabel basestack, (ss$), ss$
End If

If it > 4 Then
ss$ = ss$ + ")"
If Not FastSymbol(rest$, ")") Then it = 0
End If


x1 = 1
 aheadstatus rest$, False, x1

s$ = "DATA &" + ss$ + Mid$(rest$, 1, x1 - 1)

contlink1:
If x1 > 1 Then rest$ = Mid$(rest$, x1)
If Execute(basestack, s$, True) <> 1 Then
Set basestack.Sorosref = myobject
Exit Function
End If

End If
If s$ <> "" Then rest$ = s$ + rest$

Loop While FastSymbol(rest$, ",")
contlink2:
If basestack.soros.Total = 0 Then
MyEr "Nothing to link", "Ôßðïôá ãéá íá åíþóù"
ElseIf IsLabelSymbolNew(rest$, "ÓÔÏ", "TO", lang) Then
   Identifier = Identifier(basestack, "@REFER", rest$)
ElseIf IsLabelSymbolNew(rest$, "ÓÔÇ", "TO", lang, True) Then
   Identifier = Identifier(basestack, "@REFER", rest$)
End If

Set basestack.Sorosref = myobject
Exit Function
Case "REFER", "ÁÐÅÄÙÓÅ"
col = 1
''f = True
GoTo read123
Case "READ", "ÄÉÁÂÁÓÅ"

flag2 = IsLabelSymbolNew(rest$, "ÍÅÏ", "NEW", lang)
If Not flag2 Then flag = IsLabelSymbolNew(rest$, "ÔÏÐÉÊÁ", "LOCAL", lang)
read123:
Set bs = basestack
contFromRebound:
par = IsLabelSymbolNew(rest$, "ÁÐÏ", "FROM", lang)
If par And f Then
SyntaxError
Identifier = False
Exit Function
End If
If par Then
x1 = Abs(IsLabel(basestack, rest$, ss$))
If x1 > 0 And x1 <> 1 Then rest$ = ss$ + " " + rest$
If x1 = 1 Then

 If getvar2(basestack, ss$, I, , , flag) Then
 If IsObject(var(I)) Then
            ' need to make new stack frame with pointers to
        If Typename(var(I)) <> "Group" Then Identifier = True: Exit Function
        Set ps = New mStiva
        If HERE$ <> "" Then
                Set myobject = var(I).PrepareSoros(var(), HERE$ + "." + Left$(ss$, Len(ss$) - Len(var(I).GroupName) + 1))
                Else
                Set myobject = var(I).PrepareSoros(var(), Left$(ss$, Len(ss$) - Len(var(I).GroupName) + 1))
                End If
        With myobject
               For x1 = 1 To .Total
                  s$ = .StackItem(x1) + " "
                  If Left$(s$, 1) = "*" Then '' we have a group
                  s$ = Split(Mid$(s$, 2))(0)
                  Else
                  s$ = Split(s$)(0)
                  End If

 ''we place references

                If Right$(s$, 2) = "()" Then
                        ps.DataStr Left$(s$, Len(s$) - 2)
                Else
                        ps.DataStr s$
                End If
 ''BaseSTACK.Soros.DataStr .StackItem(X1)
            Next x1
        End With
Set myobject = Nothing
 Set bs = New basetask
    Set bs.Sorosref = ps
    If FastSymbol(rest$, ";") Then
    basestack.soros.MergeTop ps
    
    Identifier = True
    Exit Function
    End If
    If Not FastSymbol(rest$, ",") Then
    MissPar
    Identifier = False
 Exit Function
    End If
 Else
 MissingGroup
 Identifier = False
 Exit Function
 End If
 Else
 MissingGroup
 Identifier = False
 Exit Function
 End If
 col = 1 ' this is a switch... look down
 
ElseIf IsStrExp(basestack, rest$, ss$) Then
Set ps = New mStiva
Do While ss$ <> ""
If ISSTRINGA(ss$, pa$) Then
ps.DataStr pa$
ElseIf IsNumberD(ss$, x) Then
ps.DataVal x
Else
Exit Do
End If
Loop
Set bs = New basetask
Set bs.Sorosref = ps
    If Not FastSymbol(rest$, ",") Then
    MissPar
    Identifier = False
 Exit Function
    End If
End If
End If

Do
again1:
Identifier = False
If FastSymbol(rest$, ",") Then bs.soros.drop 1: GoTo again1
If FastSymbol(rest$, "&") Or col = 1 Then
' so now for GROUP variables we use only by reference
Select Case Abs(IsLabel(basestack, rest$, what$))
Case 1
If bs.IsString(s$) Then
     
          
    
    If GetGlobalVar(s$, I) Then
If flag2 Then
        If Not f Then
               If Not flag Then
                          If HERE$ <> "" Then
                           GoTo contpush12
                              Else
                          NoSecReF
                          
                         Exit Do
                       End If
            End If
    
    End If
ElseIf GetVar(basestack, what$, it, , , flag) And Not f Then
               If Not flag Then
                          If GetlocalVar(what$, y1) = False And HERE$ <> "" Then
                                   GoTo contpush12
                              Else
                                  NoSecReF
                                 Exit Do
                            End If
                End If
                
   
   Else
contpush12:
   what$ = myUcase$(what$)
   
   If Not LinkGroup(what$, var(I)) Then
            If f Then
             If Not ReboundVar(basestack, what$, I) Then GlobalVar what$, I, True
            Else
             GlobalVar what$, I, True
            End If
     Else

     it = GlobalVar(what$, it)
     MakeitObject2 var(it)
    With var(I)
      var(it).edittag = .edittag
     var(it).FuncList = .FuncList
    var(it).GroupName = myUcase(what$) + "."
    Set var(it).Sorosref = .soros.Copy
    End With
     End If
     Identifier = True
     
     End If
     Else
         NoReference
    Identifier = False
    Exit Function

    End If
    Else
    NoReference
    Identifier = False
    Exit Function
    End If

Case 3, 4
If bs.IsString(s$) Then
     
          
    
    If GetGlobalVar(s$, I) Then
    If GetVar(basestack, what$, it, , , flag) And Not f Then '' GetlocalVar(what$, it)
    NoSecReF
   Exit Do
   Else
     If f Then
   If Not ReboundVar(basestack, what$, I) Then GlobalVar what$, I, True
   Else
   GlobalVar what$, I, True
   End If
     Identifier = True
     
     End If
     Else
    NoReference
    Identifier = False
    Exit Function
    End If
    Else
    NoReference
    Identifier = False
    Exit Function
    End If
    Case 5, 6, 7
    If bs.IsString(s$) Then  ' get the pointer!!!!!
    If MaybeIsSymbol(s$, "{") Then
    If Not FastSymbol(rest$, ")") Then
     MyEr "Syntax error, use )", "Óõíôáêôéêü ëÜèïò âÜëå )": Exit Do
    Else
    s$ = Left$(what$, Len(what$) - 1) + " " + s$
    If f Then
    ss$ = HERE$
    HERE$ = ""
                If Not Identifier(basestack, "@FUNCTION", s$) Then
            MyEr "No function definition founded", "Äåí âñÝèçêå ïñéóìüò óõíÜñôçóçò"
            Else
            sbf(basestack.IndexSub).sbgroup = s$
        
            End If
            Identifier = True
     HERE$ = ss$
    
    Else
            If Not Identifier(basestack, "@FUNCTION", s$) Then
            MyEr "No function definition founded", "Äåí âñÝèçêå ïñéóìüò óõíÜñôçóçò"
            Else
            sbf(basestack.IndexSub).sbgroup = s$
        
            End If
            Identifier = True
            End If
    End If
    Else
    I = CopyArrayItemsNoFormated(basestack, s$)
    If I > 0 Then
    If Not FastSymbol(rest$, ")") Then MyEr "Syntax error, use )", "Óõíôáêôéêü ëÜèïò âÜëå )": Exit Do
   If f Then   '' look about f - work for refer but no refer can't be done...why???
   If Not ReboundArr(basestack, what$, I) Then GoTo arrconthere
   
   Else
arrconthere:
what$ = myUcase(what$)
        If HERE$ = "" Then
            If varhash.ExistKey(what$) Then
                    MyEr "Try other array name", "Äïêßìáóå Üëëï üíïìá ðßíáêá"
                    Exit Do
            Else
             varhash.ItemCreator what$, I
            End If
        Else
            If varhash.ExistKey(HERE$ & "." & what$) Then
                MyEr "Try other array name", "Äïêßìáóå Üëëï üíïìá ðßíáêá"
                Exit Do
            Else
   
              varhash.ItemCreator HERE$ & "." & what$, I, True
            End If
        End If
    End If
Identifier = True
    End If
    End If
End If
Case Else

Exit Do
End Select
Else
x1 = Abs(IsLabel(basestack, rest$, what$))
what$ = myUcase(what$)
Select Case x1
Case 1
If bs.IsObjectRef(myobject) Then
   Identifier = True
   If flag Then
p = 0
GlobalVar what$, p
End If
If GetVar(basestack, what$, I, , , flag) Then
            '' we can throw a pointer
            If Typename$(var(I)) = "Group" Then
            '' we cannot place a group over another group
            '' once we read it we make it..in that place

            UnFloatGroupReWriteVars basestack, what$, I, myobject
            ''BadGroupHandle

            Else
          Set var(I) = myobject
          End If
          
   Else
           I = GlobalVar(what$, 0)
            ''GetVar basestack, what$, i
    
            
            
            
            
             If Typename$(myobject) = "Group" Then
                
        UnFloatGroup basestack, what$, I, myobject
        Set myobject = Nothing
    End If
            
    End If
    
  
    
ElseIf bs.IsNumber(p) Then
Identifier = True
If flag2 Then
GlobalVar what$, p
ElseIf GetVar(basestack, what$, I, , , flag) Then
            If VarType(var(I)) <> vbLong Then
            var(I) = p
            Else
             var(I) = CLng(p)
            End If
   ElseIf I = -1 Then
             basestack.SetVar what$, p
   Else
            GlobalVar what$, p
            
    End If
    Else
     MissStackNumber
Identifier = False
    Exit Do
End If
Case 3
If bs.IsString(s$) Then
    Identifier = True
    If flag2 Then
    GlobalVar what$, s$
    ElseIf GetVar(basestack, what$, I, , , flag) Then
    CheckVar var(I), s$
    ElseIf I = -1 Then
    basestack.SetVar what$, s$
    Else
    GlobalVar what$, s$
    End If
Else
MissStackStr
Identifier = False

    Exit Function
End If
Case 4

If bs.IsNumber(p) Then

    Identifier = True
    If flag2 Then
GlobalVar what$, Int(p)
ElseIf GetVar(basestack, what$, I, , , flag) Then
    var(I) = Int(p)
    
   ElseIf I = -1 Then
             basestack.SetVar what$, p
     Else
    GlobalVar what$, Int(p)
    End If
Else
     MissStackNumber
Identifier = False
    Exit Do
End If
Case 5
    Identifier = False
    If FastSymbol(rest$, ")") Then
       Identifier = globalArrByPointer(bs, basestack, what$, flag2): If Not Identifier Then SyntaxError: Exit Do
       
       
    Else
        If neoGetArray(basestack, what$, pppp) And Not flag2 Then
            If Not NeoGetArrayItem(pppp, bs, what$, it, rest$) Then Exit Do
        Else
            Exit Do
        End If
        If IsOperator(rest$, ".") Then
        If Not Typename(pppp.item(it)) = "Group" Then
        MyEr "Expected group", "Ðåñßìåíá ïìÜäá"
        Identifier = False: Exit Function
        Else
         I = 1
        aheadstatus rest$, False, I
        ss$ = Left$(rest$, I - 1)
        Identifier = SpeedGroup(basestack, pppp, "@READ", ".", ss$, it) <> 0
        rest$ = Mid$(rest$, I)
        GoTo loopcont123
        End If
        End If
       If bs.IsObjectRef(myobject) Then
                    If Typename$(myobject) = "Group" Then
                             If myobject.IamFloatGroup Then
                                          Set pppp.item(it) = myobject
                                          Set myobject = Nothing
                                          Identifier = True
                                          Exit Function
                             Else
                                          BadGroupHandle
                                          Identifier = False
                                          Exit Function
                             End If
                             Set myobject = Nothing
                    End If
        ElseIf Not bs.IsNumber(p) Then
                        MissStackNumber
                        Identifier = False
                        Exit Do
        End If
        Identifier = True
        pppp.item(it) = p
    End If
 Case 6
    Identifier = False
    If FastSymbol(rest$, ")") Then
        Identifier = globalArrByPointer(bs, basestack, what$, flag2): If Not Identifier Then SyntaxError: Exit Do
    Else
        If neoGetArray(basestack, what$, pppp) And Not flag2 Then
            If Not NeoGetArrayItem(pppp, bs, what$, it, rest$) Then Exit Do
        Else
            Exit Do
        End If
        If Not bs.IsString(s$) Then MissStackStr: Exit Do
        Identifier = True
        If Not IsObject(pppp.item(it)) Then
            pppp.item(it) = s$
        Else
            Set pppp.item(it) = New Document
            CheckVar pppp.item(it), s$

        End If
    End If
Case 7
    Identifier = False
    If FastSymbol(rest$, ")") Then
        Identifier = globalArrByPointer(bs, basestack, what$, flag2): If Not Identifier Then SyntaxError: Exit Do
    Else
        If neoGetArray(basestack, what$, pppp) And Not flag2 Then
            If Not NeoGetArrayItem(pppp, bs, what$, it, rest$) Then Exit Do
        Else
            Exit Do
        End If
        If Not bs.IsNumber(p) Then MissStackNumber: Exit Do
        Identifier = True
        pppp.item(it) = Int(p)
    End If
End Select
End If
loopcont123:
Loop Until Not FastSymbol(rest$, ",")

Case "DOUBLE", "ÄÉÐËÁ"

SetDouble basestack.Owner


Case "NORMAL", "ÊÁÍÏÍÉÊÁ"

SetNormal basestack.Owner

Case "ERROR", "ËÁÈÏÓ"

x1 = LastErNum
If IsExp(basestack, rest$, p) Then
If p = 0 Then
NERR = True
Identifier = False
Exit Function
ElseIf p = -1 Then
NERR = False
Identifier = False
Exit Function
Else
If p = -2 Then
 ISSTRINGA rest$, s$
 ISSTRINGA rest$, ss$
MyEr s, ss$
If basestack.IamThread Then
On Error Resume Next
basestack.Parent.ThrowThreads
NERR = False
Identifier = False
Exit Function
End If
Identifier = False
Exit Function

Else
MyEr "ERROR " & Trim$(Str$(p)), "ËÁÈÏÓ " & Trim$(Str$(p))
LastErNum = p
End If
End If
ElseIf IsStrExp(basestack, rest$, s$) Then
MyEr what$ & " " & s$, what$ & " " & s$
Else
LastErNum = 0 ': LastErNum1 = 0
LastErNameGR = ""
LastErName = ""

Identifier = True
Exit Function
End If

Identifier = False

    
Case "DIM", "ÐÉÍÁÊÁÓ", "ÐÉÍÁÊÅÓ"
Do

    it = Abs(IsLabelDIM(basestack, rest$, w$))
 
    If MaybeIsSymbol(rest$, ")") Then rest$ = "0" + rest$
    
    ''*********************
    If neoGetArray(basestack, w$, pppp, HERE$ <> "") Then
   ' ïëïé ïé ðéíáêåò ìðïñïýí íá êÜíïõí resize...
   ' áêüìá êáé delete áí åðéëÝîïõìå 0 óôç ðñþôç äéÜóôáóç
       Select Case it
    Case 5, 6, 7
   GlobalArrResize pppp, basestack, w$, rest$, I, f ''basestack.GroupName &
   p = I
    If I < 0 Then it = 0
    Case Else
    it = 0
    End Select
   Else
    Select Case it
    Case 5, 6, 7
    GlobalArr basestack, w$, rest$, I, f ''basestack.GroupName &
    p = I
    If I < 0 Then it = 0
    Case Else
    it = 0
    End Select
    End If
    Select Case it
    Case 5
    x = 0
      If FastSymbol(rest$, "=") Then
    If IsExp(basestack, rest$, x) Then
    If neoGetArray(basestack, w$, pppp) Then '' basestack.GroupName & f
         If Not basestack.LastObj Is Nothing Then
                                If Typename(basestack.LastObj) = "Group" Then
                                Set pppp.GroupRef = basestack.LastObj
                                
                                 pppp.IHaveClass = True
                                Set basestack.LastObj = Nothing
                                pppp.SerialItem 0, 0, 3
                                End If
     Else
            pppp.SerialItem x, 0, 3
    End If
    End If
    Else
    it = 0
    End If
    End If
    Case 7
    x = 0
    If FastSymbol(rest$, "=") Then
    If IsExp(basestack, rest$, x) Then
   If neoGetArray(basestack, w$, pppp) Then ''basestack.GroupName &
    pppp.SerialItem Int(x), 0, 3
    End If
    Else
    it = 0
    End If
    End If
    Case 6
        s$ = ""
    If FastSymbol(rest$, "=") Then
    If IsStrExp(basestack, rest$, s$) Then
   If neoGetArray(basestack, w$, pppp) Then '' basestack.GroupName &
    pppp.SerialItem s$, 0, 3
    End If
    Else
    it = 0
    End If
    End If
    End Select
    If it = 0 Then
      MyEr "Array dimensions missing ", "Ï ðßíáêáò äåí Ý÷åé äéáóôÜóåéò "

    rest$ = basestack.GroupName & w$ & rest$
    Identifier = False
    Exit Function
    End If
    
Loop Until Not FastSymbol(rest$, ",")
Exit Function
Case "SET", "ÈÅÓÅ"
Identifier = interpret(basestack, GetNextLine(rest$))

Exit Function
Case "NEW", "ÍÅÏ"
If (basestack.Process Is Nothing) And (basestack.Parent Is Nothing) Then
Set basestack.StaticCollection = New Collection
abt = False
LASTPROG$ = ""

If lang = 0 Then
sHelp "Ì2000 [ÂÏÇÈÅÉÁ]", "ÃñÜøå ÔÅËÏÓ ãéá íá âãåßò áðü ôï ðñüãñáììá" & vbCrLf & "Äåò ôá ÏËÁ (êÜíå êëéê óôï ÏËÁ)" & vbCrLf & "George Karras 2014", (ScrX() - 1) * 3 / 5, (ScrY() - 1) * 1 / 7
Else
sHelp "Ì2000 [HELP]", "Write END for exit from this program" & vbCrLf & "See ALL commands  (click on ALL)" & vbCrLf & "George Karras 2014", (ScrX() - 1) * 3 / 5, (ScrY() - 1) * 1 / 7
End If
NERR = False
lckfrm = 0
subHash.ReduceHash 0, sbf()
sb2used = 0
ReDim sbf(50) As modfun
TaskMaster.Dispose

CloseAllConnections
CleanupLibHandles
' This is the INPUT END
If Not NOEDIT Then
NOEDIT = True
Else
If QRY Then QRY = False
End If
' restore DB.Provider for User
JetPrefixUser = JetPrefixHelp
JetPostfixUser = JetPostfixHelp
End If
Case "EDIT", "ÓÕÃÃÑÁÖÇ", "Ó"
Identifier = ProcEdit(basestack, rest$, lang)
Exit Function
Case "SCAN", "ÓÁÑÙÓÅ"
If Not Targets Then MyDoEvents: Exit Function
If basestack.Owner.Visible = False Then basestack.Owner.Visible = True
basestack.Owner.SetFocus

NoAction = False

nomore = True
If IsExp(basestack, rest$, p) Then
y = Timer + p

Do ' TOO
MyDoEvents
Loop Until NoAction Or Timer > y Or NOEXECUTION
    'End If
Else
Do ' TOO
 MyDoEvents
If FKey > 0 Then
If FK$(FKey) <> "" Then
rest$ = FK$(FKey) + rest$
FKey = 0
Exit Do
End If
End If
Loop Until NoAction Or NOEXECUTION
End If
nomore = False ' TOO
Case "ÐÅÍÁ", "PEN"
Identifier = ProcPen(basestack, rest$, lang)
Exit Function
Case "ÏÈÏÍÇ", "CLS"
Identifier = ProcCls(basestack, rest$, lang)
Exit Function
Case "HEX", "ÄÅÊÁÅÎ"
Identifier = RevisionPrint(basestack, rest$, 1, lang)
Case "PRINT", "ÔÕÐÙÓÅ", "?"
' check permission
Identifier = RevisionPrint(basestack, rest$, 0, lang)
Exit Function
Case Else
myIdentifier = False
x1 = Len(rest$)
If Not I2(basestack, what$, rest$, myIdentifier, lang) Then
JUMPHEREFORMODULESFAST:
                myIdentifier = True
                '''START TO SEE MODULES...HERE
          If GetSub(what$, y1) Then
               it = 0
            ElseIf GetSub(ohere$ & "." & what$, y1) Then
it = 1
            Else
    rest$ = what$ + rest$
                   MyEr "unknown module " & what$, "¢ãíùóôï ôìÞìá " & what$
                   
                   Identifier = False
                   Exit Function
                   End If
                If NORUN1 Then rest$ = "": Exit Function
                par = PushParamGeneral(basestack, rest$)
                If LastErNum = -2 Then
               If Left$(rest$, 12) <> " : ERROR -2" Then rest$ = ""
        
                Identifier = True
                
                Exit Function
                Else
                If Not par Then Identifier = False: Exit Function
            End If
            x1 = y1
            If Len(what$) = 0 Then Identifier = False: Exit Function
            what$ = myUcase(what$):   MakeThisSub basestack, what$
            
            If it = 0 Then
                HERE$ = what$
            Else
                HERE$ = ohere$ & "." & what$
            End If
            
            If HERE$ <> ohere$ Then

                If Not ProcModuleEntry(basestack, ohere$, x1, rest$) Then GoTo NERR
   
    
            Else
NERR:
          
                        If Err.Number = 6 Then
                                Err.clear
                                MyErMacro rest$, "Overflow long, expect lower than (2147483648)", "Õðåñ÷åßëéóç áêåñáßïõ, ðåñéìÝíù ìéêñüôåñï áðü (2147483648)"
                        Else
                                Err.clear
                                MyErMacro rest$, "unknown identifier " & what$, "¢ãíùóôï áíáãíùñéóôéêü " & what$
                        End If
                        Identifier = True
            End If
End If
If Not myIdentifier Then
Identifier = False: Exit Function
End If
End Select


End Function
Private Function IfierVal()
If LastErNum <> 0 Then LastErNum = 0: IfierVal = True
End Function
Private Sub OutOfLimit()
  MyEr "Out of limit", "Åêôüò ïñßïõ"
End Sub

Private Sub MissCdib()
  MyEr "Missing IMAGE", "Ëåßðåé åéêüíá"
End Sub
Private Sub BadObjectDecl()
  MyEr "Bad object declaration", "ËÜèïò üñéóìá áíôéêåéìÝíïõ"
End Sub
Private Sub MissCdibStr()
  MyEr "Missing IMAGE in string", "Ëåßðåé åéêüíá óôï áëöáñéèìçôéêü"
End Sub
Private Sub MissStackStr()
  MyEr "Missing string value from stack", "Ëåßðåé áëöáñéèìçôéêü áðü ôï óùñü"
End Sub
Private Sub MissStackItem()
 MyEr "Missing item from stack", "Ëåßðåé êÜôé áðü ôï óùñü"
End Sub
Private Sub MissStackNumber()
 MyEr "Missing number value from stack", "Ëåßðåé áñéèìüò áðü ôï óùñü"
End Sub
Private Sub MissNumExpr()
MyEr "Missing number expression", "Ëåßðåé áñéèìçôéêÞ ðáñÜóôáóç"
End Sub
Private Sub MissLicence()
MyEr "Missing Licence", "Ëåßðåé ¢äåéá"
End Sub
Private Sub MissStringExpr()
MyEr "Missing string expression", "Ëåßðåé áëöáñéèìçôéêÞ ðáñÜóôáóç"
End Sub
Public Sub BadFilename()
MyEr "Bad filename", "ËÜèïò óôï üíïìá áñ÷åßïõ"
End Sub
Public Sub BadPath()
MyEr "Bad Path name", "ËÜèïò óôï üíïìá öáêÝëïõ (ôüðï)"
End Sub
Public Sub BadReBound()
MyEr "Can't commit a reference here", "Äåí ìðïñþ íá áíáèÝóù åäþ ìéá áíáöïñÜ"
End Sub
Public Sub oxiforPrinter()
MyEr "Not allowed this command for printer", "Äåí åðéôñÝðåôáé áõôÞ ç åíôïëÞ ãéá ôïí åêôõðùôÞ"
End Sub
Public Sub SyntaxError()
If LastErName = "" Then
MyEr "Syntax Error", "Óõíôáêôéêü ËÜèïò"
Else
If LastErNum = 0 Then LastErNum = -1 ' general
LastErNum1 = LastErNum
End If
End Sub
Public Sub MissingnumVar()
MyEr "missing numeric variable", "ëåßðåé áñéèìçôéêÞ ìåôáâëçôÞ"
End Sub
Public Sub BadGraphic()
MyEr "Can't operate graphic", "äåí ìðïñþ íá ÷åéñéóôþ ôï ãñáöéêü"
End Sub
Public Sub SelectorInUse()
MyEr "File/Folder Selector in Use", "Ï åðéëïãÝáò áñ÷åßùí/öáêÝëùí åßíáé óå ÷ñÞóç"
End Sub
Public Sub MissingDoc()  ' this is for identifier or execute part
MyEr "missing document type variable", "ëåßðåé ìåôáâëçôÞ ôýðïõ åããñÜöïõ"
End Sub
Sub MissFuncParammeterdOCVar(ar$)
MyErMacro ar$, "Not a Document variable", "Äåí åßíáé ìåôáâëçôÞ ôýðïõ åããñÜöïõ"
End Sub
Public Sub MissingBlock()  ' this is for identifier or execute part
MyEr "missing block {} or string expression", "ëåßðåé êþäéêáò óå {} ç áëöáñéèìçôéêÞ Ýêöñáóç"
End Sub
Public Sub ErrNum()
MyEr "Error in number", "ËÜèïò óôïí áñéèìü"
End Sub
Public Sub NotExistArray()  ' this is for identifier or execute part
MyEr "Array not exist", "Äåí õðÜñ÷åé ôÝôïéïò ðßíáêáò"
End Sub
Public Sub MissingGroup()  ' this is for identifier or execute part
MyEr "missing group type variable", "ëåßðåé ìåôáâëçôÞ ôýðïõ ïìÜäáò"
End Sub
Public Sub BadGroupHandle()  ' this is for identifier or execute part
MyEr "group isn't variable", "ç ïìÜäá äåí åßíáé ìåôáâëçôÞ"
End Sub
Public Sub MissingDocRef()  ' this is for identifier or execute part
MyEr "invalid document pointer", "ìç Ýãêõñïò äåßêôçò åããñÜöïõ"
End Sub
Public Sub MissingObj()
MyEr "missing object type variable", "ëåßðåé ìåôáâëçôÞ ôýðïõ áíôéêåéìÝíïõ"
End Sub
Public Sub BadGetProp()
MyEr "Can't Get Property", "Äåí ìðïñþ íá äéáâÜóù áõôÞ ôçí éäéüôçôá"
End Sub
Public Sub BadLetProp()
MyEr "Can't Let Property", "Äåí ìðïñþ íá ãñÜøù áõôÞ ôçí éäéüôçôá"
End Sub
Public Sub MissingObjRef()
MyEr "invalid object pointer", "ìç Ýãêõñïò äåßêôçò áíôéêåéìÝíïõ"
End Sub
Public Sub MissingStrVar()  ' this is for identifier or execute part
MyEr "missing string variable", "ëåßðåé áëöáñéèìçôéêÞ ìåôáâëçôÞ"
End Sub
Public Sub NoSwap(nameOfvar$)
MyEr "Can't swap ", "Äåí ìðïñþ íá áëëÜîù ôéìÝò "
End Sub
Public Sub Nosuchvariable(nameOfvar$)
MyEr "No such variable " + nameOfvar$, "äåí õðÜñ÷åé ôÝôïéá ìåôáâëçôÞ " + nameOfvar$
End Sub
Public Sub NameConflict()
   MyEr "Group Name Has Module name ", "Ôï üíïìá ïìÜäáò åßíáé êáé üíïìá ôïõ ôìÞìáôïò"
End Sub
Public Sub NoReference()
   MyEr "No reference exist", "Äåí õðÜñ÷åé áíáöïñÜ"
End Sub
Public Sub NoSecReF()
MyEr "No reference allowed - use new variable", "Äåí äÝ÷åôáé áíáöïñÜ - ÷ñçóéìïðïßçóå íÝá ìåôáâëçôÞ"
End Sub
Public Sub NoValueForvariable(nameOfvar$)
 MyEr "No value for variable " & nameOfvar$, "×ùñßò ôéìÞ ç ìåôáâëçôÞ " & nameOfvar$
 End Sub
Sub MissSymbolMyEr(wht$)   ' not the macro one
MyEr "missing " & wht$, "ëåßðåé " & wht$
End Sub
Sub BadCommand()
 MyEr "Command for supervisor rights", "ÅíôïëÞ ìüíï ãéá åðüðôç"
End Sub
Sub FilePathNotForUser()
MyEr "Filepath is not valid for user", "Ï ôüðïò ôïõ áñ÷åßïõ äåí åßíáé Ýãêõñïò ãéá ôïí ÷ñÞóôç"
End Sub

' used to isnumber
Sub MyErMacro(wher$, en$, gr$)
LastErNum = -2
wher$ = " : ERROR -2" & Sput(en$) + Sput(gr$) + wher$
 
End Sub
Sub ZeroParam(ar$)   ' we use MyErMacro in isNumber and isString
MyErMacro ar$, "Empty parameter", "ÌçäåíéêÞ ðáñÜìåôñïò"
End Sub
Sub MissPar()
MyEr "missing parameter", "ëåßðåé ðáñÜìåôñïò"
End Sub
Sub MissParam(ar$)
MyErMacro ar$, "missing parameter", "ëåßðåé ðáñÜìåôñïò"
End Sub
Sub MissFuncParameterStringVar()
MyEr "Not a string variable", "Äåí åßíáé áëöáñéèìçôéêÞ ìåôáâëçôÞ"
End Sub
Sub MissFuncParameterStringVarMacro(ar$)
MyErMacro ar$, "Not a string variable", "Äåí åßíáé áëöáñéèìçôéêÞ ìåôáâëçôÞ"
End Sub
Sub NoSuchFolder(ar$)
MyErMacro ar$, "No such folder", "Äåí õðÜñ÷åé ôÝôïéïò öÜêåëïò"
End Sub
Sub MissSymbol(ar$, wht$)
MyErMacro ar$, "missing " & wht$, "ëåßðåé " & wht$
End Sub
Function I2(bstack As basetask, what$, rest$, ifier As Boolean, lang As Long) As Boolean
'Dim Process As Object, bstack As basetask
Dim p As Double, I As Long, s$, x As Double, y As Double, it As Long, f As Long, pa$
Dim x1 As Long, y1 As Long, frm$, par As Boolean, ohere$, ss$, w$, sx As Double, sy As Double
Dim col As Long, thisid As Long, photo As Object, ML As Long, bs As basetask, vvl As Variant
Dim stac1$, DUM As Boolean
Dim pppp As mArray, pppp1 As mArray
On Error GoTo 0
ifier = True
I2 = True
' FOR ERRORS IN I2 (Ifier SECOND PART)
' USE IFIER=FALSE AND NOT I2=FALSE
' A I2=FALSE DO IFIER TRUE...WHEN EXIT I2
' using I2 = false for threads
Select Case what$
Case "PUSH", "ÂÁËÅ"
Do
  
       If IsExp(bstack, rest$, p) Then
                If Not bstack.LastObj Is Nothing Then
                        bstack.soros.PushObj bstack.LastObj
                Else
                        bstack.soros.PushVal p
                End If
        ElseIf IsStrExp(bstack, rest$, s$) Then
        If Not bstack.LastObj Is Nothing Then
                        bstack.soros.PushObj bstack.LastObj
                Else
                        bstack.soros.PushStr s$
                End If
        Else
                Exit Do
        End If
        If Not FastSymbol(rest$, ",") Then Exit Do
Loop
Case "DATA", "ÓÅÉÑÁ"
Do
        If IsExp(bstack, rest$, p) Then
        If Not bstack.LastObj Is Nothing Then
                If Typename(bstack.LastObj) = "Group" Then
                        Set vvl = bstack.LastObj
                        
                        CopyGroup vvl, bstack
                        Set photo = vvl
                                bstack.soros.DataObj photo
                        Else
                                bstack.soros.DataObj bstack.LastObj
                        End If
                Else
                        bstack.soros.DataVal p
                End If
        ElseIf IsStrExp(bstack, rest$, s$) Then
                If Not bstack.LastObj Is Nothing Then
                        bstack.soros.DataObj bstack.LastObj
                Else
                        bstack.soros.DataStr s$
                End If
        Else
                Exit Do
        End If
        If Not FastSymbol(rest$, ",") Then Exit Do
Loop


Case "SWAP", "ÁËËÁÎÅ"

    f = Abs(IsLabel(bstack, rest$, s$))
    
    If f = 1 Or f = 4 Then col = 1  'WE NEED NUMBERS
    If f = 5 Or f = 7 Then col = 2 'WE NEED NUMBERS
    If f = 0 Then MissingnumVar:  Exit Function
    If (f = 3 Or f = 6) And col > 0 Then SyntaxError: ifier = False:    Exit Function
    If col = 1 Then
        If GetVar(bstack, s$, f) Then
                If Not FastSymbol(rest$, ",") Then MissingnumVar:  Exit Function
                I = Abs(IsLabel(bstack, rest$, ss$))
              If I = 1 Or I = 4 Then
                If GetVar(bstack, ss$, x1) Then
                
                    SwapVariant var(f), var(x1)
                    
                    
                Exit Function
                Else
                    Nosuchvariable ss$
                    ifier = False
                    Exit Function
                End If
            ElseIf I = 5 Or I = 7 Then
                If neoGetArray(bstack, ss$, pppp) Then
                    If Not NeoGetArrayItem(pppp, bstack, ss$, x1, rest$, True) Then Exit Function
               
                    SwapVariant2 var(f), pppp, x1
                    
                    
                Else
                
                    NoSwap ss$
                    ifier = False
                    Exit Function
                End If
            Else
                MissingnumVar
                ifier = False
                Exit Function
            End If
        Else
            Nosuchvariable s$
            
            Exit Function
        End If
    ElseIf col = 2 Then
        If neoGetArray(bstack, s$, pppp) Then
            If Not NeoGetArrayItem(pppp, bstack, s$, f, rest$) Then Exit Function
            If Not FastSymbol(rest$, ",") Then MissingnumVar:  Exit Function
                I = Abs(IsLabel(bstack, rest$, ss$))
                  
            If I = 1 Or I = 4 Then
                    If GetVar(bstack, ss$, x1) Then
                    If pppp.IHaveClass Then
                            NoSwap ""
                    Else
                         SwapVariant2 var(x1), pppp, f
                     End If
                        
                    Else
                        MissingnumVar
                        ifier = False
                        Exit Function
                    End If
            ElseIf I = 5 Or I = 7 Then
                    If neoGetArray(bstack, ss$, pppp1) Then
                    
                        If Not NeoGetArrayItem(pppp1, bstack, ss$, x1, rest$) Then Exit Function
                   If pppp.IHaveClass Xor Not pppp1.IHaveClass Then
                            
                        SwapVariant3 pppp, f, pppp1, x1
                        If pppp.IHaveClass Then
                            Set pppp.item(f).LinkRef = pppp1.GroupRef
                            Set pppp1.item(x1).LinkRef = pppp.GroupRef
                            End If
                        Else
                        NoSwap ""
                        Exit Function
                        End If
                        
                    Else
                        MissingnumVar
                        
                        Exit Function
                    End If
            Else
                MissingnumVar
                
                Exit Function
            End If
        Else
            MissingnumVar
            
            Exit Function
        End If
    ElseIf f = 3 Then
            If GetVar(bstack, s$, f) Then
            If Not FastSymbol(rest$, ",") Then MissingnumVar:  Exit Function
                I = Abs(IsLabel(bstack, rest$, ss$))
                 If I = 6 Then
                    If Not neoGetArray(bstack, ss$, pppp) Then MissingStrVar:  Exit Function
                    If Not NeoGetArrayItem(pppp, bstack, ss$, x1, rest$) Then Exit Function

                    SwapVariant2 var(f), pppp, x1

                ElseIf I = 3 Then
                    If Not GetVar(bstack, ss$, x1) Then: Exit Function

                   SwapVariant var(f), var(x1)
                Else
                MissFuncParameterStringVar
                ifier = False
                End If
                
                
            Else
                    
                    MissFuncParameterStringVar
                    ifier = False
            End If
    ElseIf f = 6 Then
            If neoGetArray(bstack, s$, pppp) Then
                If Not NeoGetArrayItem(pppp, bstack, s$, x1, rest$) Then Exit Function
                If Not FastSymbol(rest$, ",") Then MissingnumVar:  Exit Function
                I = Abs(IsLabel(bstack, rest$, ss$))
     
                If I = 6 Then
                    If Not neoGetArray(bstack, ss$, pppp1) Then MissingStrVar:  Exit Function
                    If Not NeoGetArrayItem(pppp1, bstack, ss$, I, rest$) Then Exit Function

                   SwapVariant3 pppp, x1, pppp1, I
 
                ElseIf I = 3 Then
                    If Not GetVar(bstack, ss$, I) Then: Exit Function

                  SwapVariant2 var(I), pppp, x1
                    Else
                MissFuncParameterStringVar
                ifier = False
                End If
                
                
            Else
                
                MissPar
                ifier = False
                
            End If
    Else
                 
                MissPar
                ifier = False
    End If
    Exit Function

Case "CLOSE", "ÊËÅÉÓÅ"
If Not IsLabelSymbolNew(rest$, "ÂÁÓÇ", "BASE", lang) Then
    par = False
    Do
        IsSymbol3 rest$, "#" ' optional
        If IsExp(bstack, rest$, p) Then
            p = Abs(p) Mod 512
            Close Abs(p)
            FLEN(p) = 0
        Else
            If par Then
                ifier = False
            Else
                closeAll
            End If
        Exit Do
        End If
        par = True
    Loop Until Not FastSymbol(rest$, ",")
Else
Do
If IsStrExp(bstack, rest$, ss$) Then
RemoveOneConn ss$
End If
Loop Until Not FastSymbol(rest$, ",")
End If
Case "SEEK", "ÌÅÔÁÈÅÓÇ"
 IsSymbol3 rest$, "#"   ' OPTIONAL   ...SEEK #I, 10020  ÂÕÔÅ
If IsExp(bstack, rest$, x) Then
x1 = Abs(x) Mod 512
If FLEN(x1) = 0 Then
ifier = False
MyEr "not valid file number", "ëÜèïò áñéèìüò áñ÷åßïõ"
Exit Function
End If
If FLEN(x1) <> 1 Then
ifier = False
MyEr "not valid file type", "ëÜèïò ÔÕÐÏÓ áñ÷åßïõ"
Exit Function
End If
If Not FastSymbol(rest$, ",") Then
MissNumExpr
Else
If IsExp(bstack, rest$, x) Then
Seek #x1, x
Else
''''Ifier = False  'I HAVE TO LOOK THAT
MissNumExpr
End If
End If
End If
Case "APPEND.DOC", "ÐÑÏÓÈÅÓÅ.ÅÃÃÑÁÖÏ"
DUM = True
GoTo SSAVVE
Case "SAVE.DOC", "ÓÙÓÅ.ÅÃÃÑÁÖÏ"
SSAVVE:
    y1 = Abs(IsLabel(bstack, rest$, s$))
         If y1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, I, rest$) Then Exit Function
                Else
                MissingDoc
                Exit Function
                End If
    End If
    If FastSymbol(rest$, ",") Then
    If Not IsStrExp(bstack, rest$, w$) Then
    MissStringExpr
    ifier = False
    Exit Function
    End If
    ss$ = GetNextLine(w$)
    SetNextLine w$
    If w$ <> "" Then
    MyEr "filename with line breaks", "üíïìá áñ÷åßïõ ìå áëëáãÝò ãñáììþí"
    ifier = False
    Exit Function
    End If
    ' check valid name
    If ExtractNameOnly(ss$) = "" Then BadFilename:  Exit Function
    If ExtractPath(ss$) = "" Then
    ss$ = mylcasefILE(mcd + ss$)
    End If
    If ExtractType(ss$) = "" Then ss$ = ss$ + ".txt"
    Else
    ifier = False
    MissPar
    Exit Function
    End If
    
     If FastSymbol(rest$, ",") Then
        If Not IsExp(bstack, rest$, p) Then    'type...for saving
        ifier = False
        MissNumExpr
        Exit Function
        End If
        x1 = CLng(p)
     Else
        x1 = -1 ' ' 2 = utf-8 standard save mode
    End If
    
        If y1 = 3 Then
            If GetVar(bstack, s$, I) Then
                If Typename(var(I)) = doc Then
                         If x1 = -1 Then
                    If var(I).ListLoadedType <> 0 Then
                    x1 = var(I).ListLoadedType
                    Else
                    x1 = 2
                    End If
                    End If
                    If CanKillFile(ss$) Then
                     If Not var(I).SaveUnicodeOrAnsi(ss$, x1, DUM) Then
                       MyEr "can't save " + ss$, "äåí ìðïñþ íá óþóù " + ss$
                      End If
                      Else
                      FilePathNotForUser
                      ifier = False
                      End If
                Else
                    MissingDoc
                    ifier = False
                End If
            Else
                   MissFuncParameterStringVar
                    ifier = False
            End If
        ElseIf y1 = 6 Then
                    If Typename(pppp.item(I)) = doc Then
                    If x1 = -1 Then
                    If pppp.item(I).ListLoadedType <> 0 Then
                    x1 = pppp.item(I).ListLoadedType
                    Else
                    x1 = 2
                    End If
                    End If
                    If CanKillFile(ss$) Then
                     If Not pppp.item(I).SaveUnicodeOrAnsi(ss$, x1, DUM) Then
                       MyEr "can't save " + ss$, "äåí ìðïñþ íá óþóù " + ss$
                       ifier = False
                      End If
                      Else
                      FilePathNotForUser
                      ifier = False
                      End If
                        Else
                         MissingDoc
                         ifier = False
                        End If
                    
    Else
                    
                MissPar
                ifier = False
    End If
    Exit Function
Case "MERGE.DOC", "ÓÕÃ×ÙÍÅÕÓÅ.ÅÃÃÑÁÖÏ"
DUM = True
    GoTo loaddoc
Case "LOAD.DOC", "ÖÏÑÔÙÓÅ.ÅÃÃÑÁÖÏ"
loaddoc:
    y1 = Abs(IsLabel(bstack, rest$, s$))

        If y1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, I, rest$) Then Exit Function
                Else
                MissingDoc
                ifier = False
                Exit Function
                End If
    End If
    If FastSymbol(rest$, ",") Then
    If Not IsStrExp(bstack, rest$, frm$) Then
    MissStringExpr
    ifier = False
    Exit Function
    End If
    ss$ = GetNextLine(frm$)
    SetNextLine frm$
    If frm$ <> "" Then
    MyEr "filename with line breaks", "üíïìá áñ÷åßïõ ìå áëëáãÝò ãñáììþí"
    ifier = False
    End If
    ' check valid name
    If ExtractNameOnly(ss$) = "" Then BadFilename:  Exit Function
    If ExtractPath(ss$) = "" Then
    ss$ = mylcasefILE(mcd + ss$)
    End If
    If ExtractType(ss$) = "" Then ss$ = ss$ + ".txt"
    Else
    ifier = False
    MissPar
    Exit Function
    End If
    
   
        If y1 = 3 Then
            If GetVar(bstack, s$, I) Then
                If Typename(var(I)) = doc Then

                x1 = 2
                var(I).ReadUnicodeOrANSI ss$, DUM, x1
                 var(I).ListLoadedType = x1
                 Exit Function
                Else
                    MissingDoc
                    ifier = False
                End If
            Else
                   MissFuncParameterStringVar
                    ifier = False
            End If
        ElseIf y1 = 6 Then
                    If Typename(pppp.item(I)) = doc Then
                                    x1 = 2
                pppp.item(I).ReadUnicodeOrANSI ss$, DUM, x1
                 pppp.item(I).ListLoadedType = x1
                    
                        Else
                         MissingDoc
                         ifier = False
                        End If
                    
    Else
                    
                MissPar
                ifier = False
    End If
    Exit Function

Case "FIND", "ÅÕÑÅÓÇ"

    y1 = Abs(IsLabel(bstack, rest$, s$))
     
        If y1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, I, rest$) Then Exit Function
                Else
                MissingDoc
                ifier = False
                Exit Function
                End If
    End If
    If FastSymbol(rest$, ",") Then
    If Not IsStrExp(bstack, rest$, frm$) Then
    MissStringExpr
    ifier = False
    Exit Function
    End If
    ss$ = GetNextLine(frm$)
    SetNextLine frm$
    If frm$ <> "" Then
    MyEr "Search string with line breaks", "Áëöáñéèìçôéêü áíáæÞôçóçò ìå áëëáãÝò ãñáììþí"
    ifier = False
    End If
    Else
    ifier = False
    MissPar
    Exit Function
    End If
    
     If FastSymbol(rest$, ",") Then
        If Not IsExp(bstack, rest$, p) Then
        ifier = False
        MissNumExpr
        ifier = False
        Exit Function
        End If
        x1 = CLng(p)
     Else
        x1 = 0
    End If
    
        If y1 = 3 Then
            If GetVar(bstack, s$, I) Then
                If Typename(var(I)) = doc Then
                
                     x1 = var(I).FindStr(ss$, x1, y1, col)
                     If x1 > 0 Then
                        bstack.soros.PushVal CDbl(col)  ' CHAR IN PARAGRAPH
                        bstack.soros.PushVal CDbl(y1)   'PARAGRAPH ORDER ..NUMBER START FROM 1
                     End If
                        bstack.soros.PushVal CDbl(x1)   ' POSITION IN ALL DOCUMENT
                    
                Else
                    MissingDoc
                    ifier = False
                End If
            Else
                   MissFuncParameterStringVar
                    ifier = False
            End If
        ElseIf y1 = 6 Then
                    If Typename(pppp.item(I)) = doc Then
          
                        x1 = pppp.item(I).FindStr(ss$, x1, y1, col)
                            If x1 > 0 Then
                               bstack.soros.PushVal CDbl(col)  ' CHAR IN PARAGRAPH
                               bstack.soros.PushVal CDbl(y1)   'PARAGRAPH ORDER ..NUMBER START FROM 1
                            End If
                        bstack.soros.PushVal CDbl(x1)   ' POSITION IN ALL DOCUMENT
                    
              
                        Else
                         MissingDoc
                         ifier = False
                        End If
                    
    Else
                    
                MissPar
                ifier = False
    End If
    Exit Function
Case "WORDS", "ËÅÎÅÉÓ"


    y1 = Abs(IsLabel(bstack, rest$, s$))

    If y1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, I, rest$) Then Exit Function
                Else
                MissingDoc
                ifier = False
                Exit Function
                End If
    End If
    If FastSymbol(rest$, ",") Then
        If Not IsExp(bstack, rest$, sx) Then    ' FROM
            MissNumExpr
            ifier = False
            Exit Function
        End If
    Else
 sx = 1
    End If
    
        If y1 = 3 Then
            If GetVar(bstack, s$, I) Then
                If Typename(var(I)) = doc Then
                bstack.soros.Begin 1
                var(I).ExportWords2ObjectAddItem bstack.soros, sx <> 0
                var(I).ResetWords
                    
                Else
                    MissingDoc
                    ifier = False
                End If
            Else
                   MissFuncParameterStringVar
                   ifier = False
                    
            End If
        ElseIf y1 = 6 Then
                    If Typename(pppp.item(I)) = doc Then
                        bstack.soros.Begin 1
                         pppp.item(I).ExportWords2ObjectAddItem bstack.soros, sx <> 0
                         pppp.item(I).ResetWords
                      Else
                      MissingDoc
                      ifier = False
                      End If
               
                    
    Else
                    
                MissPar
                ifier = False
    End If
    Exit Function
Case "SORT", "ÔÁÎÉÍÏÌÇÓÇ"
ifier = False
    y1 = Abs(IsLabel(bstack, rest$, s$))
    If y1 = 6 Then
                If neoGetArray(bstack, s$, pppp) Then
                 If Not NeoGetArrayItem(pppp, bstack, s$, I, rest$) Then Exit Function
                Else
                MissingDoc
                Exit Function
                End If
    End If
    If FastSymbol(rest$, ",") Then
        If Not IsExp(bstack, rest$, sx) Then    ' FROM
            If FastSymbol(rest$, ",") Then
            sx = 1
                GoTo sort2
            Else
                MissNumExpr
                Exit Function
            End If
        End If
    Else
 sx = 1
    End If
    
     If FastSymbol(rest$, ",") Then
sort2:
        If Not IsExp(bstack, rest$, p) Then   ' TO
            If FastSymbol(rest$, ",") Then
            x1 = 0
                GoTo sort3
            Else
                MissNumExpr
                Exit Function
            End If
        End If
        x1 = CLng(p)
     Else
        x1 = 0    ' TO THE LAST
    End If
         If FastSymbol(rest$, ",") Then
sort3:
        If Not IsExp(bstack, rest$, sy) Then   ' TO
                        MissNumExpr
                        Exit Function
        End If
        ML = CLng(sy)
     Else
        ML = 1   ' KEYSTART
    End If
        If y1 = 3 Then
            If GetVar(bstack, s$, I) Then
                If Typename(var(I)) = doc Then
                            var(I).SortDoc ML, CLng(sx), x1
                            ifier = True '*******************************************
                Else
                   MissingDoc
                End If
            Else
                   MissFuncParameterStringVar
            End If
        ElseIf y1 = 6 Then
                    If Typename(pppp.item(I)) = doc Then
                                pppp.item(I).SortDoc ML, CLng(sx), x1
                                ifier = True  '*****************************************
                      Else
                                MissingDoc
                      End If
        Else
                    MissPar
        End If
    Exit Function

Case "OVER", "ÐÁÍÙ"  'ÁÍÔÉÃÑÁÖÅÉ ÔÇÍ ÊÏÑÕÖÇ
If Not IsExp(bstack, rest$, x) Then x = 1
    If x <= 0 Then
         
            MyEr "No negatives or zero", "¼÷é áñíçôéêïß Þ ìçäÝí"
    Exit Function
    End If
    If x > bstack.soros.Total Then
        MissStackItem
        
        Exit Function
    Else
    bstack.soros.Copy2TopItem CLng(x)

    End If
Case "SHIFTBACK", "ÖÅÑÅÐÉÓÙ"  'ÌÅÔÁÊÉÍÅÉ ÁÐÏ ÔÇÍ ÊÏÑÕÖÇ
If Not IsExp(bstack, rest$, x) Then x = bstack.soros.Total
If x <= 0 Then
     
        MyEr "No negatives or zero", "¼÷é áñíçôéêïß Þ ìçäÝí"
        ifier = False
Exit Function
End If
If x > bstack.soros.Total Then
MissStackItem
ifier = False
Exit Function
    Else
    bstack.soros.MakeTopItemBack CLng(x)
    
    End If
    
Case "SHIFT", "ÖÅÑÅ"  'ÌÅÔÁÊÉÍÅÉ ÓÔÇÍ ÊÏÑÕÖÇ
If Not IsExp(bstack, rest$, x) Then x = bstack.soros.Total
If x <= 0 Then
     
        MyEr "No negatives or zero", "¼÷é áñíçôéêïß Þ ìçäÝí"
Exit Function
End If
If x > bstack.soros.Total Then
MissStackItem

Exit Function
    Else
    bstack.soros.MakeTopItem CLng(x)
    
    End If

Case "DROP", "ÐÅÔÁ"
If Not IsExp(bstack, rest$, x) Then x = 1
If x < 0 Then
     
        MyEr "No many items to drop from stack", "Äåí õðÜñ÷ïõí ôéìÝò íá ðåôÜîù áðü ôï óùñü"
Exit Function
End If
If x = 0 Then
' do nothing
Else
If x > bstack.soros.Total Then
MissStackItem

Exit Function
    ElseIf x = bstack.soros.Total Then
    bstack.soros.Flush
    Else
    bstack.soros.drop CLng(x)
    End If
    End If

Case "SCREEN.PIXELS", "ÁÍÁËÕÓÇ.ÏÈÏÍÇÓ"
If IsExp(bstack, rest$, x) Then
    If FastSymbol(rest$, ",") Then
        If IsExp(bstack, rest$, y) Then
            ChangeScreenRes CLng(x), CLng(y)
        Else
            
            MissNumExpr
        End If
    Else
        
        SyntaxError
    End If
ElseIf FastSymbol(rest$, "!") Then
    ScreenRestore
Else
    
    MissNumExpr
End If
Exit Function

Case "SOUNDREC", "Ç×ÏÃÑÁÖÇÓÇ"  '*************************************************SOUND RECORDING
' not tested yet...
    If IsLabelSymbolNew(rest$, "ÍÅÁ", "NEW", lang) Then
    Set sRec = New RecordMci
    sRec.Rec_Initialize
    If IsStrExp(bstack, rest$, s$) Then
    
    sRec.FileName = s$
    End If
    If FastSymbol(rest$, ",") Then
    If IsExp(bstack, rest$, p) Then
    ' hz
        If IsLabelSymbolLatin(rest$, "STEREO") Then
        sRec.Stereo
        Else
        sRec.Mono
        End If
        If IsLabelSymbolLatin(rest$, "HIFI") Then
        sRec.Bit16
        Else
        sRec.Bit8
        End If
        sRec.QualityAny p
    End If
    Else
        sRec.RecFast
    End If
    ElseIf Not (sRec Is Nothing) Then
    ss$ = ""
    If IsLabelSymbolNewExp(rest$, "ÅÉÓÁÃÙÃÇ", "INSERT", lang, ss$) Then
        sRec.Capture True
    ElseIf IsLabelSymbolNewExp(rest$, "ÁËËÁÃÇ", "OVERWRITE", lang, ss$) Then
        sRec.ReCapture
    ElseIf IsLabelSymbolNewExp(rest$, "ÁÐÏÊÏÐÇ", "DELETE", lang, ss$) Then
            If IsExp(bstack, rest$, x) Then
            Else
                x = 0
            End If
            If IsLabelSymbolNew(rest$, "ÅÙÓ", "TO", lang) Then
                If Not IsExp(bstack, rest$, y) Then
                    y = sRec.getLengthInMS
                End If
            Else
                y = sRec.getLengthInMS
            End If
            sRec.CutRecordMs x, y
    ElseIf IsLabelSymbolNewExp(rest$, "STOP", "ÄÉÁÊÏÐÇ", lang, ss$) Then
        sRec.recStop
    ElseIf IsLabelSymbolNewExp(rest$, "ÄÏÊÉÌÇ", "TEST", lang, ss$) Then
        sRec.recPlay
    ElseIf IsLabelSymbolNewExp(rest$, "ÈÅÓÇ", "POS", lang, ss$) Then
        If sRec.isRecPlaying Then
            If IsExp(bstack, rest$, x) Then
            sRec.recPlayFromMs x
            Else
            sRec.recPlay
            End If
        Else
        ' SEEK
            If IsExp(bstack, rest$, x) Then
            sRec.oneMCI "seek capture to " & CStr(CLng(x))
            Else
            sRec.oneMCI "seek capture to 0"
            End If
        End If
    ElseIf IsLabelSymbolNewExp(rest$, "ÓÙÓÅ", "SAVE", lang, ss$) Then
        If IsStrExp(bstack, rest$, s$) Then
            sRec.SaveAs s$
        Else
            sRec.Save
        End If
    ElseIf IsLabelSymbolNewExp(rest$, "ÊËÅÉÓÅ", "END", lang, ss$) Then
        Set sRec = Nothing
    End If
    Else
        
        MyEr "You don't have new recording", "Äåí Ý÷åéò åôïéìÜóåé íÝá ç÷ïãñÜöçóç"
    End If
    Exit Function

Case "KEYBOARD", "ÐËÇÊÔÑÏËÏÃÉÏ"   '***********************************************************KEYBOARD ! OPEN osk.exe
If FastSymbol(rest$, "!") Then      '***********************************************************or SEND KEYS to INTERNAL CHARACTER BUFFER
    MyShell "osk.exe"
Else
    par = True    ' KEYBOARD 32,65,"ok"   char as unicode code or string of chars
    Do
        If par = False Then Exit Do
        If IsExp(bstack, rest$, p) Then
            MKEY$ = MKEY$ & ChrW$(Int(p) And &HFFFF)
            par = False
        ElseIf IsStrExp(bstack, rest$, s$) Then
        MKEY$ = MKEY$ & s$
        par = False
        Else
        Exit Do
        End If
        If Not FastSymbol(rest$, ",") Then Exit Do
        par = True
    Loop

End If
Exit Function
Case "JOYPAD", "ËÁÂÇ"
        If IsExp(bstack, rest$, p) Then
        If Not StartJoypadk(Int(p)) Then
        ' ERROR
        MyEr "Joypad " & CStr(p) & " not exist", "ç ëáâÞ " & CStr(p) & " äåí õðÜñ÷åé"
        
        Exit Function
        End If
        While FastSymbol(rest$, ",")
        
         If IsExp(bstack, rest$, p) Then
        If Not StartJoypadk(Int(p)) Then
        MyEr "Joypad " & CStr(p) & " not exist", "ç ëáâÞ " & CStr(p) & " äåí õðÜñ÷åé"
        
        Exit Function

        End If
        Else
        MyEr "Joypad Number?", "Áñéèìüò ËáâÞò?"
        
        Exit Function

        End If
        Wend
        
        Else
        FlushJoyAll
        End If
        Exit Function
Case "PIPE", "ÁÕËÏÓ"
If IsStrExp(bstack, rest$, ss$) Then
If FastSymbol(rest$, ",") Then
stac1$ = ""
Do
If IsExp(bstack, rest$, p) Then
stac1$ = stac1$ & " " & Trim$(Str$(p))
ElseIf IsStrExp(bstack, rest$, s$) Then
stac1$ = stac1$ & Sput(s$)
Else
Exit Do
End If
If Not FastSymbol(rest$, ",") Then Exit Do
Loop
' SEND STAC1$ TO SS$ PIPE
If VALIDATE(stac1$, "", s$) Then
'
' SPUT(SS$)+SPUT(S$)+STAC1$
ifier = Trans2pipe(ss$, Sput(ss$) + Sput(s$) + stac1$)
Exit Function
End If
End If
End If

'End If
Case "GET", "ÐÁÑÅ"
IsSymbol3 rest$, "#"
If IsExp(bstack, rest$, p) Then
    f = p Mod 512
    If Not FastSymbol(rest$, ",") Then Exit Function
    
    Select Case IsLabel(bstack, rest$, what$)
    Case 3
        par = True: If Not GetVar(bstack, what$, it) Then it = GlobalVar(what$, "")
    Case 6
        par = False: If neoGetArray(bstack, what$, pppp) Then If Not NeoGetArrayItem(pppp, bstack, what$, it, rest$) Then Exit Function
    Case Else
        MissingStrVar
        Exit Function
    End Select
    
    If FastSymbol(rest$, ",") Then
        If IsExp(bstack, rest$, p) Then
            I = p Mod 2147483647
            Seek #f, (I - 1) * FLEN(f) + 1
        Else
            MissNumExpr
            Exit Function
        End If
    End If

        s$ = Space(FLEN(f) \ 2)
        getUniString f, s$  '
        If Not Uni(f) Then
        s$ = StrConv(s$, vbUnicode)
        End If
        If par Then
        CheckVar var(it), s$
        Else
        If Typename(pppp.item(it)) = doc Then
            Set pppp.item(it) = New Document
            If s$ <> "" Then pppp.item(it).textDoc = s$
            Else
            pppp.item(it) = s$
            End If
        End If
        End If
Exit Function


Case "ÍÇÌÁ", "THREAD"  ' ************************************************************************* THREAD CONSTRUCT AND HANDLE FROM OTHER POINT
      If FastSymbol(rest$, "{") Then
        frm$ = NLtrim$(block(rest$))
        If FastSymbol(rest$, "}") Then
                par = False
                If IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then
                Else
                    MyEr "can't find clause AS variable_name", "äåí ìðïñþ íá âñþ ôï ìÝñïò ÙÓ ïíïìá_ìåôáâëçôÞò"
                   ifier = True
                    I2 = False
               
                    Exit Function
                End If
                Select Case Abs(IsLabel(bstack, rest$, what$)) ' is Ifier
                Case 1
                        p = GetTaskId + 20000
                        If GetVar(bstack, what$, I) Then ' if exist
                            var(I) = p
                        Else
                            GlobalVar what$, p     ' or make one
                        End If
                        Set bs = New basetask   ' bs is the basetask of the thread but thread process class arn't constructed yet
                        Set bs.Parent = bstack  ' link to current basestask
      
                        bs.reflimit = bstack.reflimit
                        bstack.PushThread CLng(p), what$  'push thread id and Ifier to threads collection in current basetask
                        sThreadInternal bs, p, 0, frm$, uintnew(-1), HERE$, False ' thread construction - also we have a connection to
                        
                        
                        Set bs = Nothing
                        ss$ = ""
                        If IsLabelSymbolNewExp(rest$, "ÊÁÈÅ", "INTERVAL", lang, ss$) Then
                        GoTo chekInterval
                        ElseIf IsLabelSymbolNewExp(rest$, "ÅÊÔÅËÅÓÇ", "EXECUTE", lang, ss$) Then
                        TaskMaster.Message CLng(p), 4, , rest$
                        End If
                Case Else
                       MissingnumVar
                        ifier = True
                        I2 = False
  
                     Exit Function
                End Select
        End If
ElseIf IsExp(bstack, rest$, p) Then
ss$ = ""
    If IsLabelSymbolNewExp(rest$, "ÓÂÇÓÅ", "ERASE", lang, ss$) Then
        bstack.ThrowOne CLng(p)
    ElseIf IsLabelSymbolNewExp(rest$, "ÊÑÁÔÁ", "HOLD", lang, ss$) Then
        TaskMaster.Message CLng(p), 0
    ElseIf IsLabelSymbolNewExp(rest$, "ÅÊÔÅËÅÓÇ", "EXECUTE", lang, ss$) Then
     TaskMaster.Message CLng(p), 4, , rest$
    ElseIf IsLabelSymbolNewExp(rest$, "ÎÅÊÉÍÁ", "RESTART", lang, ss$) Then
        TaskMaster.Message CLng(p), 2
    ElseIf IsLabelSymbolNewExp(rest$, "ÊÁÈÅ", "INTERVAL", lang, ss$) Then
chekInterval:
        If IsExp(bstack, rest$, x) Then
            If x < 2 Then x = 2
            TaskMaster.Message CLng(p), 3, CLng(x)
        Else
            MyEr "Expected number for interval, miliseconds", "Ðåñßìåíá áñéèìü ãéá ïñéóìü ôáêôéêïý äéáóôÞìáôïò åêêßíçóçò íÞìáôïò (÷ñüíï óå ÷éëéïóôÜ äåõôåñïëÝðôïõ)"
           ifier = True
            I2 = False
        End If
    Else
        MyEr "can't find ERASE or HOLD or RESTART or INTERVAL clause", "Äåí ìðïñþ íá âñù üñï üðùò ôï ÓÂÇÓÅ Þ ôï ÊÑÁÔÁ Þ ôï ÎÅÊÉÍÁ Þ ôï ÊÁÈÅ"
      ifier = True
        I2 = False

    End If
End If
what$ = ""
Exit Function
Case "HOLD", "ÊÑÁÔÇÓÅ"
Form1.MY_BACK.ClearUp
If Form1.MY_BACK.Create(Form1.DIS.Width / DXP, Form1.DIS.Height / DYP) Then
Form1.MY_BACK.LoadPictureBlt Form1.DIS.hDC
If Form1.MY_BACK.bitsPerPixel <> 24 Then Conv24 Form1.MY_BACK
End If

Exit Function
Case "RELEASE", "ÁÖÇÓÅ"
Form1.MY_BACK.PaintPicture Form1.DIS.hDC
Exit Function
Case "USE", "×ÑÇÓÇ"
' use "ti" number|string (feed stack)
' use ti

If IsStrExp(bstack, rest$, ss$) Then   'gsb
ElseIf Not Abs(IsLabel(bstack, rest$, ss$)) = 1 Then ' WITHOUT " .gsb"
SyntaxError
Exit Function
End If
ML = 0
If UCase(ss$) = "PIPE" Or UCase(ss$) = "ÁÕËÏÕ" Then
ML = 1
End If

stac1$ = ""
If FastSymbol(rest$, "!") And ML <> 1 Then
If VALIDATEpart(rest$, s$) Then
Do While s$ <> ""
    If ISSTRINGA(s$, pa$) Then
        bstack.soros.DataStr pa$
    ElseIf IsNumberD(s$, x) Then
        bstack.soros.DataVal x
    Else
        Exit Do
    End If
Loop
Else
SyntaxError

'i2 = False
Exit Function
End If
Else
If ML <> 1 Then
    Do
        If IsExp(bstack, rest$, p) Then
        stac1$ = stac1$ & Str$(p)
        ElseIf IsStrExp(bstack, rest$, s$) Then
        ' íá ôï áëëÜîù óå stack êáíïíéêü...
        stac1$ = stac1$ & Sput(s$)
        Else
        Exit Do
        End If
        If Not FastSymbol(rest$, ",") Then Exit Do
        'íá ôï áëëÜîù óå stack êáíïíéêü...íá öýãåé ôï êüììá
        'stac1$ = stac1$ & ", "
    Loop
   


    pa$ = ExtractPath(ss$)
    para$ = RTrim$(".gsb " & Mid$(ss$, Len(ExtractPath(ss$) + ExtractName(ss$)) + 1))
If pa$ = "" Then pa$ = mcd
frm$ = ExtractNameOnly(ss$)

 End If
End If

If Not IsLabelSymbolNew(rest$, "ÓÔÏ", "TO", lang) Then

w$ = "S" & CStr(Int(Rnd(12) * 100000))

Else

Select Case Abs(IsLabel(bstack, rest$, ss$))

Case 3
    If GetVar(bstack, ss$, I) Then
       w$ = "V" & CStr(I)
       s$ = frm$
       frm$ = var(I)
       var(I) = ""
      Else
     I = GlobalVar(ss$, "")
             If I <> 0 Then
              w$ = "V" & CStr(I)
              
            var(I) = ""
            End If
                        
     End If
Case 6
   
     If neoGetArray(bstack, ss$, pppp) Then
            If Not NeoGetArrayItem(pppp, bstack, ss$, it, rest$) Then
        MyEr "Not such index for array", "Ðåñßìåíá óùóôïýò äåßêôåò ãéá ðßíáêá"
        
        Exit Function
        End If
     Else
     MyEr "Not such array, need to DIM fisrt", "Ðåñßìåíá ðßíáêá, ðñÝðåé íá ïñßóåéò Ýíáí"
: Exit Function
     End If
    
    w$ = "A" & CopyArrayItems(bstack, ss$) + Str(it) ''''''''''åäù ãéá ôïí íåï ðßíáêá ðñÝðåé íá äþóù ôï mArray???
    s$ = frm$
    frm$ = pppp.item(it)
    If Typename(pppp.item(it)) = doc Then
    Set pppp.item(it) = New Document
    Else
     pppp.item(it) = ""
    End If
   
    Case Else
    SyntaxError
: Exit Function
   End Select
   If Left$(w$, 1) <> "S" Then

p = GetTaskId + 10000 ' starts from 10000
If Not IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then
's$ = validpipename(ss$)

If frm$ <> "" Then

ss$ = frm$
Else

ss$ = "M" & CStr(p)
End If

Thing w$, validpipename(ss$)
sThread CLng(p), 0, ss$, w$
TaskMaster.Message CLng(p), 3, CLng(100)
Exit Function
Else
Select Case Abs(IsLabel(bstack, rest$, what$))
Case 0 ' TAKE A NUMBER
If IsNumberLabel(rest$, what$) Then
frm$ = "S" + Right$("0000" + what$, 5)
p = Val(what$)
s$ = frm$
If Left$(w$, 1) = "V" Then var(Val(Mid$(w$, 2))) = validpipename(frm$)
Else
MyEr "No number found (5 digits)", "Äåí âñÞêá áñéèìü (5 øçößá)"
Exit Function
End If
Case 1
    If GetVar(bstack, what, I) Then
    If var(I) < 10000 Then var(I) = p Else p = var(I)
      Else
      GlobalVar what, p
                             
     End If
Case 5, 7
   
     If neoGetArray(bstack, what, pppp) Then
        If Not NeoGetArrayItem(pppp, bstack, ss$, it, rest$) Then
        MyEr "Not such index for array", "Ðåñßìåíá óùóôïýò äåßêôåò ãéá ðßíáêá"
      
        Exit Function
        End If
     Else
     MyEr "Not such array, need to DIM fisrt", "Ðåñßìåíá ðßíáêá, ðñÝðåé íá ïñßóåéò Ýíáí"
     
      Exit Function
     End If
     If pppp.item(it) < 10000 Then pppp.item(it) = p Else p = pppp.item(it)
    Case Else
    MyEr "Wrong parameter", "ËÜèïò ðáñÜìåôñïò"
     Exit Function
   End Select
   End If
End If
'ss$ = validpipename("M" & CStr(p))
'stac1$ = Sput(ss$) + stac1$
If frm$ <> "" Then
ss$ = frm$
Else
ss$ = "M" & CStr(p)
End If
frm$ = s$
sThread CLng(p), 0, ss$, w$
TaskMaster.Message CLng(p), 3, CLng(100)
ss$ = validpipename(ss$)
stac1$ = Sput(ss$) + stac1$
ss$ = "M" & CStr(p)
End If
If ML <> 1 Then
If stac1$ = "" And Left$(s$, 1) = "S" Then
s$ = App.path
AddDirSep s$
s$ = s$ & "M2000.EXE "
If Shell(s$ & Chr(34) + pa$ & frm$ & ".gsb" & para$ & Chr(34), vbNormalFocus) > 0 Then
End If
End If
If Left$(w$, 1) = "V" Then
ss$ = GetTag$ & ".gsb"
Else
ss$ = w$ & ".gsb"
End If
I = FreeFile
On Error Resume Next
 If Not NeoUnicodeFile(strTemp + ss$) Then
 MyEr "can't save " + strTemp + ss$, "äåí ìðïñþ íá óþóù " + strTemp + ss$
ifier = False
what$ = ""
 Exit Function
End If

Open GetDosPath(strTemp + ss$) For Output As I
If Err.Number > 0 Then
MyEr "Internal Error", "Åóùôåñéêü ËÜèïò"
ifier = False
what$ = ""
Exit Function
End If
If stac1$ <> "" Then

' look for unicode...
Print #I, "STACK !" & stac1$ & ": DIR " & Chr(34) + pa$ & Chr(34) & " : LOAD " & Chr(34) + frm$ & para$ & Chr(34)

Else
Print #I, "DIR " & Chr(34) + pa$ & Chr(34) & " : LOAD " & Chr(34) + frm$ & para$ & Chr(34)

End If
Close I
tempList2delete = Sput(strTemp + ss$) + tempList2delete
s$ = App.path
AddDirSep s$
s$ = s$ & "M2000.EXE "
If Shell(s$ & Chr(34) + strTemp + ss$ & Chr(34), vbNormalFocus) > 0 Then
'Kill strTemp + ss$
End If

End If
Exit Function

Case "OPEN.FILE", "ÁÍÏÉÃÌÁ.ÁÑ×ÅÉÏÕ"
If IsSelectorInUse Then
ifier = False
SelectorInUse
Exit Function
End If
olamazi
frm$ = mcd
If myUcase(what$) = "OPEN.FILE" Then
DialogSetupLang 1
Else
DialogSetupLang 0
End If

IsStrExp bstack, rest$, s$
If FastSymbol(rest$, ",") Then If IsStrExp(bstack, rest$, pa$) Then frm$ = pa$
If frm$ <> "" Then If Not isdir(frm$) Then NoSuchFolder rest$: Exit Function
If FastSymbol(rest$, ",") Then If IsStrExp(bstack, rest$, pa$) Then ss$ = pa$

If FastSymbol(rest$, ",") Then If Not IsStrExp(bstack, rest$, w$) Then Exit Function
par = False
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then par = p <> 0
If FastSymbol(rest$, ",") Then f = IsExp(bstack, rest$, p) Else p = 0
 DUM = p <> 0
 If Form1.Visible Then
Set photo = Form1
Else
Set photo = Nothing
End If
Dim aaa() As String
If InStr(w$, "|") > 0 Then
    If InStr(w$, "(*.") > 0 Then
        aaa() = Split(w$, "(*.")
        w$ = ""
        If UBound(aaa()) > LBound(aaa()) Then
            w$ = "|"
            For x1 = LBound(aaa()) + 1 To UBound(aaa())
                w$ = w$ & UCase(Left$(aaa(x1), InStr(aaa(x1), ")") - 1) & "|")
            Next x1
        End If
    Else
        aaa() = Split(w$, "|")
        w$ = ""
        If UBound(aaa()) > LBound(aaa()) Then
            w$ = "|"
            For x1 = LBound(aaa()) To UBound(aaa())
                w$ = w$ & UCase(aaa(x1)) & "|"
            Next x1
        End If
    End If
End If

    If OpenDialog(bstack, photo, frm$, s$, ss$, w$, Not par, DUM) Then
     If multifileselection Then
        If ReturnListOfFiles <> "" Then
                aaa() = Split(ReturnListOfFiles, "#")
                If UBound(aaa()) > LBound(aaa()) Then
            
                        For x1 = UBound(aaa()) To LBound(aaa()) + 1 Step -1
                            bstack.soros.PushStr aaa(x1)
                        Next x1
                        bstack.soros.PushVal UBound(aaa()) - LBound(aaa())
                        bstack.soros.PushStr aaa(x1)
                 End If
            Else
            
     If isdir(ReturnFile) Then
     bstack.soros.PushStr ""
    Else
    bstack.soros.PushStr ReturnFile
    End If
        End If
    Else
    If isdir(ReturnFile) Then
     bstack.soros.PushStr ""
    Else
    bstack.soros.PushStr ReturnFile
    End If
    End If
    Else
    bstack.soros.PushStr ""
    End If

Set photo = Nothing
Case "OPEN.IMAGE", "ÁÍÏÉÃÌÁ.ÅÉÊÏÍÁÓ"
If IsSelectorInUse Then
ifier = False
SelectorInUse
Exit Function
End If
olamazi
  
frm$ = mcd
If myUcase(what$) = "OPEN.IMAGE" Then
DialogSetupLang 1
Else
DialogSetupLang 0
End If

IsStrExp bstack, rest$, s$
If FastSymbol(rest$, ",") Then If IsStrExp(bstack, rest$, pa$) Then frm$ = pa$
If frm$ <> "" Then If Not isdir(frm$) Then NoSuchFolder rest$: Exit Function
If FastSymbol(rest$, ",") Then If IsStrExp(bstack, rest$, pa$) Then ss$ = pa$
If FastSymbol(rest$, ",") Then If Not IsStrExp(bstack, rest$, w$) Then MissNumExpr:  Exit Function
par = False
 If Form1.Visible Then
Set photo = Form1
Else
Set photo = Nothing
End If
If InStr(w$, "|") > 0 Then
If InStr(w$, "(*.") > 0 Then
aaa() = Split(w$, "(*.")
Else
aaa() = Split(w$, "|")
End If
w$ = ""
If UBound(aaa()) > LBound(aaa()) Then
w$ = "|"
For x1 = LBound(aaa()) + 1 To UBound(aaa())
w$ = w$ & UCase(Left$(aaa(x1), InStr(aaa(x1), ")") - 1) & "|")
Next x1
End If
End If
    If OpenImage(bstack, photo, frm$, s$, ss$, w$) Then
    ' push to stack
    If multifileselection Then
    If ReturnListOfFiles <> "" Then
    aaa() = Split(ReturnListOfFiles, "#")
    If UBound(aaa()) > LBound(aaa()) Then

For x1 = UBound(aaa()) To LBound(aaa()) + 1 Step -1
    bstack.soros.PushStr aaa(x1)
Next x1
bstack.soros.PushVal UBound(aaa()) - LBound(aaa())
bstack.soros.PushStr aaa(x1)
End If
Else
    bstack.soros.PushStr ReturnFile
    End If
    Else
    bstack.soros.PushStr ReturnFile
    End If
    Else
    bstack.soros.PushStr ""
    End If

Set photo = Nothing


Case "FLUSH", "ÁÄÅÉÁÓÅ"
If IsLabelSymbolNew(rest$, "ËÁÈÏÓ", "ERROR", lang) Then
         NOEXECUTION = False
         NERR = False
           LastErNum1 = 0
         LastErNum = 0
            LastErName = ""
            LastErNameGR = ""
Else
bstack.soros.Flush
End If
Exit Function
Case "PROPERTIES", "ÉÄÉÏÔÇÔÅÓ"  ''for printer
  If IsStrExp(bstack, rest$, s$) Then
  LoadArray MyDM(), s$
  Else
  SyntaxError
  ifier = False
  End If
  Exit Function
  Case "SPEECH", "ËÏÃÏÓ"
If IsStrExp(bstack, rest$, s$) Then

If FastSymbol(rest$, "#") Then s$ = "<spell>" & s$ & "</spell>"
DUM = FastSymbol(rest$, "!")
If FastSymbol(rest$, ",") Then ' get voice number
If Not IsExp(bstack, rest$, p) Then MissNumExpr:  Exit Function
SPEeCH s$, DUM, CLng(p)
Else
SPEeCH s$, DUM
End If
End If
Exit Function


Case "DOS", "ÊÏÍÓÏËÁ"
If IsSupervisor Then
On Error Resume Next
x1 = Abs(IsLabelBig(bstack, rest$, s$, , w$))
If x1 = 1 Then
s$ = w$
Else
rest$ = s$ + rest$
x1 = IsStrExp(bstack, rest$, s$)
End If
If FastSymbol(rest$, ",") Then
If Not IsExp(bstack, rest$, p) Then MissNumExpr: Exit Function
Else
p = 300
End If
        If x1 Then
        
                    If FastSymbol(rest$, ";") Then
                                Shell "CMD /C " & s$, vbMinimizedNoFocus
                    Else
                                Shell "CMD /K " & s$, vbNormalFocus
                    End If
        Else
                    Shell "CMD", vbNormalFocus
        End If

           MyDoEvents
        Sleep CLng(Abs(p))

Else
BadCommand
ifier = False
End If
Exit Function
Case "WIN", "ÓÕÓ", "ÓÕÓÔÇÌÁ"
If IsSupervisor Then
x1 = Abs(IsLabelBig(bstack, rest$, s$, , w$))
If x1 = 1 Then
s$ = w$
Else
rest$ = s$ + rest$
x1 = IsStrExp(bstack, rest$, s$)
End If

If x1 Then
On Error Resume Next

If s$ = ExtractPath$(s$) Then
MyShell "explorer " & Chr(34) + s$ & Chr(34)
Else
MyShell s$
End If
'***********************************************
End If
Else
BadCommand
ifier = False
End If
Exit Function
Case "WINDOW", "ÐÁÑÁÈÕÑÏ"
kForm = True
ProcWindow bstack, rest$, bstack.Owner, ifier
Exit Function
Case "FIELD", "ÐÅÄÉÏ"
ifier = ProcField(bstack, rest$, lang)
Exit Function
Case "TEST", "ÄÏÊÉÌÇ"
ifier = procTestMe(bstack, rest$, what$)
Exit Function
Case "MOUSE.ICON", "ÄÅÉÊÔÇ.ÌÏÑÖÇ"
i3MouseIcon bstack, rest$, lang
Case "MOTION.W", "ÊÉÍÇÓÇ.Ð"
ifier = procMotionW(bstack, rest$)
Exit Function
Case "CLIPBOARD", "ÐÑÏ×ÅÉÑÏ"   '******************************************************PUT TO  CLIPBOARD STRING /OR STRING WITH IMAGE INSIDE
    If IsStrExp(bstack, rest$, s$) Then
        If (Left$(s$, 4) = "cDIB" And Len(s$) > 12) Then         ' MAGIC LETTERS cDIB choose the bitmap
            Set photo = New cDIBSection
            If Not cDib(s$, photo) Then  ' copy from string to cDIBSection
                Set photo = Nothing
                ifier = False
                MissCdibStr
                Exit Function
            Else
                photo.GetDpi 96, 96
                photo.CopyToClipboard
                Set photo = Nothing
            End If
        Else
        Clipboard.clear
              '      Clipboard.SetText s$, vbCFText  ' set as ansi text
           ' SetTextDataLong 16, GetLCIDFromKeyboard
           SetTextData CF_UNICODETEXT, s$   'set as unicode text
        End If
    End If
    I2 = True
    Exit Function
'**********************************************************************************

Case "ÂÏÇÈÅÉÁ", "HELP"
abt = False
If Abs(IsLabel(bstack, rest$, s$)) > 0 Then
'If Form4.Visible Then Form4.Visible = False
vH_title$ = ""

    fHelp bstack, s$, Asc(s$ + Mid$(" Ó", Abs(pagio$ = "GREEK") + 1)) < 128
  
Else
If Not ISSTRINGA(rest$, s$) Then
nhelp bstack, lang <> 1
Else

'If Form4.Visible Then Form4.Visible = False
fHelp bstack, s$, lang = 1
End If
End If

Case "CLEAR", "ÊÁÈÁÑÏ"

Do
y1 = Abs(IsLabel(bstack, rest$, what$))


If y1 = 3 Then
      If GetVar(bstack, what$, I) Then
        If Typename(var(I)) = doc Then
        Set var(I) = New Document
        var(I).textDoc = ""
        Else
        var(I) = ""
        End If
       Else
        GlobalVar what$, ""
        
       End If
ElseIf y1 < 5 And y1 > 0 Then
      If GetVar(bstack, what$, I) Then
        If IsObject(var(I)) Then
        ' PUT ZERO TO VARIABLES INSIDE GROUP
       If Typename(var(I)) = "Group" Then
       var(I) = CLng(0)
       Else
         MissingGroup
         ifier = False
       End If
        Else
        If VarType(var(I)) = vbLong Then
        var(I) = CLng(0)
        Else
            var(I) = CDbl(0)
            End If
        End If
        
       Else
        GlobalVar what$, it
       End If
ElseIf y1 = 6 Then
        If neoGetArray(bstack, what$, pppp) Then
                If Not NeoGetArrayItem(pppp, bs, what$, it, rest$) Then Exit Function
                         If Typename(pppp.item(it)) = doc Then
                         Set pppp.item(it) = New Document
                         pppp.item(it).textDoc = ""
                         Else
                         pppp.item(it) = ""
                         End If
                 
       Else
       SyntaxError
       ifier = False
       End If
ElseIf y1 > 0 Then
  SyntaxError
       ifier = False
Else
Form1.List1.clear
If bstack.IamThread Then
 MyEr "Can't Clear all variables in a thread", "Äåí ìðïñþ íá óâÞóù üëåò ôéò ìåôáâëçôÝò óå Ýíá íÞìá"
Else

Set photo = bstack

again1234:

 If photo.IamChild Then
 If photo.IamThread Then Set photo = Nothing: Exit Function
 With photo
   Set .StaticCollection = New Collection
        If .vars = 0 And .vname = 0 Then Set photo = Nothing: Exit Function
      
   End With
   
Set photo = photo.Parent
GoTo again1234
End If
Set photo = Nothing
' this command do nothing in a function.
Set bstack.StaticCollection = New Collection
varhash.ReduceHash 0, var()
var2used = 0
ReDim var(50) As Variant

Set photo = bstack
again12345:
 If photo.IamChild Then
            With photo
                 If .vars = 0 And .vname = 0 Then Set photo = Nothing: Exit Function
                     .vars = 0

                     .vname = 0
              
            
            End With
            Set photo = photo.Parent
            GoTo again12345
End If
Set photo = Nothing
End If
Exit Do
End If
If Not I2 Then Exit Do
Loop Until Not FastSymbol(rest$, ",")
Case "DECLARE", "ÏÑÉÓÅ"  'OBJECT
'ifier = true..changed for ver 8
y1 = IsLabelSymbolNew(rest$, "ÃÅÍÉÊÏ", "GLOBAL", lang)
x1 = Abs(IsLabel(bstack, rest$, what$))

what$ = myUcase$(what$)
    If x1 = 1 Then   '' Or X1 = 3 Then  '' not yet for string
        If x1 = 1 Then
            If GetVar(bstack, what$, I) Then
            ss$ = ""
               If IsLabelSymbolNewExp(rest$, "ÔÉÐÏÔÁ", "NOTHING", lang, ss$) Then
                   If Not IsObject(var(I)) Then
                        BadObjectDecl
                        ifier = False
                   Else
                       Set var(I) = Nothing
                   End If
                   Exit Function
                   
               ElseIf IsLabelSymbolNewExp(rest$, "ÍÅÏ", "NEW", lang, ss$) Then
               Set var(I) = Nothing
               GoTo THEREnew
               Else
                  BadObjectDecl
                    ifier = False
                  Exit Function
               End If
                     
            End If
         End If
         ss$ = ""
        If IsLabelSymbolNewExp(rest$, "ÁÐÏ", "LIB", lang, ss$) Then
            If IsStrExp(bstack, rest$, pa$) Then
                       ' we get the lib
                If Not IsStrExp(bstack, rest$, ss$) Then ss$ = ""
                SpaceForVar I
                Set photo = New stdCallFunction
                photo.CallThis pa$, ss$, lang
            
                Set var(I) = photo
                
                s$ = what$
                
                If HERE$ = "" Or y1 Then
                    GlobalSub s$ + "()", "CALL EXTERN " & CStr(I) & " : = NUMBER"
                Else
                    GlobalSub HERE$ & "." & bstack.GroupName & s$ + "()", "CALL EXTERN " & CStr(I) & " : = NUMBER"
                End If

               
                Exit Function
            Else
                BadObjectDecl
                 ifier = False
                Exit Function
            End If
        ElseIf IsLabelSymbolNewExp(rest$, "ÌÅ", "USE", lang, ss$) Then
                    x1 = Abs(IsLabel(bstack, rest$, pa$))
                    IsSymbol3 rest$, ","
                    If x1 = 1 Then
                            If GetVar(bstack, pa$, x1) Then
                                    If IsObject(var(x1)) Then
                                                I = GlobalVar(what$, s$, , y1 = True)
                                                If IsStrExp(bstack, rest$, ss$) Then
                                                Set var(I) = MakeObjectFromString(var(x1), ss$)
                                                End If
                                    End If
                            End If
                    Else
: MissPar: ifier = False:
                    ifier = False
                    End If
                    Exit Function
        End If
        I = GlobalVar(what$, s$, , y1 = True)
THEREnew:
ifier = False
        If IsStrExp(bstack, rest$, s$) Then
            If FastSymbol(rest$, ",") Then
                If IsStrExp(bstack, rest$, pa$) Then
                    
                If FastSymbol(rest$, ",") Then
                        If IsStrExp(bstack, rest$, w$) Then
                        Err.clear
                        On Error Resume Next
                        Licenses.Add s$, w$
                        If Err.Number > 0 Then
                        MissLicence
                        Else
                        CreateitObject var(I), s$, CStr(pa$)
                        If Err.Number > 0 Then
                        Err.clear
                        MissLicence
                        End If
                        End If
                        Licenses.remove s$
                        Else
                        MissStringExpr
                        End If
                        
                        
                Else
                      Err.clear
                        On Error Resume Next
                CreateitObject var(I), s$, CStr(pa$)
                     If Err.Number > 0 Then
                        Err.clear
                        MissLicence
                        End If
                    End If
                    
                    
                Else
                 If FastSymbol(rest$, ",") Then
                 If IsStrExp(bstack, rest$, pa$) Then
                    Err.clear
                        On Error Resume Next
                 Licenses.Add s$, pa$
                     If Err.Number > 0 Then
                        MissLicence
                        Else
                 CreateitObject var(I), s$
                 If Err.Number > 0 Then
                        Err.clear
                        MissLicence
                        End If
                        End If
                 Licenses.remove s$
                 Else
                    MissStringExpr
                 End If
                Else
                    MissStringExpr
                    End If
                End If
                
                
                
                
                
            Else
               Err.clear
                        On Error Resume Next
                CreateitObject var(I), s$
                 If Err.Number > 0 Then
                        Err.clear
                        MissLicence
                        End If
            End If
        End If
           Err.clear
                        On Error Resume Next
        If Not IsObject(var(I)) Then
        BadObjectDecl
        End If
       
    Else
    BadObjectDecl
    
    End If
     ifier = True
    Exit Function

Case "REM", "ÓÇÌ"
SetNextLine rest$
rest$ = vbCrLf + rest$
Exit Function
Case "VOLUME", "ÅÍÔÁÓÇ"
If IsExp(bstack, rest$, p) Then
vol = (CLng(p) Mod 101)
If AVIRUN Then
MediaPlayer1.setLeftVolume vol * 10
MediaPlayer1.setRightVolume vol * 10
Else
MediaPlayer1.SetMasterVolume vol
End If
End If
Exit Function
Case "ABOUT", "ÐÅÑÉ"
        ProcAbout bstack, rest$, lang
        Exit Function
Case "OPTIMIZATION", "ÂÅËÔÉÓÔÏÐÏÉÇÓÇ"

 If IsLabelSymbolNew(rest$, "Ï×É", "OFF", lang) Then
NoOptimum = True
ElseIf IsLabelSymbolNew(rest$, "ÍÁÉ", "ON", lang) Then
NoOptimum = False
End If
Exit Function
Case Else

I2 = I3(bstack, what$, rest$, ifier, lang)
End Select

End Function
Function I3(bstack As basetask, what$, rest$, ifier As Boolean, lang As Long) As Boolean

Dim s$, p As Double, I As Long, x1 As Long, x As Double, y As Double, f As Long, y1 As Long, sx As Double, ss$, pa$, photo As Object, it As Long
Dim scr As Object, frm$, par As Boolean, w$, task As TaskInterface, Once As Boolean
Dim prive As Long
Dim pppp As mArray, stac1$, col As Long, sy As Double, sxy As Double, DUM As Boolean, ps As mStiva
ifier = True
I3 = True
Select Case what$
Case "LINESPACE", "ÄÉÁÓÔÉ×Ï"
ifier = procLineSpace(bstack, rest$)
Exit Function
Case "BOLD", "ÖÁÑÄÉÁ"
If IsExp(bstack, rest$, p) Then
bstack.myBold = (p <> 0)
Else
bstack.myBold = Not bstack.myBold

p = CDbl(bstack.myBold)
End If
players(GetCode(bstack.Owner)).bold = Abs(p <> 0)

bstack.Owner.Font.bold = Abs(p <> 0)



Exit Function



Case "MODE", "ÔÕÐÏÓ"
kForm = True
On Error Resume Next
Set scr = bstack.Owner
With players(GetCode(scr))
x1 = scr.Width
y1 = scr.Height
If scr.name = "Form1" Then
DisableTargets q(), -1

ElseIf scr.name = "DIS" Then
DisableTargets q(), 0

ElseIf scr.name = "dSprite" Then
DisableTargets q(), Val(scr.Index)
End If
If IsExp(bstack, rest$, p) Then
.SZ = CSng(p)
If .SZ < 4 Then .SZ = 4
If Not bstack.toprinter Then
If FastSymbol(rest$, ",") Then
    If IsExp(bstack, rest$, p) Then x1 = CLng(p): y1 = CLng(x1 * ScrY() / ScrX())
    If FastSymbol(rest$, ",") Then
            If IsExp(bstack, rest$, p) Then y1 = CLng(p)
        
    End If
ElseIf FastSymbol(rest$, ";") Then
.mysplit = 0
scr.Font.Size = .SZ
Set scr = Nothing
Exit Function
End If
Else
.SZ = .SZ * 3
End If
Err.clear
scr.Font.Size = .SZ
If Err.Number > 0 Then

MYFONT = "ARIAL"
scr.Font.name = MYFONT
scr.Font.charset = bstack.myCharSet
scr.Font.name = MYFONT
scr.Font.charset = bstack.myCharSet
End If

     .uMineLineSpace = .MineLineSpace
    
 FrameText scr, .SZ, x1, y1, .Paper
 
    Else
    ifier = False
    Exit Function
    End If
    .currow = 0
    .curpos = 0
    .XGRAPH = 0
    .YGRAPH = 0
End With
Set scr = Nothing
Case "GRADIENT", "ÖÏÍÔÏ"
If Not IsExp(bstack, rest$, x) Then x = rgb(255, 255, 255)
If Not FastSymbol(rest$, ",") Then
y = 0
Else
If Not IsExp(bstack, rest$, y) Then y = 0
End If
If Not FastSymbol(rest$, ",") Then

Gradient bstack.Owner, mycolor(x), mycolor(y), 0, 0, 0, 0, True, False


Else
If Not IsExp(bstack, rest$, p) Then
ifier = IfierVal: Exit Function
Else
Gradient bstack.Owner, mycolor(x), mycolor(y), 0, 0, 0, 0, p <> 0, False


End If
End If
Exit Function

Case "CHOOSE.FONT", "ÅÐÅËÅÎÅ.ÃÑÁÌÌÁÔÏÓÅÉÑÁ", "ÅÐÉËÅÎÅ.ÃÑÁÌÌÁÔÏÓÅÉÑÁ"
If Form4.Visible Then
Form4.Visible = False
    If Form1.TEXT1.Visible Then
        Form1.TEXT1.SetFocus
    Else
        Form1.SetFocus
    End If
End If
'GETFONT bstack, Form1.DIS

DialogSetupLang lang
With bstack.Owner
    ReturnFontName = .Font.name
    ReturnBold = .Font.bold
    ReturnItalic = .Font.Italic
    ReturnSize = CSng(.Font.Size)
    ReturnCharset = .Font.charset
End With
FeedFont2Stack bstack, OpenFont(bstack, Form1)

Exit Function
Case "ÏÑÉÏ.ÁÍÁÄÑÏÌÇÓ", "RECURSION.LIMIT"
If IsExp(bstack, rest$, p) Then
deep = Abs(Int(p))
Else
prive = GetCode(bstack.Owner)
If deep = 0 Then
If bstack.myCharSet = 0 Then
PlainBaSket bstack.Owner, players(prive), "NO RECURSION LIMIT FOR FUNCTIONS"
Else
PlainBaSket bstack.Owner, players(prive), "×ÙÑÉÓ ÏÑÉÏ ÁÍÁÄÑÏÌÇÓ ÓÔÉÓ ÓÕÍÁÑÔÇÓÅÉÓ"
End If
Else
PlainBaSket bstack.Owner, players(GetCode(bstack.Owner)), CStr(deep)
End If
crNew bstack, players(prive)
End If
Exit Function
Case "LOCALE", "ÔÏÐÉÊÏ"
On Error Resume Next
If IsExp(bstack, rest$, p) Then
cLid = CLng(p)
p = GetCodePage(CLng(p))
GoTo CHR222
End If
Case "CODEPAGE", "ÊÙÄÉÊÏÓÅËÉÄÁ"
If IsExp(bstack, rest$, p) Then
' usercodepage for use compare.
' also change to form.
On Error Resume Next
CHR222:
UserCodePage = p
p = GetCharSet(CLng(p))

GoTo chr11
End If
Case "INPUT", "ÅÉÓÁÃÙÃÇ"
With players(GetCode(bstack.Owner))
If IsLabelSymbolNew(rest$, "ÔÅËÏÓ", "END", lang) Then
If Not NOEDIT Then

NOEDIT = True
Else
If QRY Then QRY = False
End If
Exit Function
End If
prive = GetCode(bstack.Owner)
If Not releasemouse Then If Not Form1.Visible Then Form1.Visible = True  '

ifier = False '*************
rest$ = NLtrim$(rest$)

If FastSymbol(rest$, "!") Then
        x1 = 0
        frm$ = ""
        If bstack.toprinter = True Then oxiforPrinter:   Exit Function
        f = Abs(IsLabel(bstack, rest$, what$))
        Select Case f
        Case 1, 4
                     If Not FastSymbol(rest$, ",") Then MissPar: Exit Function
                     If Not IsExp(bstack, rest$, p) Then p = .mx
                     x = p
                     
                             y = 0
                             x1 = 30
                             If f = 4 Then x1 = 16
                     
                     Form1.ShadowMarks = True
                    
                    If y < 1 And x1 = 0 Then y = 1
                     If GetVar(bstack, what$, I) Then
                     s$ = CStr(var(I))
                     Do
                     s$ = iText(bstack, s$, (x), (y), "", x1, True, f = 4)
                     Loop Until ValidNum(s$, True, f = 4)
                               ValidNumberOnly s$, p, f = 4
                             var(I) = p
                     Else
                     If I = -1 Then
                     If f = 4 Then
                      s$ = CStr(ReadVarInt(bstack, what$))
                     Else
                      s$ = CStr(ReadVarDouble(bstack, what$))
                      End If
                      Do
                     s$ = iText(bstack, s$, (x), (y), "", x1, True, f = 4)
                     Loop Until ValidNum(s$, True, f = 4)
                              ValidNumberOnly s$, p, f = 4
                             bstack.SetVar what$, p
                     Else
                     s$ = ""
                      Do
                     s$ = iText(bstack, s$, (x), (y), "", x1, True, f = 4)
                     Loop Until ValidNum(s$, True, f = 4)
                              ValidNumberOnly s$, p, f = 4
                             GlobalVar what$, (p)
                     End If
                     End If
                     ifier = True
                     Form1.ShadowMarks = False
        Case 3
                     If Not FastSymbol(rest$, ",") Then MissPar: Exit Function
                     If Not IsExp(bstack, rest$, p) Then p = .mx
                     x = p
                     If Not FastSymbol(rest$, ",") Then
                             y = 0
                             x1 = 50
                             If IsLabelSymbolNew(rest$, "ÌÇÊÏÓ", "LEN", lang, , , , False) Then
                                     If FastSymbol(rest$, "=") Then
                                             If IsExp(bstack, rest$, p) Then
                                                     x1 = Abs(Int(p))
                                             Else
                                                     MissNumExpr
                                                     Exit Function
                                             End If
                                     Else
                                             MissSymbolMyEr "="
                                             Exit Function
                                     End If
                             End If
                     ElseIf Not IsExp(bstack, rest$, y) Then
                             MissPar
                             Exit Function
                     Else
                             If FastSymbol(rest$, ",") Then
                                     If Not IsStrExp(bstack, rest$, frm$) Then MissPar: Exit Function
                            Else
                            If Len(var(I)) > 0 Then x1 = -Len(var(I))
                        
                             End If
                           
                     End If
                     Form1.ShadowMarks = True
                     ''rest$ = nltrim$(rest$)
If y < 1 And x1 = 0 Then y = 1
                     If GetVar(bstack, what$, I) Then
                             var(I) = iText(bstack, var(I), (x), (y), frm$, x1)
                     Else
                     If I = -1 Then

                     bstack.SetVar what$, iText(bstack, ReadVarStr(bstack, what$), (x), (y), frm$, x1)
                     Else
                             GlobalVar what$, iText(bstack, "", (x), (y), frm$, x1)
                     End If
                     End If
                     ifier = True
                     Form1.ShadowMarks = False
        Case 5, 7 ' NUMBER IN ARRAY
                            If neoGetArray(bstack, what$, pppp) Then
                            If Not NeoGetArrayItem(pppp, bstack, what$, it, rest$) Then Exit Function
                    Else
                            Exit Function
                    End If
                    If Not FastSymbol(rest$, ",") Then MissPar: Exit Function
                    If Not IsExp(bstack, rest$, p) Then p = .mx
                    x = p
                     y = 0
                   x1 = 30
                    If f = 7 Then x1 = 16
                Form1.ShadowMarks = True
                If y < 1 And x1 = 0 Then y = 1

            
            
       s$ = CStr(pppp.item(it))
                      Do
                     s$ = iText(bstack, s$, (x), (y), "", x1, True, f = 7)
                     Loop Until ValidNum(s$, True, f = 7)
                              ValidNumberOnly s$, p, f = 7
                              
           
           If f = 4 Then
                        pppp.item(it) = Int(p)
           Else
                        pppp.item(it) = p
                        End If
        Form1.ShadowMarks = False
                ifier = True
        Case 6
                    If neoGetArray(bstack, what$, pppp) Then
                            If Not NeoGetArrayItem(pppp, bstack, what$, it, rest$) Then Exit Function
                    Else
                            Exit Function
                    End If
                    If Not FastSymbol(rest$, ",") Then MissPar: Exit Function
                    If Not IsExp(bstack, rest$, p) Then p = .mx
                    x = p
                    If Not FastSymbol(rest$, ",") Then
                        y = 0
                        x1 = 50
                        If IsLabelSymbolNew(rest$, "ÌÇÊÏÓ", "LEN", lang, , , , False) Then
                                If FastSymbol(rest$, "=") Then
                                        If IsExp(bstack, rest$, p) Then
                                            x1 = Abs(Int(p))
                                        Else
                                            MissNumExpr
                                            Exit Function
                                        End If
                                Else
                                        MissSymbolMyEr "="
                                        Exit Function
                                End If
                        ElseIf Not IsExp(bstack, rest$, y) Then
                                MissPar
                                Exit Function
                        Else
                                If FastSymbol(rest$, ",") Then
                                        If Not IsStrExp(bstack, rest$, frm$) Then MissPar: Exit Function
                                        Else
                            If Len(CStr(pppp.item(it))) > 0 Then x1 = -Len(CStr(pppp.item(it)))
                        
                                End If
                        End If
                End If
                Form1.ShadowMarks = True
                If y < 1 And x1 = 0 Then y = 1
                s$ = iText(bstack, CStr(pppp.item(it)), (x), (y), frm$, x1)
                Form1.ShadowMarks = False
                If Typename(pppp.item(it)) = doc Then
                        Set pppp.item(it) = New Document
                        If s$ <> "" Then pppp.item(it).textDoc = s$
                Else
                        pppp.item(it) = s$
                End If
                ifier = True
        End Select
        Exit Function
                    '********************************************
ElseIf FastSymbol(rest$, "#") Then
            If Not IsExp(bstack, rest$, p) Then MissPar:   Exit Function
            If Not FastSymbol(rest$, ",") Then MissPar:  Exit Function
            f = p Mod 512
            par = True
Else
If bstack.toprinter = True Then oxiforPrinter:   Exit Function
            If ISSTRINGA(rest$, frm$) Then
            If Not FastSymbol(rest$, ",") Then MissPar:  Exit Function
            Else
            frm$ = "?"
            End If
            par = False
End If
w$ = ""
FKey = -1
If bstack.toprinter = True And Not par Then
            oxiforPrinter
            Exit Function
End If
ifier = False
Do
        
        Select Case Abs(IsLabel(bstack, rest$, what$))
        Case 1
                If par Then
                        If Uni(f) Then
                                getUniRealComma f, p
                        Else
                                getAnsiRealComma f, p
                        End If
                Else
                           prive = GetCode(bstack.Owner)
                If players(prive).lastprint Then
                LCTbasket bstack.Owner, players(prive), players(prive).currow, players(prive).curpos
                players(prive).lastprint = False
                End If
                        
                        w$ = QUERY(bstack, frm$, s$, 256, False, IIf(MaybeIsSymbol(rest$, ","), ",", vbCr), "+*/!@#$|\{}[]'~`%^&()=_:;", True)
                        If Not IsNumber(bstack, s$, p) Then ErrNum: ifier = False: Exit Function
                        If Trim(s$) <> "," And Trim(s$) <> "" Then ErrNum: ifier = False: Exit Function
                End If
                If GetVar(bstack, what$, I) Then
                        If Typename(var(I)) = "Group" Then
                                BadGroupHandle
                                ifier = False
                                Exit Function
                        Else
                                var(I) = p
                        End If
                Else
                    If I = -1 Then
                    bstack.SetVar what$, p
                    Else
                        GlobalVar what$, p
                    End If
                End If
                 ifier = True
        Case 3
               
                If par Then
                        If Uni(f) Then
                                getUniStringComma f, s$
                        Else
                                getAnsiStringComma f, s$
                        End If
                Else
                 prive = GetCode(bstack.Owner)
                If players(prive).lastprint Then
                LCTbasket bstack.Owner, players(prive), players(prive).currow, players(prive).curpos
                players(prive).lastprint = False
                End If
                        QUERY bstack, frm$, s$, 256, False, IIf(MaybeIsSymbol(rest$, ","), ",", vbCr), IIf(MaybeIsSymbol(rest$, ","), Chr$(0), ",")
                End If
                If GetVar(bstack, what$, I) Then
                        CheckVar var(I), s$
                Else
                    If I = -1 Then
                        bstack.SetVar what$, s$
                    Else
                        GlobalVar what$, s$
                    End If
                End If
                 ifier = True
    Case 4
               
                If par Then
                        If Uni(f) Then
                                getUniRealComma f, p
                        Else
                                Input #f, p
                        End If
                Else
                                prive = GetCode(bstack.Owner)
                If players(prive).lastprint Then
                LCTbasket bstack.Owner, players(prive), players(prive).currow, players(prive).curpos
                players(prive).lastprint = False
                End If
                        w$ = QUERY(bstack, frm$, s$, 256, False, IIf(MaybeIsSymbol(rest$, ","), ",", vbCr), "+*/!.@#$|\{}[]'~`%^&()=_:;", True)
                       If Not IsNumber(bstack, s$, p) Then ErrNum: ifier = False: Exit Function
                        If Trim(s$) <> "," And Trim(s$) <> "" Then ErrNum: ifier = False: Exit Function
                End If
                If GetVar(bstack, what$, I) Then
                        var(I) = Int(p)
                Else
                        If I = -1 Then
                        bstack.SetVar what$, Int(p)
                        Else
                        GlobalVar what$, Int(p)
                        End If
                End If
                 ifier = True
    Case 5
                If neoGetArray(bstack, what$, pppp) Then
                        If Not NeoGetArrayItem(pppp, bstack, what$, it, rest$) Then Exit Function
                Else
                MyEr "No such array", "Äåí õðÜñ÷åé ôÝôïéïò ðßíáêáò"
                        Exit Function
                End If
                ifier = True
                If par Then
                        If Uni(f) Then
                                getUniRealComma f, p
                        Else
                                Input #f, p
                        End If
                Else
              prive = GetCode(bstack.Owner)
                If players(prive).lastprint Then
                LCTbasket bstack.Owner, players(prive), players(prive).currow, players(prive).curpos
                players(prive).lastprint = False
                End If
                        w$ = QUERY(bstack, frm$, s$, 256, False, IIf(MaybeIsSymbol(rest$, ","), ",", vbCr), "+*/!@#$|\{}[]'~`%^&()=_:;", True)
                        If Not IsNumber(bstack, s$, p) Then ErrNum: ifier = False: Exit Function
                        If Trim(s$) <> "," And Trim(s$) <> "" Then ErrNum: ifier = False: Exit Function
                End If
                pppp.item(it) = p
                 ifier = True
    Case 6
                If neoGetArray(bstack, what$, pppp) Then
                       If Not NeoGetArrayItem(pppp, bstack, what$, it, rest$) Then Exit Function
                Else
                 MyEr "No such array", "Äåí õðÜñ÷åé ôÝôïéïò ðßíáêáò"
                       Exit Function
                End If
                ifier = True
                If par Then
                        If Uni(f) Then
                                getUniStringComma f, s$
                        Else
                                Input #f, s$
                        End If
                Else
                           prive = GetCode(bstack.Owner)
                If players(prive).lastprint Then
                LCTbasket bstack.Owner, players(prive), players(prive).currow, players(prive).curpos
                players(prive).lastprint = False
                End If
                        QUERY bstack, frm$, s$, 256, False, IIf(MaybeIsSymbol(rest$, ","), ",", vbCr), IIf(MaybeIsSymbol(rest$, ","), Chr$(0), ",")
                End If
                If Typename(pppp.item(it)) = doc Then
                Set pppp.item(it) = New Document
                        If s$ <> "" Then pppp.item(it).textDoc = s$
                Else
                        pppp.item(it) = s$
                End If
                 ifier = True
    Case 7
                If neoGetArray(bstack, what$, pppp) Then
                        If Not NeoGetArrayItem(pppp, bstack, what$, it, rest$) Then Exit Function
                Else
                        MyEr "No such array", "Äåí õðÜñ÷åé ôÝôïéïò ðßíáêáò"
                        Exit Function
                End If
                If par Then
                        If Uni(f) Then
                                getUniRealComma f, p
                        Else
                                Input #f, p
                        End If
                Else
                           prive = GetCode(bstack.Owner)
                If players(prive).lastprint Then
                LCTbasket bstack.Owner, players(prive), players(prive).currow, players(prive).curpos
                players(prive).lastprint = False
                End If
                        w$ = QUERY(bstack, frm$, s$, 256, False, IIf(MaybeIsSymbol(rest$, ","), ",", vbCr), "+*/!@#$|\{}[.]'~`%^&()=_:;", True)
                         If Not IsNumber(bstack, s$, p) Then ErrNum: ifier = False: Exit Function
                        If Trim(s$) <> "," And Trim(s$) <> "" Then ErrNum: ifier = False: Exit Function
                End If
                pppp.item(it) = Int(p)
                ifier = True
    End Select
    
                If FastSymbol(rest$, ",") Then
                w$ = ""
                If Not par Then frm$ = " "
                ElseIf FastSymbol(rest$, ";") Then
                If Not par Then
               
                                 w$ = ";"
                                frm$ = " "
                   End If
                Else
                If Not par Then If Not w$ = ";" Then crNew bstack, players(prive)
                w$ = ""
                Exit Function
                End If
                
                Loop
                FKey = 0
                Exit Function
                End With
Case "ÍÇÌÁÔÁ", "THREADS"
procthreads bstack.Owner, bstack, rest$, lang
Exit Function
Case "ÑÕÈÌÉÓÅÉÓ", "SETTINGS"
TweakLang = lang
With bstack.Owner
    it = .FontItalic
    .FontItalic = 0
    notweak = True
    If Not Form1.Visible Then
    TweakForm.Show , Form5
    Else
    TweakForm.Show 1, Form1
    End If
    If Not notweak Then
        Form1.myBreak bstack
        Original bstack, ""
    Else
        .FontItalic = it
    End If
End With
Case "ÁÍÁËÕÔÇÓ", "PROFILER"
prof.MARKONE

Case "WAIT", "ÁÍÁÌÏÍÇ"
If IsExp(bstack, rest$, p) Then
mywait bstack, p
Else
mywait bstack, 0
End If
Case "ÐÁÉÎÅ", "PLAY"
If IsExp(bstack, rest$, p) Then
    If p = 0 Then
    TaskMaster.MusicTaskNum = 0
    TaskMaster.OnlyMusic = True
    Do
    TaskMaster.TimerTickNow
    Loop Until TaskMaster.PlayMusic = False
    TaskMaster.OnlyMusic = False   '' forget it in revision 130
   mute = True
    Else
    mute = False
    If FastSymbol(rest$, ",") Then
        If IsExp(bstack, rest$, sx) Then
          If sx < 1 Then
          sx = 0
          Do While TaskMaster.ThrowOne(CLng(p))
          sx = sx - 1
          If sx < -100 Then Exit Do
          Loop
          Else
          Set task = New MusicBox
          Set task.Owner = Form1.DIS
         
          task.Parameters CLng(p), CLng(sx)
          TaskMaster.MusicTaskNum = TaskMaster.MusicTaskNum + 1
          TaskMaster.AddTask task
          End If
          Do While FastSymbol(rest$, ",")
           I3 = False
        If IsExp(bstack, rest$, p) Then
             If FastSymbol(rest$, ",") Then
                If IsExp(bstack, rest$, sx) Then
                If sx < 1 Then
                        sx = 0
                        Do While TaskMaster.ThrowOne(CLng(p))
                        sx = sx - 1
                        If sx < -100 Then Exit Do
                        Loop
                  Else
                    Set task = New MusicBox
                    Set task.Owner = Form1.DIS
                    task.Parameters CLng(p), CLng(sx)
                    TaskMaster.MusicTaskNum = TaskMaster.MusicTaskNum + 1
                     TaskMaster.AddTask task
              End If
                I3 = True
                 End If
            End If
        End If
        If I3 = False Then
          mute = True
        Exit Do
        End If
          Loop
        End If
    End If
    End If
Else

I3 = False
End If
Exit Function
Case "SCORE", "ÖÙÍÇ"
I3 = False
If IsExp(bstack, rest$, p) Then
If p >= 1 And p <= 16 Then
If FastSymbol(rest$, ",") Then
If IsExp(bstack, rest$, sx) Then
If FastSymbol(rest$, ",") Then
If IsStrExp(bstack, rest$, s$) Then
voices(p - 1) = s$
BEATS(p - 1) = sx
I3 = True
End If
End If
End If
End If
End If
End If
Exit Function
Case "TARGETS"
If IsLabelSymbolLatin(rest$, "NEW") Then
If Targets Then
Targets = False
End If
ReDim q(0) As target
End If
Case "ÓÔÏ×ÏÉ"
If IsLabelSymbol(rest$, "ÍÅÏÉ") Then
If Targets Then
Targets = False
End If
ReDim q(0) As target
End If
Case "LATIN", "ËÁÔÉÍÉÊÁ"
LATIN bstack
Exit Function
Case "GREEK", "ÅËËÇÍÉÊÁ"
GREEK bstack
Exit Function
Case "MODULES", "ÔÌÇÌÁÔÁ"
par = lang = 1

frm$ = subHash.Show    ' Mid$(SubName$, 2)
s$ = ""
pa$ = ""
ss$ = ""
Do While ISSTRINGA(frm$, s$)
If InStr(s$, ChrW(&H1FFF)) > 0 Then
Else
If frm$ <> "" Then
    If InStrRev(s$, ")") > 0 Then
    
    pa$ = pa$ & Left$(s$, InStrRev(s$, ")") - 1) & ", "
    Else
    pa$ = pa$ & Left$(s$, InStrRev(s$, " ") - 1) & ", "
    End If
Else
    If InStrRev(s$, ")") > 0 Then
    pa$ = pa$ & Left$(s$, InStrRev(s$, ")") - 1)
    Else
    pa$ = pa$ & Left$(s$, InStrRev(s$, " ") - 1)
    End If
End If
End If
Loop

If pa$ <> "" Then
If HERE$ <> "" Then If FastSymbol(rest$, "?") Then GoTo ponly
If par Then

pa$ = "In Memory: " & pa$ & vbCrLf & "        Use REMOVE to remove the left most, EDIT module_name to edit"
Else
pa$ = "Óôç ÌíÞìç: " & pa$ & vbCrLf & "        Ìå ôç ÄÉÁÃÑÁÖÇ èá óâÞóåéò ôï ôåëåõôáßï, ìå ÓÕÃÃÑÁÖÇ Þ Ó üíïìá_ôìÞìáôïò èá ãñÜøåéò"
End If
If HERE$ = "" Then If FastSymbol(rest$, "?") Then GoTo ponly
End If
IsSymbol3 rest$, "?"

Set photo = New recDir
photo.IncludedFolders = False
photo.Nofiles = False
photo.TopFolder = mcd
photo.SortType = Abs(FastSymbol(rest$, "!"))
frm$ = ExtractNameOnly(photo.Dir2$(mcd, "GSB", False))

If frm$ <> "" Then
If pa$ <> "" Then pa$ = pa$ & vbCrLf
If par Then
pa$ = pa$ & "On Disk: "
Else
pa$ = pa$ & "Óôïí Äßóêï: "
End If
End If
ss$ = ""
Do While frm$ <> ""
s$ = frm$
If ss$ <> "" Then ss$ = ss$ & ", " & s$ Else ss$ = s$
s$ = photo.Dir2
If s$ <> "" Then frm$ = ExtractNameOnly(s$) Else frm$ = ""

Loop
Set photo = Nothing
pa$ = pa$ & ss$
If ss$ <> "" Then
If HERE$ = "" Then
If par Then
pa$ = pa$ & vbCrLf + ReplaceStr$("'", Chr(34), "        Use LOAD 'module_name' to load, EDIT 'module_name.gsb' to edit on disk")
If IsSupervisor Then pa$ = pa$ & ", WIN DIR$ for folders tasks"
Else
pa$ = pa$ & vbCrLf + ReplaceStr$("'", Chr(34), "        Ìå ÖÏÑÔÙÓÅ ïíïìá_ôìçìáôïò öïñôþíåéò óôç ìíÞìç, ìå Ó Þ ÓÕÃÃÑÁÖÇ 'ïíïìá_ôìçìáôïò.gsb' äéïñèþíåéò óôï äßóêï")
If IsSupervisor Then pa$ = pa$ & ", ìå ÓÕÓÔÇÌÁ ÊÁÔ$ áíïßãåéò ôïí êáôÜëïãï ìå ôá áñ÷åßá ãéá åñãáóßåò"
End If
End If
End If
' PRINT ONLY
ponly:
RepPlain bstack, bstack.Owner, pa$
Exit Function
Case "DRAWINGS", "Ó×ÅÄÉÁ"
Set photo = New recDir
photo.IncludedFolders = False
photo.Nofiles = False
par = (myUcase(what$) = "DRAWINGS")
photo.TopFolder = mcd
photo.SortType = Abs(FastSymbol(rest$, "!"))
frm$ = ExtractNameOnly(photo.Dir2$(mcd, "WMF", False))

s$ = ""
pa$ = ""
ss$ = ""
Do While frm$ <> ""
s$ = frm$
If ss$ <> "" Then ss$ = ss$ & ", " & s$ Else ss$ = s$
s$ = photo.Dir2
If s$ <> "" Then frm$ = ExtractNameOnly(s$) Else frm$ = ""
Loop

If par Then
pa$ = "Drawings: " & ss$
Else
pa$ = "Ó÷Ýäéá: " & ss$
End If
Set photo = Nothing
RepPlain bstack, bstack.Owner, pa$
Exit Function
Case "BITMAPS", "ÅÉÊÏÍÅÓ"
Set photo = New recDir
photo.IncludedFolders = False
photo.Nofiles = False
photo.TopFolder = mcd
photo.SortType = Abs(FastSymbol(rest$, "!"))
frm$ = ExtractNameOnly(photo.Dir2$(mcd, "BMP", False))
par = (myUcase(what$) = "BITMAPS")
s$ = ""
pa$ = ""
ss$ = ""
Do While frm$ <> ""
s$ = frm$
If ss$ <> "" Then ss$ = ss$ & ", " & s$ Else ss$ = s$
s$ = photo.Dir2
If s$ <> "" Then frm$ = ExtractNameOnly(s$) Else frm$ = ""
Loop
If par Then
pa$ = "Bitmaps: " & ss$
Else
pa$ = "Åéêüíåò: " & ss$
End If
Set photo = Nothing
RepPlain bstack, bstack.Owner, pa$
Exit Function
Case "MOVIES", "ÔÁÉÍÉÅÓ"
Set photo = New recDir
photo.IncludedFolders = False
photo.Nofiles = False
photo.TopFolder = mcd
photo.SortType = Abs(FastSymbol(rest$, "!"))
frm$ = ExtractNameOnly(photo.Dir2$(mcd, "AVI", False))
par = (myUcase(what$) = "MOVIES")

s$ = ""
pa$ = ""
ss$ = ""
Do While frm$ <> ""
s$ = frm$
If ss$ <> "" Then ss$ = ss$ & ", " & s$ Else ss$ = s$
s$ = photo.Dir2
If s$ <> "" Then frm$ = ExtractNameOnly(s$) Else frm$ = ""
Loop
Set photo = Nothing
If par Then
pa$ = "Movies: " & ss$
Else
pa$ = "Ôáéíßåò: " & ss$
End If
RepPlain bstack, bstack.Owner, pa$
Exit Function
Case "SOUNDS", "Ç×ÏÉ"
Set photo = New recDir
photo.IncludedFolders = False
photo.Nofiles = False
photo.TopFolder = mcd
photo.SortType = Abs(FastSymbol(rest$, "!"))
frm$ = ExtractNameOnly(photo.Dir2$(mcd, "WAV", False))

par = (myUcase(what$) = "SOUNDS")
s$ = ""
pa$ = ""
ss$ = ""

Do While frm$ <> ""
s$ = frm$
If ss$ <> "" Then ss$ = ss$ & ", " & s$ Else ss$ = s$
s$ = photo.Dir2
If s$ <> "" Then frm$ = ExtractNameOnly(s$) Else frm$ = ""
Loop
If par Then
pa$ = "Sounds: " & ss$
Else
pa$ = "Ç÷ïé: " & ss$
End If
Set photo = Nothing
RepPlain bstack, bstack.Owner, pa$
Exit Function
Case "WRITER", "ÓÕÃÃÑÁÖÅÁÓ"
prive = GetCode(bstack.Owner)

If bstack.Owner.Font.charset <> 161 Then
PlainBaSket bstack.Owner, players(prive), "George Karras (C), Kanalaki, Greece 1999-2014"
Else
PlainBaSket bstack.Owner, players(prive), "Ãéþñãïò ÊáññÜò (C), ÊáíáëÜêé, ÅëëÜäá 1999-2014"
End If

crNew bstack, players(prive)
Case "FILES", "ÁÑ×ÅÉÁ"
ifier = ProcFiles(bstack, rest$, lang)
Exit Function
Case "CAT", "ÊÁÔÁËÏÃÏÉ", "ÊÁÔ"
ifier = ProcCat(bstack, rest$, lang)
Exit Function
Case "LIST", "ËÉÓÔÁ"
If FastSymbol(rest$, "!") Then
MyList bstack, -2  ' proportional
ElseIf IsExp(bstack, rest$, p) Then
MyList bstack, CLng(p)
Else
MyList bstack
End If
''If Not extreme Then If Not bstack.toprinter Then
MyDoEvents1 bstack.Owner
Exit Function

Case "ÐÏËÕÃÙÍÏ", "POLYGON"
Set scr = bstack.Owner
If IsExp(bstack, rest$, p) Then
col = p
End If
If Not FastSymbol(rest$, ",") Then SyntaxError: ifier = False: Exit Function
If IsLabelSymbolNew(rest$, "ÃÙÍÉÁ", "ANGLE", lang) Then par = True
scr.FillStyle = vbSolid
scr.FillColor = mycolor(col)
f = 32
ReDim PLG(f)
x1 = 1
With players(GetCode(scr))
PLG(0).x = scr.ScaleX(.XGRAPH, 1, 3)
PLG(0).y = scr.ScaleY(.YGRAPH, 1, 3)
Do
If x1 >= f Then f = f * 2: ReDim Preserve PLG(f)
If IsExp(bstack, rest$, p) Then
x = p

If Not FastSymbol(rest$, ",") Then SyntaxError: ifier = False: Set scr = Nothing: Exit Function
    If IsExp(bstack, rest$, p) Then
        If par Then
      
            sx = x / PI2
            sx = (sx - Fix(sx)) * PI2
            .XGRAPH = .XGRAPH + Cos(sx) * p
            .YGRAPH = .YGRAPH - Sin(sx) * p
        Else
            .XGRAPH = .XGRAPH + CLng(x)
            .YGRAPH = .YGRAPH + CLng(p)
        End If
        PLG(x1).x = scr.ScaleX(.XGRAPH, 1, 3)
        PLG(x1).y = scr.ScaleY(.YGRAPH, 1, 3)
    
    Else
         MissNumExpr
         Set scr = Nothing
        ifier = False: Exit Function
    End If
Else
MissNumExpr
Set scr = Nothing
ifier = False: Exit Function
End If

x1 = x1 + 1
Loop Until Not FastSymbol(rest$, ",")
x1 = x1 - 1
If Polygon(scr.hDC, PLG(0), x1) = 0 Then
ifier = True: BadGraphic: Set scr = Nothing: Exit Function
End If
scr.FillStyle = vbSolid
End With
MyDoEvents1 scr
Set scr = Nothing
Case "CIRCLE", "ÊÕÊËÏÓ" ' LINE X1,Y1,COL
par = False
If IsLabelSymbolNew(rest$, "ÃÅÌÉÓÌÁ", "FILL", lang) Then
If IsExp(bstack, rest$, p) Then x = p
If Not FastSymbol(rest$, ",") Then MissNumExpr: ifier = False: Exit Function
par = True
End If
x1 = 0
y = 1

With players(GetCode(bstack.Owner))
col = .mypen
If IsExp(bstack, rest$, p) Then x1 = p
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y = p

If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then col = p Else MissNumExpr: ifier = False: Exit Function
sx = 0
sy = 0
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then sx = p Else MissNumExpr: ifier = False: Exit Function
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then sy = p Else MissNumExpr: ifier = False: Exit Function
sx = sx / PI2
sx = (sx - Fix(sx)) * PI2
sy = sy / PI2
sy = (sy - Fix(sy)) * PI2
Set scr = bstack.Owner
scr.CurrentX = .XGRAPH
scr.CurrentY = .YGRAPH
If par Then
    scr.FillStyle = vbSolid
    scr.FillColor = mycolor(x)
    If sx = sy Or Abs(sx - sy) + 0.0001 > PI2 Then
        scr.Circle (.XGRAPH, .YGRAPH), x1, mycolor(col), , , y
    Else
        If sx = 0 Then sx = 0.0001
        If sy = 0 Then sy = PI2
        scr.Circle (.XGRAPH, .YGRAPH), x1, mycolor(col), -sx, -sy, y
    End If
    scr.FillStyle = 1
Else
    scr.FillStyle = 1
    scr.Circle (.XGRAPH, .YGRAPH), x1, mycolor(col), sx, sy, y
End If
End With
MyDoEvents1 scr
Set scr = Nothing
Case "PLAYER", "ÐÁÉÊÔÇÓ"
If IsExp(bstack, rest$, p) Then
    If p = 0 Then   ' ZERO CLEAR ALL HARDWARE SPRITES
        ClrSprites
        ifier = True
        Exit Function
    End If
    If p < 1 Or p > 32 Then SyntaxError: ifier = False: Exit Function
    it = FindSpriteByTag(CLng(p))
    If FastSymbol(rest$, ",") Then
        If Not IsExp(bstack, rest$, x) Then  ' get new left or leave it empty
            If it = 0 Then
                x = 0
            Else
                x = Form1.dSprite(it).Left + players(it).x
            End If
            If FastSymbol(rest$, ",") Then
                If Not IsExp(bstack, rest$, y) Then MissNumExpr: ifier = False: Exit Function
            Else
                MissNumExpr
                ifier = False: Exit Function
            End If
        Else
            If FastSymbol(rest$, ",") Then   ' so ,, is "stay X where you are
                If Not IsExp(bstack, rest$, y) Then MissNumExpr: ifier = False: Exit Function
            Else
                If it = 0 Then
                    y = 0
                Else
                    y = Form1.dSprite(it).top + players(it).y
                End If
            End If
        End If
        If IsLabelSymbolNew(rest$, "ÌÅ", "USE", lang) Then ' no need for coma
            Select Case Abs(IsLabel(bstack, rest$, what$))
            Case 3
                If GetVar(bstack, what$, I) Then s$ = var(I)
            Case 6
                If neoGetArray(bstack, what$, pppp) Then
                    
                    If Not NeoGetArrayItem(pppp, bstack, what$, it, rest$) Then
                        MissNumExpr
                        ifier = True: Exit Function
                    End If
                Else
                    MissNumExpr
                    ifier = False: Exit Function
                End If
                s$ = pppp.item(it)  ' get the sprite image
            Case Else
                MissNumExpr
                ifier = False: Exit Function
            End Select
            col = rgb(255, 255, 255)
            sx = 0
            If FastSymbol(rest$, ",") Then  ' get image manipulators..
                    If IsExp(bstack, rest$, sy) Then
                     col = CLng(sy)
                     If col > 0 Then col = QBColor(col Mod 16) Else col = -col
                     ElseIf IsStrExp(bstack, rest$, frm$) Then
                     '' maybe is a mask
                     
                     col = 0
                     Else
                     ifier = False: MissNumExpr: Exit Function
                    End If
                     
                        If FastSymbol(rest$, ",") Then
                            If IsExp(bstack, rest$, sx) Then
                          
                               Else
                            MissNumExpr
                            ifier = False: Exit Function
                            End If
                        Else
                
                        End If
                    
              End If
              If FastSymbol(rest$, ",") Then
                            If IsExp(bstack, rest$, sxy) Then
                        
                               Else
                            MissNumExpr
                            ifier = False: Exit Function
                            End If
                        Else
                
                        End If
                   If IsLabelSymbolNew(rest$, "ÌÅÃÅÈÏÓ", "SIZE", lang) Then
              If Not IsExp(bstack, rest$, sy) Then ifier = False: MissNumExpr: Exit Function
              Else
              sy = 1
              End If
              ' so col, sx and sy are image manipulators
            it = GetNewSpriteObj(CLng(p), s$, col, CLng(sx), CSng(sy), CSng(sxy), frm$)
          
            PosSprite CLng(p), x - players(it).x, y - players(it).y
        Else ' without USE
         PosSprite CLng(p), x - players(it).x, y - players(it).y
        End If
        Else ' without x, y
            If IsLabelSymbolNew(rest$, "ÌÅ", "USE", lang) Then
        Select Case Abs(IsLabel(bstack, rest$, what$))
        Case 3
            If GetVar(bstack, what$, I) Then s$ = var(I)
        Case 6
             If neoGetArray(bstack, what$, pppp) Then
   
                If Not NeoGetArrayItem(pppp, bstack, what$, it, rest$) Then
                     ifier = False: MissNumExpr: Exit Function
                End If
            Else
                 ifier = False: MissNumExpr: Exit Function
            End If
            s$ = pppp.item(it)
        Case Else
             ifier = False: MissNumExpr: Exit Function
        End Select
        col = rgb(255, 255, 255)
        sx = 0
    If FastSymbol(rest$, ",") Then
        If IsExp(bstack, rest$, sy) Then
            col = CLng(sy)
            If col > 0 Then col = QBColor(col) Else col = -col
        ElseIf IsStrExp(bstack, rest$, frm$) Then
            '' maybe is a mask
            col = 0
        Else
            ifier = False: MissNumExpr: Exit Function
        End If
        If FastSymbol(rest$, ",") Then
            If IsExp(bstack, rest$, sx) Then
            Else
                MissNumExpr
                ifier = False: Exit Function
            End If
        Else
        End If
    End If
            If FastSymbol(rest$, ",") Then
                If IsExp(bstack, rest$, sxy) Then
                Else
                    MissNumExpr
                    ifier = False: Exit Function
                End If
            Else
    
            End If
            If IsLabelSymbolNew(rest$, "ÌÅÃÅÈÏÓ", "SIZE", lang) Then          ' SIZE WITHOUT COMMA
                If Not IsExp(bstack, rest$, sy) Then ifier = False: MissNumExpr: Exit Function
            Else
                sy = 1
            End If
    
            it = GetNewSpriteObj(CLng(p), s$, col, CLng(sx), CSng(sy), CSng(sxy), frm$)
            ' no USE no X, Y or X,Y USE ..
            ' only command
        ElseIf IsLabelSymbolNew(rest$, "ÄÅÉÎÅ", "SHOW", lang) Then     ' SHOW
            SrpiteHideShow p, (True)
        ElseIf IsLabelSymbolNew(rest$, "ÊÑÕØÅ", "HIDE", lang) Then        ' HIDE
            SrpiteHideShow p, (False)
        ElseIf IsLabelSymbolNew(rest$, "ÁËËÁÎÅ", "SWAP", lang) Then       ' SWAP
            If IsExp(bstack, rest$, x) Then
                SpriteControl CLng(p), CLng(x)
            Else
                ifier = False
            End If
        End If
    End If
End If
ifier = True
Exit Function

Case "IMAGE", "ÅÉÊÏÍÁ"
ifier = ProcImage(bstack, rest$, lang)
Exit Function
Case "SPRITE", "ÄÉÁÖÁÍÏ", "ÄÉÁÖÁÍÅÉÁ"
            If IsStrExp(bstack, rest$, s$) Then
            sprite bstack, s$, rest$
           MyDoEvents1 bstack.Owner
End If
Case "COPY", "ÁÍÔÅÃÑÁØÅ", "ÁÍÔÉÃÑÁØÅ"
            x1 = 0
            y1 = 0
            Dim x2 As Long, y2 As Long
            If IsStrExp(bstack, rest$, s$) Then
            On Error Resume Next
            If ExtractType(s$) = "" Then s$ = s$ + ".bmp"
            FixPath s$
            If Not CanKillFile(s$) Then FilePathNotForUser:  Exit Function
            Set photo = New cDIBSection
            photo.CopyPicture bstack.Owner
            photo.SaveDib s$
            Set photo = Nothing
            Exit Function
Else
If IsExp(bstack, rest$, p) Then x1 = p
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y1 = p

If IsLabelSymbolNew(rest$, "ÓÔÏ", "TO", lang) Then
Select Case Abs(IsLabel(bstack, rest$, s$))
Case 3
    If GetVar(bstack, s$, it) Then
    
    Set photo = New cDIBSection
    Set scr = bstack.Owner
    With players(GetCode(scr))
    x1 = scr.ScaleX(x1 + .XGRAPH, 1, 3) - scr.ScaleX(.XGRAPH, 1, 3)
    y1 = scr.ScaleX(y1 + .YGRAPH, 1, 3) - scr.ScaleX(.YGRAPH, 1, 3)
    If photo.Create(CLng(x1), CLng(y1)) Then
    photo.LoadPictureBlt scr.hDC, CLng(scr.ScaleX(.XGRAPH, 1, 3)), CLng(scr.ScaleX(.YGRAPH, 1, 3))
    
    If photo.bitsPerPixel <> 24 Then Conv24 photo
    
    var(it) = DIBtoSTR(photo)
    ' DOSE OK
    End If
    End With
     Set photo = Nothing
     Set scr = Nothing
    Exit Function
    Else
    what$ = s$
    I3 = False
    Exit Function
    End If
Case 6
    ' ÁÐÏ ÐÉÍÁÊÁ
    Dim W6 As Long
    If neoGetArray(bstack, s$, pppp) Then
           If Not NeoGetArrayItem(pppp, bstack, s$, W6, rest$) Then Exit Function
    
    
      Set photo = New cDIBSection
      Set scr = bstack.Owner
      With players(GetCode(scr))
    x1 = scr.ScaleX(x1 + .XGRAPH, 1, 3) - scr.ScaleX(.XGRAPH, 1, 3)
    y1 = scr.ScaleX(y1 + .YGRAPH, 1, 3) - scr.ScaleX(.YGRAPH, 1, 3)
    If photo.Create(CLng(x1), CLng(y1)) Then
            photo.LoadPictureBlt scr.hDC, CLng(scr.ScaleX(.XGRAPH, 1, 3)), CLng(scr.ScaleX(.YGRAPH, 1, 3))

            If photo.bitsPerPixel <> 24 Then Conv24 photo
                If IsObject(pppp.item(W6)) Then
                        MyEr "can't copy image to " + Typename(pppp.item(W6)), "äåí ìðïñþ íá áíôéãñÜøù åéêüíá óå " + Typename(pppp.item(W6))
                        ifier = False
                Else
                        pppp.item(W6) = DIBtoSTR(photo)
                End If
            ' DOSE OK
        End If
        End With
        Set photo = Nothing
        Set scr = Nothing
        Exit Function
    
        Else
    what$ = s$
    I3 = False
    Exit Function
    End If

End Select
ElseIf IsLabelSymbolNew(rest$, "ÌÅ", "USE", lang) Then

If IsStrExp(bstack, rest$, s$) Then
 Set photo = New cDIBSection

If cDib(s$, photo) Then
x2 = 0
  Set scr = bstack.Owner
    If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then x2 = p
    If y2 = 0 Then y2 = 100
    If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y2 = p Else y2 = 100
    If x2 = 0 Then
   
    If y2 = 100 Then

 photo.PaintPicture scr.hDC, CLng(scr.ScaleX(x1, 1, 3)), CLng(scr.ScaleX(y1, 1, 3))


    Else
        photo.StretchPicture scr.hDC, CLng(scr.ScaleX(x1, 1, 3)), CLng(scr.ScaleX(y1, 1, 3)), photo.Width * y2 \ 100, photo.Height * y2 \ 100
        End If
     
    Else
  
     RotateDib1 bstack, photo, x2, y2, scr.BackColor
      photo.PaintPicture scr.hDC, CLng(scr.ScaleX(x1, 1, 3)), CLng(scr.ScaleX(y1, 1, 3))
    End If
End If
Set photo = Nothing
Set scr = Nothing
Else
 ifier = False: MissNumExpr: Exit Function
End If
ElseIf IsLabelSymbolNew(rest$, "ÅÐÁÍÙ", "TOP", lang) Then

If IsStrExp(bstack, rest$, s$) Then
 Set photo = New cDIBSection
Set scr = bstack.Owner
If cDib(s$, photo) Then
x2 = 0
    If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then x2 = p
    If y2 = 0 Then y2 = 100
    If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y2 = p Else y2 = 100
    

     RotateDib1 bstack, photo, x2, y2, , CLng(x1), CLng(y1)
       
        photo.PaintPicture scr.hDC, MyRound((scr.ScaleX(x1, 1, 3)), 0), MyRound((scr.ScaleX(y1, 1, 3)), 0) '', photo.Width * y2 \ 100, photo.Height * y2 \ 100
     
 
End If
Set photo = Nothing
Set scr = Nothing
Else
 ifier = False: MissNumExpr: Exit Function
End If
Else
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then x2 = p

If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y2 = p Else ifier = False: MissNumExpr: Exit Function

If x2 = 0 Or y2 = 0 Then ifier = False: MissNumExpr: Exit Function
ICOPY bstack.Owner, x1, y1, x2, y2
End If
End If
MyDoEvents1 bstack.Owner

Case "FRAME", "ÐËÁÉÓÉÏ" ' BOX X1,Y1,COL,BOX
prive = GetCode(bstack.Owner)
With players(prive)
x1 = 1
y1 = 1
col = .mypen
If FastSymbol(rest$, "@") Then
If FastSymbol(rest$, "(") Then
    If IsExp(bstack, rest$, p) Then x1 = Abs(p + .curpos) Mod (.mx + 1)
    If Not FastSymbol(rest$, ")") Then MissSymbol rest$, ")": Exit Function
Else
    If IsExp(bstack, rest$, p) Then x1 = Abs(p) Mod (.mx + 1)
End If
If FastSymbol(rest$, ",") Then
    If FastSymbol(rest$, "(") Then
        If IsExp(bstack, rest$, p) Then y1 = Abs(p + .currow - 1) Mod (.My + 1)
        If Not FastSymbol(rest$, ")") Then MissSymbol rest$, ")": Exit Function
    
    Else
        If IsExp(bstack, rest$, p) Then y1 = Abs(p) Mod (.My + 1)
    End If
    '
    
End If
y = 5
If FastSymbol(rest$, ",") Then If Not IsExp(bstack, rest$, y) Then y = 5
If FastSymbol(rest$, ",") Then
If IsExp(bstack, rest$, x) Then
If FastSymbol(rest$, ",") Then
If IsExp(bstack, rest$, p) Then
MyRect bstack.Owner, players(prive), (x1), (y1), (y), (x), (p)
Else
 ifier = False: MissNumExpr: Exit Function
End If
Else
MyRect bstack.Owner, players(prive), (x1), (y1), (y), (x)
End If
ElseIf IsStrExp(bstack, rest$, ss$) Then
MyRect bstack.Owner, players(prive), (x1), (y1), (y), ss$
Else
MyRect bstack.Owner, players(prive), (x1), (y1), 5, "?"
End If
Else
MyRect bstack.Owner, players(prive), (x1), (y1), 6, 0
End If
Else
If IsExp(bstack, rest$, p) Then x1 = Abs(p) Mod .mx
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y1 = Abs(p) Mod .My

x1 = x1 + .curpos - 1
y1 = y1 + .currow - 1
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then BoxColorNew bstack.Owner, players(prive), x1, y1, (p)


If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then col = p Else ifier = False: MissNumExpr: Exit Function


BoxBigNew bstack.Owner, players(prive), x1, y1, col
End If
End With
MyDoEvents1 bstack.Owner
Case "MARK", "ÓÇÌÁÄÉ"
prive = GetCode(bstack.Owner)
With players(prive)
x1 = 1
y1 = 1
col = .mypen
If IsExp(bstack, rest$, p) Then x1 = Abs(p) Mod .mx
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y1 = Abs(p) Mod .My
x1 = x1 + .curpos - 1
y1 = y1 + .currow - 1
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then col = p

If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then par = Not (p = 0)

CircleBig bstack.Owner, players(prive), x1, y1, col, par
End With
MyDoEvents1 bstack.Owner
Case "LINE", "ÃÑÁÌÌÇ"
ifier = False
If IsLabelSymbolNew(rest$, "ÅÉÓÁÃÙÃÇÓ", "INPUT", lang) Then
If FastSymbol(rest$, "#") Then

    If Not IsExp(bstack, rest$, p) Then Exit Function
    If Not FastSymbol(rest$, ",") Then Exit Function
    f = p Mod 512
    Select Case Abs(IsLabel(bstack, rest$, what$))
    Case 3
    ifier = True
    If Uni(f) Then
    If Not getUniStringlINE(f, s$) Then ifier = False: MyEr "Can't input, not UTF16LE", "Äåí ìðïñþ íá åéóÜãù, ü÷é UTF16LE": Exit Function
    Else
    getAnsiStringlINE f, s$
    End If
    If GetVar(bstack, what$, I) Then
    CheckVar var(I), s$
    Else
    GlobalVar what$, s$
    End If
    Case 6
    If neoGetArray(bstack, what$, pppp) Then

    If Not NeoGetArrayItem(pppp, bstack, what$, it, rest$) Then Exit Function
    Else
    Exit Function
    End If
    ifier = True
    If Uni(f) Then
    If Not getUniStringlINE(f, s$) Then ifier = False: MyEr "Can;t input, not UTF16LE", "Äåí ìðïñþ íá åéóÜãù, ü÷é UTF16LE": Exit Function
    Else
    getAnsiStringlINE f, s$
    End If
    If Typename(pppp.item(it)) = doc Then
    Set pppp.item(it) = New Document
    If s$ <> "" Then pppp.item(it).textDoc = s$
    Else
    pppp.item(it) = s$
    End If
    End Select
Else
If Not releasemouse Then If Not Form1.Visible Then Form1.Visible = True
If bstack.toprinter = True Then oxiforPrinter:   Exit Function
Select Case Abs(IsLabel(bstack, rest$, what$))
Case 3
           prive = GetCode(bstack.Owner)
                If players(prive).lastprint Then
                LCTbasket bstack.Owner, players(prive), players(prive).currow, players(prive).curpos
                players(prive).lastprint = False
                End If
QUERY bstack, frm$, s$, 1000, False

                If GetVar(bstack, what$, I) Then
                        CheckVar var(I), s$
                Else
                        GlobalVar what$, s$
                End If
                 ifier = True
Case 6
If neoGetArray(bstack, what$, pppp) Then
                       If Not NeoGetArrayItem(pppp, bstack, what$, it, rest$) Then Exit Function
                Else
                 MyEr "No such array", "Äåí õðÜñ÷åé ôÝôïéïò ðßíáêáò"
                       Exit Function
                End If
                           prive = GetCode(bstack.Owner)
                If players(prive).lastprint Then
                LCTbasket bstack.Owner, players(prive), players(prive).currow, players(prive).curpos
                players(prive).lastprint = False
                End If
QUERY bstack, frm$, s$, 1000, False

 If Typename(pppp.item(it)) = doc Then
                Set pppp.item(it) = New Document
                        If s$ <> "" Then pppp.item(it).textDoc = s$
                Else
                        pppp.item(it) = s$
                End If
                 ifier = True
End Select

End If


End If
Exit Function
Case "CURSOR", "ÄÑÏÌÅÁÓ" ' CURSOR X,Y
prive = GetCode(bstack.Owner)
With players(prive)
If IsExp(bstack, rest$, p) Then
x1 = CLng(p) Mod 1000 '' Mod (.mx + 1)
If FastSymbol(rest$, ",") Then
If IsExp(bstack, rest$, p) Then
y1 = CLng(p) Mod 1000   ''Mod (.my + 1)
.curpos = x1
.currow = y1

Else
I3 = False
End If
Else
.curpos = x1
End If
Else
I3 = False
End If
.lastprint = False
End With
Case "STEP", "ÂÇÌÁ"
With players(GetCode(bstack.Owner))
If IsLabelSymbolNew(rest$, "ÃÙÍÉÁ", "ANGLE", lang) Then
If IsExp(bstack, rest$, p) Then sx = p Else ifier = False: MissNumExpr: Exit Function
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then sy = p Else ifier = False: MissNumExpr: Exit Function
sx = sx / PI2
sx = (sx - Fix(sx)) * PI2
.XGRAPH = .XGRAPH + Cos(sx) * sy
.YGRAPH = .YGRAPH - Sin(sx) * sy
Else
If IsExp(bstack, rest$, p) Then .XGRAPH = .XGRAPH + p
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then .YGRAPH = .YGRAPH + p Else ifier = False: MissNumExpr: Exit Function
End If
End With

Case "MOVE", "ÈÅÓÇ"
With players(GetCode(bstack.Owner))
If IsExp(bstack, rest$, p) Then .XGRAPH = p
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then .YGRAPH = p Else ifier = False: MissNumExpr: Exit Function
End With
Case "FILL", "ÂÁØÅ"
prive = GetCode(bstack.Owner)
With players(prive)
If FastSymbol(rest$, "@") Then par = True
x1 = 0
y1 = 1
col = players(prive).mypen
If IsExp(bstack, rest$, p) Then x1 = p
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y1 = p

bstack.Owner.CurrentX = .XGRAPH
bstack.Owner.CurrentY = .YGRAPH
If par Then

'*****************
y = 5
If FastSymbol(rest$, ",") Then If Not IsExp(bstack, rest$, y) Then y = 5
If FastSymbol(rest$, ",") Then
If IsExp(bstack, rest$, x) Then
If FastSymbol(rest$, ",") Then
If IsExp(bstack, rest$, p) Then
MyFill bstack.Owner, (x1), (y1), (y), (x), (p)
Else
 ifier = False: MissNumExpr: Exit Function
End If
Else
MyFill bstack.Owner, (x1), (y1), (y), (x)
End If
ElseIf IsStrExp(bstack, rest$, ss$) Then
MyFill bstack.Owner, (x1), (y1), (y), ss$
Else
MyFill bstack.Owner, (x1), (y1), 5, "?"
End If
Else
MyFill bstack.Owner, (x1), (y1), 6, 0
End If

'*******************
Else
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then col = p Else ifier = False: MissNumExpr: Exit Function
Set scr = bstack.Owner
If FastSymbol(rest$, ",") Then 'ok
par = False
    If Not IsExp(bstack, rest$, x) Then
        If col = 0 Then x = rgb(255, 255, 255) Else x = 0
        Else
        par = True
    End If
    y = True
    If FastSymbol(rest$, ",") Then 'ok
        If IsExp(bstack, rest$, y) Then
            y = y <> 0
            par = True
        End If
    End If
    p = True
    If FastSymbol(rest$, ",") Then
        If IsExp(bstack, rest$, p) Then
            p = p <> 0
            par = True
        End If
    End If
    If par Then
    Gradient scr, mycolor(col), mycolor(x), RMIN(.XGRAPH, x1 + .XGRAPH), scr.Width - RMAX(.XGRAPH, x1 + .XGRAPH), RMIN(.YGRAPH, y1 + .YGRAPH), scr.Height - RMAX(.YGRAPH, y1 + .YGRAPH), y, p
    .XGRAPH = .XGRAPH + x1
    .YGRAPH = .YGRAPH + y1
    '' LCT scr, .currow, .curpos
    MyDoEvents1 scr
    Set scr = Nothing
    Exit Function
    End If
    Set scr = Nothing
 ifier = False: MissNumExpr: Exit Function
Else

scr.Line (.XGRAPH, .YGRAPH)-Step(x1, y1), mycolor(col), BF
.XGRAPH = scr.CurrentX
.YGRAPH = scr.CurrentY

End If
End If


End With
MyDoEvents1 scr
Set scr = Nothing
Exit Function

Case "FLOODFILL", "ÃÅÌÉÓÅ"
With players(GetCode(bstack.Owner))
par = IsLabelSymbolNew(rest$, "×ÑÙÌÁ", "COLOR", lang)
x1 = .XGRAPH
y1 = .YGRAPH
col = .mypen
If IsExp(bstack, rest$, p) Then x1 = p
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y1 = p

If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then col = p Else ifier = False: MissNumExpr: Exit Function
Ffill bstack.Owner, (x1), (y1), col, par
End With
MyDoEvents1 bstack.Owner
'' LCT scr, .currow, .curpos
Case "×ÁÑÁÎÅ", "DRAW"   ' LINE X1,Y1,COL
With players(GetCode(bstack.Owner))
x1 = 0
y1 = 1
col = .mypen
If IsLabelSymbolNew(rest$, "ÅÙÓ", "TO", lang) Then
If IsExp(bstack, rest$, p) Then x1 = p Else x1 = .XGRAPH
If FastSymbol(rest$, ",") Then
If IsExp(bstack, rest$, p) Then y1 = p Else y1 = .YGRAPH
If FastSymbol(rest$, ",") Then
If IsExp(bstack, rest$, p) Then col = p Else I3 = False: Exit Function
End If
Else
 y1 = .YGRAPH
End If
Set scr = bstack.Owner
scr.CurrentX = .XGRAPH
scr.CurrentY = .YGRAPH
scr.Line (.XGRAPH, .YGRAPH)-(x1, y1), mycolor(col)

.XGRAPH = scr.CurrentX
.YGRAPH = scr.CurrentY
MyDoEvents1 scr
Set scr = Nothing
Exit Function
ElseIf IsLabelSymbolNew(rest$, "ÃÙÍÉÁ", "ANGLE", lang) Then
If IsExp(bstack, rest$, p) Then sx = p Else I3 = False: Exit Function
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then sy = p Else I3 = False: Exit Function
sx = sx / PI2
sx = (sx - Fix(sx)) * PI2
x1 = Cos(sx) * sy
y1 = -Sin(sx) * sy
Else
If IsExp(bstack, rest$, p) Then x1 = p
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y1 = p
End If
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then col = p Else I3 = False: Exit Function
Set scr = bstack.Owner
scr.CurrentX = .XGRAPH
scr.CurrentY = .YGRAPH

scr.Line (.XGRAPH, .YGRAPH)-Step(x1, y1), mycolor(col)

.XGRAPH = scr.CurrentX
.YGRAPH = scr.CurrentY
Set scr = Nothing
End With
Case "WIDTH", "ÐÁ×ÏÓ"
Set scr = bstack.Owner
If IsExp(bstack, rest$, p) Then
    I = scr.DrawWidth
    x1 = scr.DrawStyle
    scr.DrawWidth = p
    If p = 1 Then
        If FastSymbol(rest$, ",") Then
            If IsExp(bstack, rest$, x) Then
                On Error Resume Next
                x = Int(x)
                If x >= 0 Or x <= 6 Then
                    scr.DrawStyle = x
                    If Err Then x = 0: scr.DrawStyle = Int(x)
                    scr.DrawWidth = p
                End If
            End If
        End If
    End If
    If FastSymbol(rest$, "{") Then
        ss$ = "{" & block(rest$) & "}"
        frm$ = rest$
        If FastSymbol(rest$, "}") Then
            Call executeblock(it, bstack, ss$, False, False)
        End If
    End If
End If
scr.DrawWidth = I
scr.DrawStyle = x1
If it <> 1 Then
    If Trim(ss$) = "" Then ss$ = " "
    rest$ = Left$(ss$, Len(ss$) - 1) + frm$
    ifier = False
    Set scr = Nothing
    Exit Function
End If
Set scr = Nothing
Exit Function
Case "ÊÁÌÐÕËÇ", "CURVE"
With players(GetCode(bstack.Owner))
If IsLabelSymbolNew(rest$, "ÃÙÍÉÁ", "ANGLE", lang) Then par = True
f = 32
ReDim PLG(f)
x1 = 1
PLG(0).x = bstack.Owner.ScaleX(.XGRAPH, 1, 3)
PLG(0).y = bstack.Owner.ScaleY(.YGRAPH, 1, 3)
Do
If x1 >= f Then f = f * 2: ReDim Preserve PLG(f)
If IsExp(bstack, rest$, p) Then
x = p

If Not FastSymbol(rest$, ",") Then ifier = False: MissNumExpr: Exit Function
If IsExp(bstack, rest$, p) Then
If par Then
sx = x / PI2
sx = (sx - Fix(sx)) * PI2
.XGRAPH = .XGRAPH + Cos(sx) * p
.YGRAPH = .YGRAPH - Sin(sx) * p
Else
.XGRAPH = .XGRAPH + CLng(x)
.YGRAPH = .YGRAPH + CLng(p)
End If
PLG(x1).x = bstack.Owner.ScaleX(.XGRAPH, 1, 3)
PLG(x1).y = bstack.Owner.ScaleY(.YGRAPH, 1, 3)

Else
 ifier = False: MissNumExpr: Exit Function
End If
Else
 ifier = False: MissNumExpr: Exit Function
End If

x1 = x1 + 1
Loop Until Not FastSymbol(rest$, ",")
x1 = x1 - 1

If PolyBezier(bstack.Owner.hDC, PLG(0), x1 + 1) = 0 Then
BadGraphic
 Exit Function
End If
bstack.Owner.FillStyle = vbSolid
End With
MyDoEvents1 bstack.Owner
'' LCT scr, .currow, .curpos
Case "PATH", "COLOR", "×ÑÙÌÁ", "É×ÍÏÓ"
f = IsLabelSymbolNew(rest$, "ÐÁÍÙ", "OVER", lang)
If FastSymbol(rest$, "!") Then par = True

If IsExp(bstack, rest$, p) Then
        col = p  ' using a fill color
        If FastSymbol(rest$, ",") Then
           If Not IsExp(bstack, rest$, x) Then MissNumExpr
           Else
           x = vbSolid
           End If
        If FastSymbol(rest$, "{") Then
            ss$ = "{" & block(rest$) & "}"
            frm$ = rest$
            If FastSymbol(rest$, "}") Then
          
                        BeginPath bstack.Owner.hDC
                        Call executeblock(it, bstack, ss$, False, False)
                      
                        ' what for 2 and 3 values
                        EndPath bstack.Owner.hDC
        
                        bstack.Owner.FillStyle = Int(x) Mod 8
                        bstack.Owner.FillColor = mycolor(col)
                        col = p ' from  6.3 change
                        If par Then bstack.Owner.DrawMode = 7
                        If f Then  ' from 8 rev 83
                                If bstack.Owner.FillStyle = 1 Then
                                   StrokeAndFillPath bstack.Owner.hDC
                                Else
                                    FillPath bstack.Owner.hDC
                                  End If
                        Else
                             StrokeAndFillPath bstack.Owner.hDC         ' stroke and fill path
                        End If
                        If par Then bstack.Owner.DrawMode = 13
                        bstack.Owner.FillStyle = vbSolid
          
                If Trim(ss$) = "" Then ss$ = " "
                  If it <> 1 Then rest$ = Left$(ss$, Len(ss$) - 1) + frm$: ifier = False
              End If
            Else
       MissPar
ifier = False
        End If
        Exit Function
    Else
        If FastSymbol(rest$, "{") Then
            ss$ = block(rest$)
            If Trim(ss$) = "" Then
             ifier = FastSymbol(rest$, "}")
            If FastSymbol(rest$, ";") Then
  
                SelectClipRgn bstack.Owner.hDC, 0&
            
            End If
            Exit Function
            End If
            ss$ = "{" & ss$ & "}"
            frm$ = rest$
            If FastSymbol(rest$, "}") Then
            
                BeginPath bstack.Owner.hDC
                Call executeblock(it, bstack, ss$, False, False)
                EndPath bstack.Owner.hDC
                bstack.Owner.FillStyle = vbSolid
                If FastSymbol(rest$, ";") Then           ' path { block of commands };
                If f Then
                SelectClipPath bstack.Owner.hDC, 2
                Else
                    SelectClipPath bstack.Owner.hDC, RGN_COPY  ' make a clip path
                    End If
                Else
                    If par Then bstack.Owner.DrawMode = 7
                    StrokePath bstack.Owner.hDC               ' stroke path
                    If par Then bstack.Owner.DrawMode = 13
                End If
                If Trim(ss$) = "" Then ss$ = " "
                   If it <> 1 Then rest$ = Left$(ss$, Len(ss$) - 1) + frm$: ifier = False: Exit Function

        End If
    Else
MissPar
ifier = False
    End If
    
End If
Exit Function
Case "DESKTOP", "ÅÐÉÖÁÍÅÉÁ"
olamazi
If IsLabelSymbolNew(rest$, "ÅÉÊÏÍÁ", "IMAGE", lang) Then
If IsStrExp(bstack, rest$, s$) Then
' FILL WIDTH  IMAGE
 If Left$(s$, 4) = "cDIB" And Len(s$) > 12 Then
 Set photo = New cDIBSection
 If Not cDib(s$, photo) Then MissCdibStr:  Exit Function
  photo.GetDpi 96, 96
  If form5iamloaded Then
  Form5.RestoreSizePos
  Form5.Cls
  photo.ThumbnailPaint Form5
  Else
  photo.ThumbnailPaint Form1
  End If
 Else
 If ExtractType(s$) = "" Then s$ = s$ & ".jpg"
                    If CFname(s$) = "" Then
                        s$ = mcd & s$
                        If CFname(s$) = "" Then
                        BadFilename
                        ifier = False
                        Exit Function
                        End If
                    Else
                        s$ = CFname(s$)
                    End If
        If Len(s$) < 254 Then
        ' look for image to load
            Set photo = New cDIBSection
            If CFname(s$) <> "" Then
            s$ = CFname(s$)
                    photo.CreateFromPicture LoadPicture(GetDosPath(s$))
                                           
                    If photo.bitsPerPixel <> 24 Then
                        Conv24 photo
                        Else
                        CheckOrientation photo, s$
                        End If
                       photo.GetDpi 96, 96
                       If form5iamloaded Then
                       Form5.RestoreSizePos
                       Form5.Cls
                       photo.ThumbnailPaint Form5
                       Else
                       photo.ThumbnailPaint Form1
                       End If
                    End If
        Else
        BadFilename
        End If
        End If
 Set photo = Nothing
End If
ElseIf IsLabelSymbolNew(rest$, "ÊÑÕØÅ", "HIDE", lang) Then
If Not form5iamloaded Then
'
End If
Form5.BackColor = &H0 ' ALWAYS BLACK
Form5.Cls
SetTrans Form5, CByte(255), mycolor(0), True
ElseIf IsLabelSymbolNew(rest$, "ÊÁÈÁÑÇ", "CLEAR", lang) Then
If form5iamloaded Then
Form5.RestoreSizePos
Form5.BackColor = &H0 ' ALWAYS BLACK
Form5.Cls

Set Form5.Picture = LoadPicture("")
Form5.Cls
SetTrans Form5, CByte(255), mycolor(-2)

Else
Form1.Cls
End If
Else
If Not Form1.Visible Then
ifier = False
MyEr "You cant't set DESKTOP before a SHOW or after HIDE", "Äåí ìðïñåßò íá ñõèìßóåéò ôçí ÅÐÉÖÁÍÅÉÁ áí äåí áíÜøåé ç ïÈüíç"
Exit Function
End If
If IsExp(bstack, rest$, p) Then
If FastSymbol(rest$, ",") Then
If IsExp(bstack, rest$, x) Then

Form5.Visible = True
Form5.ZOrder 1
SetTrans Form1, CByte(p And &HFF), mycolor(x), True

End If
Else

Form5.Visible = True
'Form5.ZOrder 1

SetTrans Form1, CByte(p And &HFF)

End If
Else
CdESK
End If
End If
Exit Function
Case "CHOOSE.COLOR", "ÅÐÅËÅÎÅ.×ÑÙÌÁ", "ÅÐÉËÅÎÅ.×ÑÙÌÁ"
olamazi
With players(GetCode(bstack.Owner))
If IsExp(bstack, rest$, p) Then
I = CLng(p)
Else
I = -.mypen
End If
it = I
If I > 16 Then it = -it
If I > 0 And I < 16 Then I = QBColor(I)


If Form1.Visible Then
Set photo = Form1
Else
Set photo = Nothing
End If
DialogSetupLang lang
If OpenColor(bstack, photo, I) Then
bstack.soros.PushVal CDbl(-I)
Else
bstack.soros.PushVal CDbl(-it)

End If
Set photo = Nothing
End With
Case "SAVE.AS", "ÁÐÏÈÇÊÅÕÓÇ.ÙÓ"
If IsSelectorInUse Then
ifier = False
SelectorInUse
Exit Function
End If
olamazi

frm$ = mcd
If myUcase(what$) = "SAVE.AS" Then
DialogSetupLang 1
Else
DialogSetupLang 0
End If
'ÁÐÏÈÇÊÅÕÓÇ.ÙÓ Ýíá.ïíïìá$, êáôÜëïãïò$, ôßôëïò$, ôõðïòáñ÷åßùí$
IsStrExp bstack, rest$, s$
If FastSymbol(rest$, ",") Then If IsStrExp(bstack, rest$, pa$) Then frm$ = pa$
If frm$ <> "" Then If Not isdir(frm$) Then NoSuchFolder rest$: Exit Function
If FastSymbol(rest$, ",") Then If IsStrExp(bstack, rest$, pa$) Then ss$ = pa$
If FastSymbol(rest$, ",") Then If Not IsStrExp(bstack, rest$, w$) Then I3 = False: Exit Function
'If FastSymbol(Rest$, ",") Then f = IsExp(bstack, Rest$, p) Else p = 0
par = True ' p <> 0
'If FastSymbol(Rest$, ",") Then f = IsExp(bstack, Rest$, p) Else p = 0
' DUM = p <> 0 NOT USED FOR SAVE FILE
DUM = False
olamazi
If Form1.Visible Then
Set photo = Form1
Else
Set photo = Nothing
End If
' change for file type
If InStr(w$, "|") > 0 Then w$ = ""  ' NOT COMBATIBLE..CHANGE TO ALL FILES
If SaveAsDialog(bstack, photo, s$, frm$, ss$, w$) Then
bstack.soros.PushStr ReturnFile
Else
bstack.soros.PushStr ""
End If

Set photo = Nothing
Exit Function

Case "ÁËËÁÃÇ", "CHANGE"

If IsExp(bstack, rest$, p) Then
p = CLng(p)
If p >= 0 And p < UBound(q()) Then
     
              '
While FastSymbol(rest$, ",")
If IsLabelSymbolNew(rest$, "ÖÑÁÓÇ", "TEXT", lang) Then
If IsStrExp(bstack, rest$, w$) Then q(p).Tag = w$
ElseIf IsLabelSymbolNew(rest$, "ÐÅÍÁ", "PEN", lang) Then
If IsExp(bstack, rest$, x) Then q(p).Pen = x
ElseIf IsLabelSymbolNew(rest$, "ÖÏÍÔÏ", "BACK", lang) Then
If IsExp(bstack, rest$, x) Then q(p).back = x
ElseIf IsLabelSymbolNew(rest$, "ÐËÁÉÓÉÏ", "BORDER", lang) Then
If IsExp(bstack, rest$, x) Then q(p).fore = x
ElseIf IsLabelSymbolNew(rest$, "ÏÄÇÃÉÁ", "COMMAND", lang) Then
If IsStrExp(bstack, rest$, w$) Then q(p).Comm = w$
End If

Wend
RTarget bstack, q(p)
End If
End If
Case "BACK", "BACKGROUND", "ÐÅÑÉÈÙÑÉÏ"
ProcBackGround bstack, rest$, lang, ifier
Exit Function
Case "BACK", "BACKGROUND", "ÐÅÑÉÈÙÑÉÏ"
ProcBackGround bstack, rest$, lang, ifier
Exit Function
'**********************************************************************************

Case "STACK", "ÓÙÑÏÓ"
   If IsLabelSymbolNew(rest$, "ÍÅÏÓ", "NEW", lang) Then
   If FastSymbol(rest$, "{") Then
ss$ = "{" & block(rest$) & "}"
frm$ = rest$
If FastSymbol(rest$, "}") Then
Set ps = bstack.soros
Set bstack.Sorosref = New mStiva
Call executeblock(it, bstack, ss$, False, Once)
Set bstack.Sorosref = ps
Set ps = Nothing
If it = 0 Then ifier = False
Exit Function
End If
End If
   Else
If FastSymbol(rest$, "!") Then
If VALIDATEpart(rest$, s$) Then
Do While s$ <> ""
If ISSTRINGA(s$, pa$) Then
bstack.soros.DataStr pa$
ElseIf IsNumberD(s$, x) Then
bstack.soros.DataVal x
Else
Exit Do
End If
Loop
Else
ifier = False
End If
Exit Function
Else
' STACK A$
' stack a$, "NN"
x1 = Abs(IsLabel(bstack, rest$, what$))
If x1 = 3 Then
If GetVar(bstack, what$, it) Then
ss$ = var(it)
If FastSymbol(rest$, ",") Then
If Not IsStrExp(bstack, rest$, pa$) Then ifier = False: Exit Function
End If
If VALIDATE(ss$, pa$, frm$) Then
IsSymbol3 pa$, ","
If Typename(var(it)) = doc Then
Set var(it) = New Document
var(it).textDoc = pa$
Else
var(it) = pa$
End If
Set ps = New mStiva
I = 1
Do While I <= Len(frm$) And ss$ <> ""
If Mid$(frm$, I, 1) = "S" Then
    If ISSTRINGA(ss$, pa$) Then ps.DataStr pa$
Else
    If IsNumberD(ss$, x) Then ps.DataVal x
End If
IsSymbol ss$, ","
I = I + 1
Loop
bstack.soros.MergeTop ps
Else
ifier = False
Exit Function
End If
Else
rest$ = what$ & " " & rest$
If IsStrExp(bstack, rest$, ss$) Then
pa$ = ""
If VALIDATE(ss$, pa$, frm$) Then
Set ps = New mStiva
I = 1
Do While I <= Len(frm$) And ss$ <> ""
If Mid$(frm$, I, 1) = "S" Then
    If ISSTRINGA(ss$, pa$) Then ps.DataStr pa$
Else
    If IsNumberD(ss$, x) Then ps.DataVal x
End If
IsSymbol ss$, ","
I = I + 1
Loop
bstack.soros.MergeTop ps
End If
Else
ifier = False
Exit Function
End If
End If
ElseIf x1 = 6 Then
If neoGetArray(bstack, what$, pppp) Then
If Not NeoGetArrayItem(pppp, bstack, what$, f, rest$) Then ifier = False: Exit Function
ss$ = pppp.item(f)
If FastSymbol(rest$, ",") Then
If Not IsStrExp(bstack, rest$, pa$) Then ifier = False: Exit Function
End If

If VALIDATE(ss$, pa$, frm$) Then
IsSymbol3 pa$, ","
If Typename(pppp.item(f)) = doc Then
s$ = pppp.item(f)
       Set pppp.item(f) = New Document
       If s$ <> "" Then
       pppp.item(f).textDoc = s$
       End If
Else
pppp.item(f) = pa$
End If
Set ps = New mStiva
I = 1
Do While I <= Len(frm$) And ss$ <> ""
If Mid$(frm$, I, 1) = "S" Then
    If ISSTRINGA(ss$, pa$) Then ps.DataStr pa$
Else
    If IsNumberD(ss$, x) Then ps.DataVal x
End If
IsSymbol ss$, ","
I = I + 1
Loop
bstack.soros.MergeTop ps
'stack$(bstack) = ss$ & stack$(bstack)
Else
ifier = False
Exit Function
End If
Else
rest$ = what$ & rest$
If IsStrExp(bstack, rest$, ss$) Then
pa$ = ""
If VALIDATE(ss$, pa$, frm$) Then
Set ps = New mStiva
I = 1
Do While I <= Len(frm$) And ss$ <> ""
If Mid$(frm$, I, 1) = "S" Then
    If ISSTRINGA(ss$, pa$) Then ps.DataStr pa$
Else
    If IsNumberD(ss$, x) Then ps.DataVal x
End If
IsSymbol ss$, ","
I = I + 1
Loop
bstack.soros.MergeTop ps
'stack$(bstack) = ss$ & stack$(bstack)
End If
Else
ifier = False
Exit Function
End If
End If
ElseIf IsStrExp(bstack, rest$, ss$) Then
pa$ = ""
If VALIDATE(ss$, pa$, frm$) Then
Set ps = New mStiva
I = 1
Do While I <= Len(frm$) And ss$ <> ""
If Mid$(frm$, I, 1) = "S" Then
    If ISSTRINGA(ss$, pa$) Then ps.DataStr pa$
Else
    If IsNumberD(ss$, x) Then ps.DataVal x
End If
IsSymbol ss$, ","
I = I + 1
Loop
bstack.soros.MergeTop ps
'stack$(bstack) = ss$ & stack$(bstack)
End If
Else
I = 0
With bstack.soros
s$ = ""
Do
I = I + 1
If .Total < I Then Exit Do

Select Case .StackItemType(I)
Case "?"
s$ = s$ & "(?) "
Case "N"
s$ = s$ & CStr(.StackItem(I)) & " "
Case "S"
ss$ = .StackItem(I)
    If Len(ss$) > 78 Then
    s$ = s$ & Chr(34) + Left$(ss$, 75) & ".." & Chr(34)
    Else
    s$ = s$ & Chr(34) + ss$ & Chr(34)
    End If

Case Else
Set photo = .StackItem(I)
    s$ = s$ + "*[" + Typename(photo) + "]"
End Select
Loop
Set photo = Nothing
End With
prive = GetCode(bstack.Owner)
PlainBaSket bstack.Owner, players(prive), s$
crNew bstack, players(prive)
Exit Function
End If
End If
End If
Case "ÅÊÄÏÓÇ", "VERSION"
prive = GetCode(bstack.Owner)
PlainBaSket bstack.Owner, players(prive), CStr(App.Major) & "." & CStr((App.Minor \ 1000) - 1) & " (" & CStr(App.Minor Mod 1000) & ")"
crNew bstack, players(prive)
Exit Function
Case "FONT", "ÃÑÁÌÌÁÔÏÓÅÉÑÁ"     '********************************************************FONT "TAHOMA"
    ' NAME ONLY
    ' RESET WINDOW
    prive = GetCode(bstack.Owner)
    If IsStrExp(bstack, rest$, s$) Then
        On Error Resume Next
        x1 = bstack.Owner.Font.charset
        bstack.Owner.Font.name = s$
        If Not (x1 = bstack.Owner.Font.charset) Then
            bstack.Owner.Font.charset = x1
        End If
    
        If LCase(bstack.Owner.Font.name) <> LCase(s$) Then
        
            bstack.Owner.Font.name = MYFONT
            bstack.Owner.Font.charset = bstack.myCharSet
        Else
             ''MYFONT = s$
        End If
    End If
        Form3.StoreFont bstack.Owner.Font.name, players(prive).SZ, bstack.Owner.Font.charset
        players(prive).FontName = bstack.Owner.Font.name
    Exit Function
Case "SCROLL", "ÊÕËÉÓÇ"
If bstack.toprinter Then
MyEr "No scrolling for printer document", "¼÷é êýëéóç ãéá ôï Ýããñáöï åêôýðùóçò"
ifier = False
Else
prive = GetCode(bstack.Owner)
If IsLabelSymbolNew(rest$, "ÊÁÔÙ", "DOWN", lang) Then
    ScrollDownNew bstack.Owner, players(prive)
ElseIf IsLabelSymbolNew(rest$, "×ÙÑÉÓÌÁ", "SPLIT", lang) Then
If IsExp(bstack, rest$, p) Then
''SetText bstack.Owner
With players(prive)
    If p < 0 Then p = .My + p
    If p >= 0 And p < .My Then .mysplit = p
End With
Else
ifier = False
SyntaxError
End If
Else
 DUM = IsLabelSymbolNew(rest$, "ÁÍÙ", "UP", lang)
ScrollUpNew bstack.Owner, players(prive)


End If
End If
Exit Function

Case "EDIT.DOC", "ÄÉÏÑÈÙÓÅ"
prive = GetCode(bstack.Owner)
With players(prive)
ifier = False
                Form1.EditTextWord = Not IsLabelSymbolNew(rest$, "ÊÙÄÉÊÁ", "CODE", lang)
                DUM = False
                    y1 = Abs(IsLabel(bstack, rest$, s$))
                     
                    If y1 = 6 Then
                                If neoGetArray(bstack, s$, pppp) Then
                                 If Not NeoGetArrayItem(pppp, bstack, s$, I, rest$) Then Exit Function
                                Else
                                MissingDoc
                                
                                Exit Function
                                End If
                    End If
                    If FastSymbol(rest$, ",") Then
                        If Not IsExp(bstack, rest$, sx) Then    ' FROM
                      If FastSymbol(rest$, ",") Then
                      GoTo conteditdoc
                      Else
                             MissNumExpr
                            
                            Exit Function
                      End If
                        End If
                    Else
                
                    
                 sx = 0
                    End If
                    If FastSymbol(rest$, ",") Then
conteditdoc:
                        If Not IsStrExp(bstack, rest$, frm$) Then
                        If FastSymbol(rest$, ",") Then GoTo conteditdoc2
                        End If
                          Else
                    Form1.ResetMarks
                     frm$ = ""
                    
                    End If
                    If FastSymbol(rest$, ",") Then
conteditdoc2:
                        If Not IsExp(bstack, rest$, p) Then    ' FROM
                            MissStringExpr
                            
                            Exit Function
                            Else
                            col = CLng(p)
                            DUM = True
                        End If
                        
                    Else
                    Form1.ResetMarks
                    End If
                        If y1 = 3 Then
                            If GetVar(bstack, s$, I) Then
                                If Typename(var(I)) = doc Then
                                If var(I).LastSelStart > 0 And sx = 0 Then
                                x1 = var(I).LastSelStart
                                    Else
                                    If sx = 0 Then sx = -1
                                    x1 = sx
                                End If
                                   Form1.TEXT1.title = frm$ + " "
                                  ScreenEditDOC bstack, var(I), 0, .mysplit, .mx - 1, .My - 1, x1, DUM, col
                                    var(I).LastSelStart = x1
                                    ifier = True
                                Else
                                    MissingDoc
                                    
                                End If
                            Else
                                   MissFuncParameterStringVar
                                    
                            End If
                        ElseIf y1 = 6 Then
                                    If Typename(pppp.item(I)) = doc Then
                                                  If pppp.item(I).LastSelStart > 0 And sx = 0 Then
                                x1 = pppp.item(I).LastSelStart
                                    Else
                                    If sx = 0 Then sx = -1
                                    x1 = sx
                                End If
                                    Form1.TEXT1.title = frm$ + " "
                                  ScreenEditDOC bstack, pppp.item(I), 0, .mysplit, .mx - 1, .My - 1, x1, DUM, col
                                    pppp.item(I).LastSelStart = x1
                                    ifier = True
                                    
                                      Else
                                      MissingDoc
                                      
                                      End If
                               
                                    
                    Else
                          MissPar
                          
                    End If
End With
                    Exit Function

Case "REPORT", "ÁÍÁÖÏÑÁ"
ifier = False
prive = GetCode(bstack.Owner)
''If Lang Then pa$ = "LINE" Else pa$ = "ÃÑÁÌÌÇ"
If IsExp(bstack, rest$, p) Then
If Not FastSymbol(rest$, ",") Then MissPar:: Exit Function
Else
p = 0
End If
If IsStrExp(bstack, rest$, s$) Then
 x = bstack.Owner.Width
If FastSymbol(rest$, ",") Then
If Not IsExp(bstack, rest$, x) Then: Exit Function
With players(prive)
If x <= .mx Then
x = x * .Xt - 2 * dv15
bstack.Owner.CurrentX = bstack.Owner.CurrentX + dv15
End If
End With
End If

If FastSymbol(rest$, ",") Then
If Not IsExp(bstack, rest$, y) Then: Exit Function
y1 = y - 1
If IsLabelSymbolNew(rest$, "ÃÑÁÌÌÇ", "LINE", lang) Then
        If Not IsExp(bstack, rest$, sx) Then: Exit Function
        x1 = sx - 1
If IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then
          wwPlain bstack, players(prive), s$, CLng(x), y1, , , CLng(p), x1, , , True
  rest$ = "@READ " + rest$
  If Not executeblock(I, bstack, rest$, True, False) Then
' error ??
  End If
  Else
        wwPlain bstack, players(prive), s$, CLng(x), y1, , , CLng(p), x1
      End If
Else
If IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then
  wwPlain bstack, players(prive), s$, CLng(x), y1, , , CLng(p), , it, , True
  rest$ = "@READ " + rest$
  If Not executeblock(I, bstack, rest$, True, False) Then
 ' error ?
  End If
  
Else
  wwPlain bstack, players(prive), s$, CLng(x), y1, , , CLng(p), , it
  End If
 End If
players(prive).LastReportLines = CDbl(it)
  
Else

 wwPlain bstack, players(prive), s$, CLng(x), 100000, True, , CLng(p), , it
   players(prive).LastReportLines = -1
End If

ifier = True
Else
If LastErNum <> 0 Then LastErNum = 0:: Exit Function      'ifier=true

End If
Exit Function

Case "ITALIC", "ÐËÁÃÉÁ"   '.......................

If IsExp(bstack, rest$, p) Then
bstack.myitalic = (p <> 0)
Else
bstack.myitalic = Not bstack.myitalic
p = CDbl(bstack.myitalic)
End If
players(GetCode(bstack.Owner)).italics = Abs(p <> 0)
bstack.Owner.Font.Italic = (p <> 0)


Exit Function

Case "ÊËÅÉÄÉ", "FKEY"

If IsLabelSymbolNew(rest$, "ÊÁÈÁÑÏ", "CLEAR", lang) Then
    For I = 1 To 13: FK$(I) = "": Next I
ElseIf IsExp(bstack, rest$, p) Then
prive = GetCode(bstack.Owner)
I = ((CLng(p) + 11) Mod 12) + 1
    If FastSymbol(rest$, ",") Then
        If IsStrExp(bstack, rest$, s$) Then
        FK$(I) = s$
        Else
: MissPar: ifier = False:
         Exit Function
        End If
    Else
    
        PlainBaSket bstack.Owner, players(prive), FK$(I)
        crNew bstack, players(prive)
    End If
Else
pa$ = "": prive = GetCode(bstack.Owner)
For I = 1 To 13
If FK$(I) <> "" Then
pa$ = pa$ + placeme$("ÊËÅÉÄÉ", "FKEY", lang) + Right$(" " & Str$(I), 3) & " [" & FK$(I) & "]" ' FKEY
If I = 13 Then pa$ = pa$ + " SHIFT + F1" Else pa$ = pa$ + " F" & CStr(I)
pa$ = pa$ + vbCrLf

End If
Next I
RepPlain bstack, bstack.Owner, pa$
End If
Exit Function


Case "CHARSET", "×ÁÑÁÊÔÇÑÅÓ"
If IsExp(bstack, rest$, p) Then
On Error Resume Next
chr11:
    Set scr = bstack.Owner
prive = GetCode(scr)
    scr.Font.charset = CInt(p)
    Form1.TEXT1.Font.charset = scr.Font.charset
    Form1.List1.Font.charset = scr.Font.charset
      Form3.StoreFont scr.Font.name, players(prive).SZ, scr.Font.charset
      players(prive).charset = scr.Font.charset
          Set scr = Nothing
Exit Function
End If
Case "OPEN", "ÁÍÏÉÎÅ"
ifier = False
If IsStrExp(bstack, rest$, s$) Then
If s$ <> "" Then
FixPath s$
Else
BadFilename
ifier = False
Exit Function
End If
    If IsLabelSymbolNew(rest$, "ÃÉÁ", "FOR", lang) Then
    
    I = FreeFile
   Uni(I) = IsLabelSymbolNew(rest$, "ÅÕÑÉÁ", "WIDE", lang)
   'SPELLING CORRECTION FOR GREEK WORD..
   If Not Uni(I) Then Uni(I) = IsLabelSymbolNew(rest$, "ÅÕÑÅÉÁ", "WCHAR", lang)
    If IsLabelSymbolNew(rest$, "ÅÉÓÁÃÙÃÇ", "INPUT", lang) Then
            If IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then
                    If Abs(IsLabel(bstack, rest$, what$)) = 1 Then
                        If GetVar(bstack, what$, it) Then
                            var(it) = I
                        Else
                            GlobalVar what$, I
                        End If
                        FLEN(I) = 1
                        If CFname(GetDosPath(s$)) <> "" Then
                            On Error Resume Next
                                Open GetDosPath(s$) For Binary Access Read As I
                            If Err.Number > 0 Then ifier = False: Exit Function
                         
                        End If
                End If
                End If
        ElseIf IsLabelSymbolNew(rest$, "ÓÕÌÐËÇÑÙÓÇ", "APPEND", lang) Then
         If Not CanKillFile(s$) Then FilePathNotForUser:  Exit Function
            If IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then
                If Abs(IsLabel(bstack, rest$, what$)) = 1 Then
                    If GetVar(bstack, what$, it) Then
                        var(it) = I
                    Else
                        GlobalVar what$, I
                    End If
                    If CFname(GetDosPath(s$)) <> "" Then
                        FLEN(I) = 1
                        On Error Resume Next
                        If Not WeCanWrite(GetDosPath(s$)) Then ifier = False: Exit Function
                            Open GetDosPath(s$) For Binary Access Write As I
                            Seek I, LOF(I) + 1
                        If Err.Number > 0 Then:    ifier = False: Exit Function

                    End If
                End If
            End If
        ElseIf IsLabelSymbolNew(rest$, "ÅÎÁÃÙÃÇ", "OUTPUT", lang) Then
        If Not CanKillFile(s$) Then FilePathNotForUser:  Exit Function
        If IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then
            If Abs(IsLabel(bstack, rest$, what$)) = 1 Then
                If GetVar(bstack, what$, it) Then
                var(it) = I
                Else
                GlobalVar what$, I
                End If
                On Error Resume Next
                FLEN(I) = 1
                If Not NeoUnicodeFile(s$) Then ifier = False: Exit Function

                 On Error Resume Next
                 Open GetDosPath(s$) For Binary Access Write As I
 
                    If Err.Number > 0 Then ifier = False: Exit Function

               End If
       End If
        ElseIf IsLabelSymbolNew(rest$, "ÐÅÄÉÁ", "RANDOM", lang) Then
        If Not CanKillFile(s$) Then FilePathNotForUser:  Exit Function
      If IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then
            If Abs(IsLabel(bstack, rest$, what$)) = 1 Then
                If GetVar(bstack, what$, it) Then
                    var(it) = I
                 Else
                    GlobalVar what$, I
                End If
                If IsLabelSymbolNew(rest$, "ÌÇÊÏÓ", "LEN", lang, , , , False) Then
                    If FastSymbol(rest$, "=") Then
                        If IsExp(bstack, rest$, p) Then
                                p = Abs(p)
                   If Uni(I) Then p = p * 2
                                        If p > 32767 Then p = 32767
                                        
                                        x1 = p
                        
                                 FLEN(I) = x1
                        Else
                                Exit Function
                        End If
                    Else
                            Exit Function
                    End If

                        On Error Resume Next
                        If CFname(s$) = "" Then
                         If Not NeoUnicodeFile(s$) Then ifier = False: Exit Function
                        End If
            
                
                        Open GetDosPath(s$) For Binary As I
                        If Err.Number > 0 Then: ifier = False: Exit Function
                        
                End If
          End If
        End If
   
            End If

  
    End If
    ifier = True
Exit Function
End If

Case "NAME", "ÏÍÏÌÁ"
x1 = Abs(IsLabelBig(bstack, rest$, s$, , w$))

If x1 = 1 Then
s$ = w$
 If Not IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then ifier = False: Exit Function
 y1 = Abs(IsLabelBig(bstack, rest$, ss$, , w$))
 If y1 = 0 Then
rest$ = w$ + rest$
y1 = IsStrExp(bstack, rest$, ss$)
ElseIf y1 = 1 Then
ss$ = w$
End If
If y1 <> 0 Then
If Not CanKillFile(CFname(s$)) Then FilePathNotForUser: ifier = False: Exit Function
RenameFile s$, ss$

Exit Function
End If
Else
rest$ = s$ + rest$
End If
If IsStrExp(bstack, rest$, s$) Then
 If Not IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then ifier = False: Exit Function
If IsStrExp(bstack, rest$, ss$) Then
On Error Resume Next
RenameFile s$, ss$
On Error GoTo 0
Else
ifier = False
Exit Function
End If
Else
ifier = False
Exit Function
End If


Case "WITH", "ÌÅ"
' WITH A, "SIZE" SET ALFA  ' SET
' WITH A, "SIZE" AS ALFA  ' GET
' WITH A, "SIZE", 1244  ' LET
If Abs(IsLabel(bstack, rest$, s$)) = 1 Then
If GetVar(bstack, s$, I) Then
If Not IsObject(var(I)) Then BadObjectDecl:  Exit Function
If Not var(I) Is Nothing Then  ''???
       Do While FastSymbol(rest$, ",")
        If IsStrExp(bstack, rest$, ss$) Then
        On Error Resume Next
          ProcProperty bstack, var(), I, ss$, rest$, lang
          ifier = Err = 0
          Err.clear
        Else
        MissStringExpr
        ifier = False
        Exit Do
        End If
        Loop
        Exit Function
Else
BadObjectDecl
Exit Function
End If
Else

 Nosuchvariable s$
End If
End If
Exit Function
Case "METHOD", "ÌÅÈÏÄÏÓ"
' METHOD A,"Multiply",12,12 [AS RESULT]   (or Result$)  if [As] isn't there so
' METHOD A "Multiply",12,12 AS RESULT  without
' METHOD A "Multiply", &alfa,&beta$   'passing by reference
I = Abs(IsLabel(bstack, rest$, s$))


If I = 1 Then
 If GetVar(bstack, s$, I) Then
        If IsObject(var(I)) Then
            If var(I) Is Nothing Then
                MissingObj
            Else
                IsSymbol3 rest$, ","
                If IsStrExp(bstack, rest$, pa$) Then
           ''     IsSymbol3 rest$, ","
              ProcMethod bstack, var(), I, pa$, rest$, lang
          ifier = Err = 0
          Err.clear
                End If
            End If
        Else
            MissingObjRef
        End If
        Exit Function
 Else
  Nosuchvariable s$
 End If
End If

Exit Function
Case "TUNE", "ÌÅËÙÄÉÁ"
If IsExp(bstack, rest$, p) Then
    If Not FastSymbol(rest$, ",") Then
        beeperBEAT = CLng(p)
    ElseIf IsStrExp(bstack, rest$, s$) Then
    ' B C D E F G
    beeperBEAT = CLng(p)
    PlayTune (s$)
    Else
   MyEr "wrong parameter", "ëÜèïò ðáñÜìåôñïò"
    ifier = False
    Exit Function
    End If
ElseIf IsStrExp(bstack, rest$, s$) Then
' B C D E F G
PlayTune (s$)
End If
Exit Function
Case "Ç×ÏÓ", "SOUND"
If IsStrExp(bstack, rest$, s$) Then
PlaySoundNew s$
End If
Case "DB.USER", "ÂÁÓÇ.×ÑÇÓÔÇÓ"
    If IsStrExp(bstack, rest$, s$) Then
        If s$ = "" Then
            extDBUser = ""
            extDBUserPassword = ""
        Else
            extDBUser = s$
        End If
        If FastSymbol(rest$, ",") Then
            If Not IsStrExp(bstack, rest$, extDBUserPassword) Then
                extDBUserPassword = ""
            End If
            DBUser = extDBUser
            DBUserPassword = extDBUserPassword
        End If
    End If
Case "DB.PROVIDER", "ÂÁÓÇ.ÐÁÑÏ×ÏÓ"
If IsStrExp(bstack, rest$, pa$) Then
If pa$ = "" Then
JetPrefixUser = JetPrefixHelp
JetPostfixUser = JetPostfixHelp
Else
' DB.PROVIDER "Microsoft.Jet.OLEDB.4.0", "Jet OLEDB", "100101"
' DB.PROVIDER "dns=testme;Uid=admin;Pwd=12alfa45", "ODBC", "100101"
' use (name) for database name

 JetPrefixUser = "Provider=" + pa$ + ";Data Source="  ' normal
    If FastSymbol(rest$, ",") Then
       If IsStrExp(bstack, rest$, s$) Then
          If s$ = "" Then
             ifier = False
          ElseIf UCase(s$) = "ODBC" Or UCase(s$) = "PATH" Then
                If FastSymbol(rest$, ",") Then
                 If IsStrExp(bstack, rest$, ss$) Then
                 JetPrefixUser = pa$ & ";Password=" & ss$
                 Else
                 JetPrefixUser = pa$ & ";Password="
                 End If
                Else
                JetPrefixUser = pa$
                End If
                JetPostfixUser = ";"
          Else
          
             If FastSymbol(rest$, ",") Then
                If IsStrExp(bstack, rest$, ss$) Then
                   If ss$ = "" Then
                       JetPostfixUser = ";" & s$ & ":Database Password=100101;"
                   Else
                       JetPostfixUser = ";" & s$ & ":Database Password=" & ss$ & ";"
                   
                   End If
                    
                Else
                    ifier = False
                End If
             Else
                JetPostfixUser = ";" & s$ & ":Database Password=100101;"
             End If
          End If
        Else
         ifier = False
       End If
    Else
       JetPostfixUser = JetPostfixHelp

    End If
 End If
 Else
 JetPrefixUser = JetPrefixHelp
 
End If
JetPostfix = JetPostfixUser
JetPrefix = JetPrefixUser
Case "TONE", "ÔÏÍÏÓ"
If IsExp(bstack, rest$, p) Then
    If Not FastSymbol(rest$, ",") Then
       Beeper 1000, p
    ElseIf IsExp(bstack, rest$, sx) Then
    Beeper sx, p
    Else
   MyEr "wrong parameter", "ëÜèïò ðáñÜìåôñïò"
    ifier = False
    Exit Function
    End If
Else
Beeper 1000, 100
End If
Exit Function
Case "VIEW", "ÄÅÉÎÅ"
If bstack.toprinter Then
oxiforPrinter
 ifier = False
Exit Function
End If
getnames bstack, rest$, Form1.List1, lang
mywait bstack, CDbl(100)
If Not FastSymbol(rest$, ";") Then GoTo ekei
Exit Function
Case "CHOOSE.ORGAN", "ÅÐÅËÅÎÅ.ÏÑÃÁÍÏ", "ÅÐÉËÅÎÅ.ÏÑÃÁÍÏ"
If Form4.Visible Then
Form4.Visible = False
    If Form1.TEXT1.Visible Then
        Form1.TEXT1.SetFocus
    Else
        Form1.SetFocus
    End If
End If
Form1.List1.clear
f = 0
For I = 1 To 127
s$ = ORGAN(I)
Form1.List1.additemFast s$
If TextWidth(bstack.Owner, s$) > f Then f = TextWidth(bstack.Owner, s$)
Next I
GoTo ekei
Case "BROWSER", "ÁÍÁËÏÃÉÏ"
s$ = ""
If Not IsStrExp(bstack, rest$, s$) Then
    If Not Abs(IsLabelBig(bstack, rest$, s$, , w$)) = 1 Then
    If NOEDIT Then
    
    If Form1.view1.Visible Then
     Form1.KeyPreview = True
     ProcTask2 bstack
    Form1.view1.SetFocus: Form1.KeyPreview = False
    Else
    Form1.KeyPreview = True
    End If
    Else
    
    End If
        Exit Function
    Else
    s$ = w$ '' low case
    End If
End If
            If FastSymbol(rest$, ",") Then
                    If IsExp(bstack, rest$, x) Then IEX = CLng(x): IESizeX = Form1.ScaleWidth - IEX Else MissNumExpr: ifier = False: Exit Function
                If FastSymbol(rest$, ",") Then
                    If IsExp(bstack, rest$, x) Then IEY = CLng(x): IESizeY = Form1.ScaleHeight - IEY Else MissNumExpr: ifier = False: Exit Function
                                If FastSymbol(rest$, ",") Then
                    If IsExp(bstack, rest$, x) Then IESizeX = CLng(x) Else MissNumExpr: ifier = False: Exit Function
                                    If FastSymbol(rest$, ",") Then
                    If IsExp(bstack, rest$, x) Then IESizeY = CLng(x) Else MissNumExpr: ifier = False: Exit Function
                 End If
                End If
             End If
           End If
           If IESizeX = 0 Or IESizeY = 0 Then
           IEX = Form1.ScaleWidth / 8
           IEY = Form1.ScaleHeight / 8
           IESizeX = Form1.ScaleWidth * 6 / 8
           IESizeY = Form1.ScaleHeight * 6 / 8
           End If

If myLcase(Left$(s$, 7)) = "http://" Or myLcase(Left$(s$, 4)) = "www." Or myLcase(Left$(s$, 6)) = "about:" Then
Form1.IEUP s$
ElseIf s$ <> "" Then
Form1.IEUP "file:" & strTemp + s$
Else
Form1.IEUP ""
Form1.KeyPreview = True
End If
ProcTask2 bstack
Exit Function
Case "ÌÐÉÐ", "BEEP"
''If Not extreme Then If Not bstack.toprinter Then scr.refresh '(beep is for something wrong..)
If IsExp(bstack, rest$, p) Then
MessageBeep CLng(p)
Else
Beep
End If
' ----------------------------------------------------------------
Case "MENU", "ÅÐÉËÏÃÇ"
If bstack.toprinter Then
oxiforPrinter
 ifier = False
Exit Function
End If
prive = GetCode(bstack.Owner)
            If IsLabelSymbolNew(rest$, "ÄÅÉÎÅ", "SHOW", lang) Then
                If Form1.List1.Visible Then
                        If IsStrExp(bstack, rest$, s$) Then
                            p = Form1.List1.find(s$)
                        ElseIf IsExp(bstack, rest$, p) Then
                            p = p - 1
                        Else
                            SyntaxError
                            ifier = False
                        End If
                        If p <> -1 Then
                            If IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then  ' CHANGE MENU ITEM IN AN OPEN MENU
                                If IsStrExp(bstack, rest$, s$) Then
                                    Form1.List1.List(CLng(p)) = s$
                                Else
                                   MissStringExpr
                                  ifier = False
                                End If
                            End If
                            If Not FastSymbol(rest$, ";") Then Form1.List1.ShowThis CLng(p + 1) Else Form1.List1.ShowMe2
                        End If
                Else
                        If Form1.List1.listcount > 0 Then  ' YOU CAN OPEN A MENU WITH A START ITEM OTHER THAN 1
                            If IsStrExp(bstack, rest$, s$) Then
                                p = Form1.List1.find(s$)
                            ElseIf IsExp(bstack, rest$, p) Then
                                p = p - 1
                            Else
                               SyntaxError
                               ifier = False
                            End If
                            If p <> -1 Then
                                If IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then  ' CHANGE MENU ITEM IN AN OPEN MENU
                                ' IN A THREAD OR IN A @ VARIANT
                                    If IsStrExp(bstack, rest$, s$) Then
                                        Form1.List1.List(CLng(p)) = s$
                                    Else
                                        MissStringExpr
                                        ifier = False
                                    End If
                                Else
                                    If p < Form1.List1.listcount Then Form1.List1.listindex = CLng(p)
                                End If
                        End If
                        frm$ = Form1.List1.Tag
                End If
                GoTo ekei
        End If
    ElseIf IsLabelSymbolNew(rest$, "ÐËÁÉÓÏ", "FRAME", lang) Then
            Form1.List1.BorderStyle = 1 - Abs(IsLabelSymbolNew(rest$, "Ï×É", "OFF", lang))
    ElseIf IsLabelSymbolNew(rest$, "ÂÁØÅ", "FILL", lang) Then
        If IsExp(bstack, rest$, p) Then
        Form1.List1.CapColor = mycolor(p)
        LEVCOLMENU = 1
        If FastSymbol(rest$, ",") Then
            If IsExp(bstack, rest$, p) Then
                   Form1.List1.BackColor = mycolor(p)
                   LEVCOLMENU = 2
                           If FastSymbol(rest$, ",") Then
                                If IsExp(bstack, rest$, p) Then
                                   Form1.List1.ForeColor = mycolor(p)
                                   LEVCOLMENU = 3
                                   Else
                                   MissNumExpr
                                               ifier = False
                                   End If
                        End If
            
                   Else
                   MissNumExpr
                               ifier = False
                   End If
            End If
     
        Else
        MissNumExpr
                    ifier = False
        End If
        ElseIf IsLabelSymbolNew(rest$, "ÔÉÔËÏÓ", "TITLE", lang) Then
        If Not IsStrExp(bstack, rest$, s$) Then Exit Function
        If Right$(s$, 2) = vbCrLf Then s$ = Left$(s$, Len(s$) - 2)
        Form1.List1.Enabled = Form1.List1.Visible
    
        Form1.List1.HeadLine = s$
        Form1.List1.FloatList = Not IsLabelSymbolNew(rest$, "ÊÑÁÔÇÓÅ", "HOLD", lang)
        ElseIf IsLabelSymbolNew(rest$, "ÅÐÉËÅÎÅ", "SELECT", lang) Then
        '' If Form1.List1.LeaveonChoose Then

         Form1.List1.PressSoft

        '' End If
        Else
If FastSymbol(rest$, "@") Then
    par = True
    If Not IsStrExp(bstack, rest$, s$) Then Exit Function
    frm$ = s$
    If FastSymbol(rest$, "!") Then GoTo ekei
    If Not FastSymbol(rest$, ",") Then Exit Function
    
    Else
    par = False
    End If
    If FastSymbol(rest$, "+") Then
    If Not IsStrExp(bstack, rest$, s$) Then Exit Function

    Form1.List1.additemFast s$
       While FastSymbol(rest$, ",")
    If Not IsStrExp(bstack, rest$, s$) Then ifier = False: Exit Function
    Form1.List1.additemFast s$
    Wend
   If Form1.List1.LeaveonChoose Then GoTo ekei Else Exit Function
    
    End If
    If Not FastSymbol(rest$, "!") Then
    If Form1.List1.Enabled = True Then
    Form1.List1.Visible = False
    If Not par Then Form1.List1.HeadLine = ""
    End If
    
    Form1.List1.Enabled = False
    
    Form1.List1.clear

    If Not IsStrExp(bstack, rest$, s$) Then
  bstack.Owner.TabStop = False
    Form1.List1.HeadLine = "": Form1.KeyPreview = True: Exit Function
    End If
    
    
    Form1.List1.additemFast s$
    If TextWidth(bstack.Owner, s$) > f Then f = TextWidth(bstack.Owner, s$)
    While FastSymbol(rest$, ",")
    If Not IsStrExp(bstack, rest$, s$) Then ifier = False: Exit Function
    Form1.List1.additemFast s$
    If TextWidth(bstack.Owner, s$) > f Then f = TextWidth(bstack.Owner, s$)
    Wend
    'f = f \ .xt + 1
    Else
ekei:
    it = Form1.List1.listcount
    f = 0
    If it > 0 Then
    With Form1.List1
            
            For it = it - 1 To 0 Step -1
            If TextWidth(bstack.Owner, .List(it)) > f Then f = TextWidth(bstack.Owner, .List(it))
            
            Next
    End With
    End If
    End If
    
    
    it = Form1.List1.listcount
With players(prive)
If .lastprint Then
x1 = (bstack.Owner.CurrentX + .Xt - dv15) \ .Xt
If x1 < 0 Then x1 = 0
If x1 > .mx Then x1 = .mx - 1
Else
x1 = .curpos

End If
y1 = .currow
If x1 < 0 Then
  x1 = 0
  ElseIf x1 > .mx Then
  x1 = .mx - 1
  Else
  
  ''    GetXYb scr, players(prive), .curpos, .currow
    End If
    f = Int(f / TextWidth(bstack.Owner, "W") + 0.5)
    If it > 0 Then
            If f < 4 Then f = 4  ' 4 chars minimum
            If f > .mx Then f = .mx  ' .mx maximum
            If f + x1 > .mx Then x1 = .mx - f - 1
            If it > .My \ 2 Then it = .My \ 2
            If CLng(.My - y1) < it Then  ' need space above
                If .My - y1 > 2 Then  ' if we have space under
                    it = .My - .currow - 1
                    
                Else  ' no we dont have
                   y1 = .My - it - 1
                
                End If
            End If

            If Not Form1.Visible Then Form1.Visible = True: MyDoEvents
            bstack.Owner.refresh
                If Not Form1.List1.Visible Then
                    If Not bstack.Owner.Visible Then bstack.Owner.Visible
                    If bstack.tolayer Then bstack.Owner.ZOrder 0
                End If
                With Form1.List1
            .Enabled = True
            .NoPanRight = False
            .NoFreeMoveUpDown = True
            .SingleLineSlide = True
            SetTextBasketBack bstack.Owner, players(prive)
            .overrideTextHeight = Form3.TextHeight("fj")
            End With
    ListChoise bstack, frm$, x1, y1, f + x1, it + y1 - 1
''GetXYb scr, players(prive), .curpos, .currow
   '  mywait bstack, CDbl(100)  ' slow down..
    INK$ = ""
    UINK$ = ""
    MINK$ = ""
    End If
    '------------------------
End With

End If

Case "THREAD.PLAN", "Ó×ÅÄÉÏ.ÍÇÌÁÔÙÍ"
'             Interrupted = False              Interrupted = False
If IsLabelSymbolNew(rest$, "ÔÁÕÔÏ×ÑÏÍÏ", "CONCURRENT", lang) Then
If TaskMaster.QueueCount <> 0 Then
If Not Interrupted Then MyEr "Threads exist, can't change thread plan", "ÕðÜñ÷ïõí íÞìáôá, äåí ìðïñåßò íá áëëÜîåéò ó÷Ýäéï"
Else
Interrupted = True
End If

ElseIf IsLabelSymbolNew(rest$, "ÄÉÁÄÏ×ÉÊÏ", "SEQUENTIAL", lang) Then
If TaskMaster.QueueCount <> 0 Then
If Interrupted Then MyEr "Threads exist, can't change thread plan", "ÕðÜñ÷ïõí íÞìáôá, äåí ìðïñåßò íá áëëÜîåéò ó÷Ýäéï"
Else
Interrupted = False
End If
End If

Case Else
I3 = False
End Select
End Function

Sub SpaceForVar(j As Long)
var2used = var2used + 1
If UBound(var()) <= var2used Then
On Error Resume Next
    ReDim Preserve var(UBound(var()) * 2 + 1) As Variant
    If Err.Number > 0 Then
    NOEXECUTION = True
    MyEr Err.Description, Err.Description
    Err.clear
    Exit Sub
    End If
    
End If
j = var2used
End Sub
Function ReboundArr(bstack As basetask, name$, arrcode As Long) As Boolean
On Error GoTo 0
Dim ss$
name$ = myUcase(name$)
If Left$(name$, 5) = "ÁÕÔÏ." Or Left$(name$, 5) = "THIS." Then
    ss$ = bstack.UseGroupname & Mid(name$, 6)
Else
    If HERE$ = "" Then
        ss$ = name$
    Else
        ss$ = HERE$ & "." & name$
    End If
End If

ReboundArr = varhash.findRebound(ss$, arrcode, var())

End Function
Function ReboundVar(bstack As basetask, name$, q As Long) As Boolean
On Error GoTo 0
Dim ss$
name$ = myUcase(name$)
If Left$(name$, 5) = "ÁÕÔÏ." Or Left$(name$, 5) = "THIS." Then
    ss$ = bstack.UseGroupname & Mid(name$, 6)
Else
    If HERE$ = "" Then
        ss$ = name$
    Else
        ss$ = HERE$ & "." & name$
    End If
End If

ReboundVar = varhash.findRebound(ss$, q, var())

End Function
Function GlobalVar(name$, q As Variant, Optional Link As Boolean = False, Optional makeitglobal As Boolean = False) As Long
On Error GoTo 0
Dim j As Long

If Not Link Then
        
       j = AllocVar()
            If Right$(name$, 1) = "%" Then
                On Error Resume Next
                q = Int(q)
                If Err.Number = 6 Then q = 0
                On Error GoTo 0
            End If

        var(j) = q

Else
If CStr(q) = "" Then
j = 0
Else
    j = CLng(q)
End If
End If
If HERE$ = "" Or makeitglobal Then
''VarName$ = VarName$ & Chr(1) + myUcase(NAME$) + constwidth(j)
varhash.ItemCreator myUcase(name$), j, Link
Else
''VarName$ = VarName$ & Chr(1) + here$ & "." & myUcase(NAME$) + constwidth(j)
varhash.ItemCreator HERE$ & "." & myUcase(name$), j, Link
End If
GlobalVar = j
End Function
Function GlobalVarRefOnly(name$) As Long
On Error GoTo 0
Dim j As Long
j = AllocVar() ' var2used
 var(j) = CLng(0)  ' like an empty...
If HERE$ = "" Then
''VarName$ = VarName$ & Chr(1) + myUcase(name$) + constwidth(j)
varhash.ItemCreator myUcase(name$), j
Else
'VarName$ = VarName$ & Chr(1) + here$ & "." & myUcase(name$) + constwidth(j)
varhash.ItemCreator HERE$ & "." & myUcase(name$), j

End If
GlobalVarRefOnly = j
End Function
Function LinkGroup(ByVal name$, q As Variant, Optional usefinal As Boolean = False) As Boolean
Dim I As Long, Vlist As Boolean, FList, f$, aa$, v As Long
Dim s() As String
If Typename(q) <> "Group" Then Exit Function
'Debug.Print "link to ", name$
If Not usefinal Then
If HERE$ = "" Then
name$ = myUcase(name$) + "."
Else
 name$ = HERE$ & "." & myUcase(name$) + "."
End If
End If
With q


FList = .FunclistTotal(var(), True)
With q.soros
For I = 1 To .Total
aa$ = .StackItem(I)

v = Split(aa$)(1)
Vlist = True
Select Case Typename(var(v))
Case "Group"
    If Left$(Split(aa$)(0), 1) = "*" Then
       varhash.ItemCreator name$ + Mid$(Split(aa$)(0), 2), CLng(Val(v)), True
   LinkGroup name$ + Mid$(Split(aa$)(0), 2) + ".", var(Val(Split(aa$)(1))), True
        
    Else
    varhash.ItemCreator name$ + Split(aa$)(0), CLng(Val(v)), True
    LinkGroup name$ + Split(aa$)(0) + ".", var(Val(Split(aa$)(1))), True
    End If
 
Case Else

    varhash.ItemCreator name$ + Split(aa$)(0), CLng(Val(v)), True
End Select

Next
End With



Dim subname$
If FList <> "" Then
subname$ = Replace(Replace(FList, Chr$(3), name$), Chr$(2), name$)
s() = Split(subname$, Chr$(1))
For I = LBound(s$()) + 1 To UBound(s$())
If s(I) <> "" Then
 subHash.ItemCreator CStr(Split(s(I))(0)), Val(Split(s(I))(1)), True
End If
Next I

End If
LinkGroup = Vlist Or FList <> ""
End With

End Function

Sub GlobalArr(bstack As basetask, name$, rst$, items As Long, q As Long, Optional useglobalname As Boolean = False)
' new mArray..
Dim afto As New mArray, NewKey As Long
If rst$ = "" And q = -1 Then
' Make an empty array
GoTo dummyarray
End If


Dim j As Long, I As Long, p As Double, aa As Boolean
items = 1
I = 0

Do
If IsExp(bstack, rst$, p) Then
I = I + 1
items = items * Int(Abs(p))
afto.PushDim CLng(p)
aa = True
End If
If I > 9 Then Exit Do
Loop Until Not FastSymbol(rst$, ",")

If aa And FastSymbol(rst$, ")") Then
    afto.PushEnd
dummyarray:
    NewKey = AllocVar()  ' version 8.1
    ' check if is already in ucase
    name$ = myUcase(name$)
    If HERE$ = "" Or useglobalname Then
        varhash.ItemCreator bstack.GroupName + name$, NewKey
        afto.arrname = name$
    Else
        varhash.ItemCreator HERE$ + "." + bstack.GroupName + name$, NewKey
        afto.arrname = HERE$ & "." & name$
    End If
    If q = -1 Then
' Stop
q = NewKey
 ''   rst$ = CStr(newkey) 'a way to return the handler
    End If
    Set var(NewKey) = afto
    
Else
If FastSymbol(rst$, ",") Then
items = 0
MyEr "No more 10 dimensions allowed", "ÌÝ÷ñé 10 äéáóôÜóåéò åðéôñÝðïíôáé)"
Else

    items = -1
    rst$ = ":?" & rst$
    End If
End If
End Sub
Sub GlobalArrResize(afto As mArray, bstack As basetask, name$, rst$, items As Long, q As Long)
' new mArray..

Dim j As Long, I As Long, p As Double, aa As Boolean
items = 1
I = 0
afto.StartResize
Do
If IsExp(bstack, rst$, p) Then
I = I + 1
items = items * Int(Abs(p))
afto.PushDim CLng(p)
aa = True
End If
If I > 9 Then Exit Do
Loop Until Not FastSymbol(rst$, ",")
afto.PushEnd
If aa And FastSymbol(rst$, ")") Then
    

Else
     If FastSymbol(rst$, ",") Then
items = 0
MyEr "No more 10 dimensions allowed", "ÌÝ÷ñé 10 äéáóôÜóåéò åðéôñÝðïíôáé)"
Else
    items = -1
    rst$ = ":?" & rst$
    End If
End If
End Sub


Function neoGetArray(bstack As basetask, ByVal nm$, ga As mArray, Optional searchonly As Boolean = False, Optional useglobalname As Boolean = False, Optional useLocalOnly As Boolean = False) As Boolean
Dim k As Long
Dim n$
nm$ = myUcase(nm$)
'If Right$(nm$, 1) = "(" Then nm$ = nm$ + ")"
If useglobalname Then
n$ = bstack.GroupName + nm$

Else

n$ = HERE$ & "." + bstack.GroupName + nm$

End If


If Left$(nm$, 5) = "ÁÕÔÏ." Or Left$(nm$, 5) = "THIS." Then
    If useLocalOnly Then Exit Function
    If bstack.UseGroupname <> "" Then
    n$ = bstack.UseGroupname + Mid$(nm$, 6)
     varhash.find n$, k
    Else
    n$ = Mid$(nm$, 5)
      If bstack.GetDot(n$, 1) Then varhash.find HERE$ + "." + n$, k Else Exit Function
    End If

ElseIf varhash.find(n$, k) = False Then

End If
If k = 0 Then

            If searchonly Then Exit Function
            If Not useLocalOnly Then
                        n$ = nm$
                        varhash.find n$, k
            End If
End If


If k > 0 Then
If Typename(var(k)) = "Empty" Then
Set ga = New mArray: neoGetArray = True
Else
Set ga = var(k): neoGetArray = True
End If
       
           
           

End If


End Function
Function neoGetArrayLinkOnly(bstack As basetask, ByVal nm$, Link As Long, Optional useglobalname As Boolean = False, Optional useLocalOnly As Boolean = False) As Boolean
Dim k As Long
Dim n$
nm$ = myUcase(nm$)
If Len(nm$) > 5 And False Then
           ' not used any more
                If Left$(nm$, 5) = "THIS." Then
               
                    n$ = StripThis2(HERE$)
                    If n$ <> "" Then n$ = n$ & "." & bstack.GroupName & Mid(nm$, 6) Else n$ = HERE$ & "." & nm$
                ElseIf Left$(nm$, 5) = "ÁÕÔÏ." Then
           
                    n$ = StripThis2(HERE$)
                    If n$ <> "" Then n$ = n$ & "." & bstack.GroupName & Mid(nm$, 6) Else n$ = HERE$ & "." & nm$
                Else
                If useglobalname Then
                    n$ = nm$
                    Else
                    n$ = HERE$ & "." & bstack.GroupName & nm$
                    End If
                End If

Else
If useglobalname Then
n$ = bstack.GroupName + nm$

Else
If HERE$ = "" Then
n$ = bstack.GroupName & nm$
Else
n$ = HERE$ & "." & bstack.GroupName & nm$
End If
End If
End If

If varhash.find(n$, k) = False And bstack.UseGroupname <> "" Then
    If Left$(nm$, 5) = "ÁÕÔÏ." Or Left$(nm$, 5) = "THIS." Then
        If useLocalOnly Then Exit Function
        If StripThis2(bstack.UseGroupname) = "" Then
            n$ = bstack.UseGroupname + Mid$(nm$, 6)
        Else
            n$ = StripThis2(bstack.UseGroupname) + "." + Mid$(nm$, 6)
        End If
        varhash.find n$, k
    End If
End If
If k = 0 Then
    If Not useLocalOnly Then
        n$ = myUcase(nm$)
        varhash.find n$, k
    End If
End If
If k > 0 Then
    Link = k
    neoGetArrayLinkOnly = True
    
End If

End Function

Function CopyArrayItems(bstack As basetask, nm$) As String
Dim k As Long
If neoGetArrayLinkOnly(bstack, nm$, k) Then CopyArrayItems = CStr(k)

End Function

Function CopyArrayItemsNoFormated(bstack As basetask, nm$) As Long
Dim k As Long
If varhash.find(nm$ + "(", k) Then
CopyArrayItemsNoFormated = k
End If
End Function

Function GlobalSub(name$, q As String, Optional sbgroupname As String = "") As Long
Dim j As Long
j = AllocSub()
With sbf(j)
    .sb = q
    .sbc = 0
    .sbgroup = sbgroupname
End With
subHash.ItemCreator myUcase(name$), j
GlobalSub = j
End Function

Function GetGlobalVar(nm$, I As Long) As Boolean

If varhash.find(myUcase(nm$), I) Then
GetGlobalVar = True
End If
End Function
Function StripThis(ByVal n$) As String

Dim a$, b$, I&

a$ = StripRVAL(n$)  ' we need that
If a$ = n$ Then
StripThis = ""
Exit Function
Else
b$ = a$
End If
I& = InStr(n$, ".")
If I& > 0 Then

DropLeft ".", n$
I& = InStrRev(n$, ".") - 1
If I& > 0 Then
StripThis = b$ & "." & Left$(n$, I&)
Else
StripThis = b$
End If
Else
StripThis = b$
End If
End Function
Function StripThis2(ByVal n$) As String

Dim a$, b$, I&

If StripRVAL2(n$, a$) Then
StripThis2 = a$
Exit Function
End If
If a$ = n$ Then
StripThis2 = ""
Exit Function
Else
b$ = a$
End If
I& = InStr(n$, ".")
If I& > 0 Then

DropLeft ".", n$
I& = InStrRev(n$, ".") - 1
If I& > 0 Then
StripThis2 = b$ & "." & Left$(n$, I&)
Else
StripThis2 = b$
End If
Else
StripThis2 = b$
End If
End Function

Function GetVar(bstack As basetask, ByVal nm$, I As Long, Optional lookglobalonly As Boolean = False, Optional skip As Boolean, Optional looklocalonly As Boolean = False) As Boolean
If skip Then Exit Function
If bstack.ExistVar(nm$) Then I = -1: Exit Function
''nm$ = myUcase(nm$)

Dim n$, CC As Long

If Len(nm$) > 5 Then
    If Left$(nm$, 5) = "ÁÕÔÏ." Or Left$(nm$, 5) = "THIS." Then
        If bstack.UseGroupname <> "" Then
                  n$ = bstack.UseGroupname + Mid$(nm$, 6)
                If varhash.find(n$, CC) Then GoTo there12
        Else
        
            n$ = StripThis2(HERE$)
            If n$ <> "" Then
                n$ = n$ & "." & Mid(nm$, 6)
            
            Else
            If IsLabel(bstack, Mid$(nm$, 6), n$) Then ' NO NEED DOT ANY MORE..(WE USE DOTNEW)
                    n$ = HERE$ & "." & n$
            Else
                    n$ = HERE$ & "." & nm$
            End If
            End If
        End If
    Else
    If lookglobalonly Then
     n$ = nm$
    Else
        n$ = HERE$ & "." & nm$
        End If
    End If
Else
If nm$ = "THIS" Or nm$ = "ÁÕÔÏ" Then
  n$ = ".DELETEME"
    If IsLabel(bstack, (n$), n$) < 0 Then
        If Len(n$) = 8 Then GetVar = False: Exit Function
    nm$ = Left$(n$, Len(n$) - 9)
    End If
End If
    If lookglobalonly Then
         n$ = nm$
        Else

   n$ = HERE$ & "." & bstack.GroupName & nm$
    End If
End If

If varhash.find(n$, CC) Then
there12:
    GetVar = True
    I = CC
ElseIf Not looklocalonly Then
    If varhash.find(nm$, CC) Then
    I = CC
    GetVar = True
    End If
End If

'***********************

End Function
Function getvar2(bstack As basetask, nm$, I As Long, Optional lookglobalonly As Boolean = False, Optional skip As Boolean, Optional looklocalonly As Boolean = False) As Boolean
If skip Then Exit Function
If bstack.ExistVar(nm$) Then I = -1: Exit Function
''nm$ = myUcase(nm$)

Dim n$, CC As Long

If Len(nm$) > 5 Then
    If Left$(nm$, 5) = "ÁÕÔÏ." Or Left$(nm$, 5) = "THIS." Then
        If bstack.UseGroupname <> "" Then
                  n$ = bstack.UseGroupname + Mid$(nm$, 6)
                If varhash.find(n$, CC) Then GoTo there12
        Else
        
            n$ = StripThis2(HERE$)
            If n$ <> "" Then
                n$ = n$ & "." & Mid(nm$, 6)
            
            Else
            If IsLabel(bstack, Mid$(nm$, 6), n$) Then ' NO NEED DOT ANY MORE..(WE USE DOTNEW)
                    n$ = HERE$ & "." & n$
            Else
                    n$ = HERE$ & "." & nm$
            End If
            End If
        End If
    Else
    If lookglobalonly Then
     n$ = nm$
    Else
        n$ = HERE$ & "." & nm$
        End If
    End If
Else
If nm$ = "THIS" Or nm$ = "ÁÕÔÏ" Then
  n$ = ".DELETEME"
    If IsLabel(bstack, (n$), n$) < 0 Then
        If Len(n$) = 8 Then getvar2 = False: Exit Function
    nm$ = Left$(n$, Len(n$) - 9)
    End If
End If
    If lookglobalonly Then
         n$ = nm$
        Else

   n$ = HERE$ & "." & bstack.GroupName & nm$
    End If
End If

If varhash.find(n$, CC) Then
there12:
    getvar2 = True
    I = CC
ElseIf Not looklocalonly Then
    If varhash.find(nm$, CC) Then
    I = CC
    getvar2 = True
    End If
End If

'***********************

End Function
Function GetlocalVar(nm$, I As Long) As Boolean
If varhash.find(HERE$ & "." & myUcase(nm$), I) Then
GetlocalVar = True
End If
End Function

Function RVAL(ByVal s$, v As Long) As String
Dim ss$
If InStr(s$, "[") = 0 Then
RVAL = s$ & "[" & CStr(v) & "]"
Else
ss$ = GetStrUntil("[", s$)

RVAL = ss$ & "[" & CStr(Val(s$) + v) & "]"
End If
End Function
Function TheSame(ByVal s$, ByVal q$) As Boolean
Dim part1 As String
part1 = StripRVAL(s$)
If part1 <> "" Then
    If InStr(part1, ".") > 0 Then
    ' all in part1
    Else
    DropLeft ".", s$
    part1 = part1 & "." & s$
    End If
    End If
TheSame = part1 = q$
End Function
Function StripRVAL2(s$, result$) As Boolean
' return s$ number as string
' return function name...
'
Dim bb$, varname$
bb$ = s$
If InStr(s$, "[") = 0 Then
' look varlist to find group
Dim I As Long
I = InStrRev(s$, ".")
If I > 1 Then s$ = Left$(s$, I - 1)
If InStrRev(varname$, "." + s$ + " ") < 1 Then Exit Function
s$ = Mid$(varname$, InStrRev(varname$, Chr$(1), InStrRev(varname$, "." + s$ + " ")) + 1)
result$ = GetStrUntil(" ", s$)
StripRVAL2 = True
If Not Typename(var(Val(s$))) = "Group" Then StripRVAL2 = False: s$ = bb$: result$ = ""
Else
result$ = GetStrUntil("[", s$)
End If

End Function
Function StripRVAL(ByVal s$) As String
If InStr(s$, "[") = 0 Then
' do not delete this.....
StripRVAL = s$
Else
StripRVAL = GetStrUntil("[", s$)
End If
End Function
Function iRVAL(ByVal s$, v As Long) As Long
If InStr(s$, "[") = 0 Then
iRVAL = v
Else
DropLeft "[", s$
iRVAL = Val(s$) + v
End If
End Function
Function LookFastForModule(w$) As Boolean
Dim a As Long
LookFastForModule = subHash.find(w$, a)
End Function
Function GetSubFullName(nm$, fullname$) As Boolean

If Len(HERE$) > 0 Then
    If Len(HERE$) > Len(nm$) Then
        If Mid$(HERE$, Len(HERE$) - Len(nm$)) = "." + nm$ Then
            GetSubFullName = subHash.ExistKey(nm$)
          fullname = nm$: Exit Function
        End If
    End If
End If

If HERE$ <> "" Then
     GetSubFullName = subHash.ExistKey(HERE$ & "." & nm$)
  If GetSubFullName Then fullname$ = HERE$ & "." & nm$: Exit Function
End If

    GetSubFullName = subHash.ExistKey(nm$)
 If GetSubFullName Then fullname$ = nm$





End Function


Function GetSubFullNameB(nm$, fullname$) As Boolean
Dim I&, n$
Dim subname$  '
subname$ = subHash.Show
If Len(HERE$) > 0 Then
If Len(HERE$) > Len(nm$) Then
If Mid$(HERE$, Len(HERE$) - Len(nm$)) = "." + nm$ Then
n$ = "." & nm$ & " "
I& = InStr(subname$, n$)
Dim j&
If I& > 0 Then
j& = InStrRev(subname$, Chr$(1), I&)
nm$ = Mid$(subname$, j& + 1, Len(nm$) + I& - j&)
n$ = Mid$(subname$, j&, Len(nm$) + 1)
I& = j&
 
End If
End If

End If
End If

If I& = 0 Then
n$ = Chr(1) + HERE$ & "." & nm$ & " "
I& = InStr(subname$, n$)
End If
If I& = 0 Then
n$ = Chr(1) + nm$ & " "
I& = InStr(subname$, n$)
End If

If I& > 0 Then
GetSubFullNameB = True
fullname$ = RTrim$(Mid$(n$, 2))


Else
GetSubFullNameB = False

End If

End Function
Function GetSub(nm$, I&) As Boolean
I& = 0
If Len(HERE$) > 0 Then
    If Len(HERE$) > Len(nm$) Then
        If Mid$(HERE$, Len(HERE$) - Len(nm$)) = "." + nm$ Then
                
            GetSub = subHash.find(StripRVAL(HERE$) + "." + nm$, I&)
       
        End If
   ElseIf Right$(HERE$, 1) = "]" Then
   GetSub = subHash.find(StripRVAL(HERE$) + "." + nm$, I&)
    End If
End If

If I& = 0 And HERE$ <> "" Then
     GetSub = subHash.find(HERE$ & "." & nm$, I&)
ElseIf I& <> 0 Then
    Exit Function
End If
If I& = 0 Then
    GetSub = subHash.find(nm$, I&)
Else
    Exit Function
End If
If I& = 0 Then
   
Else
    Exit Function
End If

End Function

Function GetlocalSub(nm$, I&) As Boolean
If subHash.find(HERE$ & "." & nm$, I&) Then GetlocalSub = True

End Function
Function GetGlobalSubAfterHere(nm$, I&) As Boolean
Dim j&
subHash.find HERE$, j&
subHash.find nm$, I&
GetGlobalSubAfterHere = I& > j&

End Function

Function GetlocalSubExtra(nm$, I&) As Boolean
Dim n$
Dim subname$
subname$ = subHash.Show
n$ = "." & nm$ & " "
I& = InStr(subname$, n$)
If I& > 0 Then

GetlocalSubExtra = True
I& = Val(Mid$(subname$, I& + Len(n$)))
Else
GetlocalSubExtra = False
End If
End Function
Function PosLabel(ByVal w$, ByVal b$) As Long
Dim I As Long, j As Long, jmp As Boolean
On Error Resume Next
If Val(Left$(w$, 1)) = 0 Then w$ = w$ & ":": jmp = True

PosLabel = Len(b$) + 1

If Left$(b$, Len(w$)) = w$ Then
    I = 1
Else
I = InStr(b$, Chr(10) + w$)
If I = 0 Then

    Do
    I = InStr(I + 1, b$, " " & w$)
    If I = 0 Then Exit Do
    j = Len(RTrim(Left$(b$, I)))
    If j = 0 Then Exit Do
    If Mid$(b$, j, 1) = Chr(10) Then Exit Do
    Loop
    If I = 0 Then
    Do
    I = InStr(I + 1, b$, "0" & w$)
    If I = 0 Then Exit Do

    j = Len(RTrim(Left$(b$, I)))
    If j = 0 Then Exit Do
    
    While j > 1 And Mid$(b$, j, 1) = "0"
            j = j - 1
    Wend
    
    If Mid$(b$, j, 1) = Chr(10) Then Exit Do
    Loop
    End If
End If

End If
If jmp Then
If I > 0 Then PosLabel = I + 1
Else
If I > 1 Then PosLabel = I + 1 '' Else PosLabel = 1
End If
End Function

Function logical(basestack As basetask, s$, d As Double) As Boolean
Dim b$, S2$, s3$ ' , OSTAC$
Dim ah As String

ah = aheadstatus(s$, False)    '
If InStr(ah, "l") = 0 Then
If InStr(ah, "N") > 0 Then

''If MaybeIsSymbol(s$, "#0123456789") Then
'logical = IsNumberCheck(s$, d)
''Else
logical = IsNumber(basestack, s$, d)
''End If
Else
logical = False
End If
Exit Function
End If

On Error Resume Next

If Err.Number > 0 Then Exit Function
S2$ = s$

If Left$(ah, 1) <> "N" Then
 IsStrExp basestack, s$, b$
logical = False
If FastSymbol(s$, "=") Then
    logical = False
    If IsStrExp(basestack, s$, S2$) Then
    logical = True
    If b$ = S2$ Then d = -1 Else d = 0
    Exit Function
    Else
    If LastErNum = -2 Then logical = True
    Exit Function
    End If
ElseIf FastSymbol(s$, "<>") Then
    logical = False
    If IsStrExp(basestack, s$, S2$) Then
    logical = True
    If b$ <> S2$ Then d = -1 Else d = 0
    Exit Function
        Else
    If LastErNum = -2 Then logical = True
    Exit Function
    End If
ElseIf FastSymbol(s$, "<=") Then
    logical = False
    If IsStrExp(basestack, s$, S2$) Then
    logical = True
    If b$ <= S2$ Then d = -1 Else d = 0
    Exit Function
            Else
    If LastErNum = -2 Then logical = True
    Exit Function
    End If
ElseIf FastSymbol(s$, "<") Then
    logical = False
    If IsStrExp(basestack, s$, S2$) Then
    logical = True
    If b$ < S2$ Then d = -1 Else d = 0
    Exit Function
            Else
    If LastErNum = -2 Then logical = True
    Exit Function
    End If
ElseIf FastSymbol(s$, ">=") Then
    logical = False
    If IsStrExp(basestack, s$, S2$) Then
    logical = True
    If b$ >= S2$ Then d = -1 Else d = 0
    Exit Function
            Else
    If LastErNum = -2 Then logical = True
    Exit Function
    End If
ElseIf FastSymbol(s$, ">") Then
    logical = False
    If IsStrExp(basestack, s$, S2$) Then
    logical = True
    If b$ > S2$ Then d = -1 Else d = 0
    Exit Function
            Else
    If LastErNum = -2 Then logical = True
    Exit Function
    End If
ElseIf FastSymbol(s$, "~") Then
    logical = False
    If IsStrExp(basestack, s$, S2$) Then
    logical = True
    If b$ Like S2$ Then d = -1 Else d = 0
    Exit Function
            Else
    If LastErNum = -2 Then logical = True
    Exit Function
    End If
End If

If LastErNum <> -2 Then s$ = S2$

Else

s$ = S2$
If IsNumber(basestack, s$, d) Then
logical = True
Else

End If
End If
End Function
Function BlockParam(s$) As String
' need to be open
Dim I As Long, j As Long
j = 1
For I = 1 To Len(s$)
Select Case Asc(Mid$(s$, I, 1))
Case 0
Exit For
Case 34
I = InStr(I + 1, s$, Chr(34))
If I = 0 Then Exit Function
Case 40
j = j + 1
Case 41
j = j - 1
If j = 0 Then Exit For
Case 123
I = InStr(I + 1, s$, Chr$(125))
If I = 0 Then Exit Function
End Select
Next I
If j = 0 Then
BlockParam = Left$(s$, I - 1)
End If
End Function
Function block(s$) As String
Dim I As Long, j As Long, c As Long
Dim a1 As Boolean
Dim jump As Boolean
If Trim(s$) = "" Then Exit Function
c = Len(s$)
a1 = True
I = 1
Do
Select Case Asc(Mid$(s$, I, 1))
Case 32
' nothing
Case 34
Do While I < c
I = I + 1
If Asc(Mid$(s$, I, 1)) = 34 Then Exit Do
Loop
Case 39, 92
Do While I < c
I = I + 1
If Mid$(s$, I, 2) = vbCrLf Then Exit Do
Loop
Case 61
jump = True
Case 123


If jump Then
jump = False
' we have a multiline text
Dim target As Long
target = j
    Do
    Select Case Asc(Mid$(s$, I, 1))
    Case 34
    Do While I < c
    I = I + 1
    If Asc(Mid$(s$, I, 1)) = 34 Then Exit Do
    Loop
    Case 123
    j = j - 1
    Case 125
    j = j + 1: If j = target Then Exit Do
    End Select
    I = I + 1
    Loop Until I > c
    If j <> target Then Exit Do
    Else
j = j - 1
End If


Case 125
j = j + 1: If j = 1 Then Exit Do
Case Else
jump = False

End Select
I = I + 1
Loop Until I > c
If j = 1 Then
block = Left$(s$, I - 1)
s$ = Mid$(s$, I)
'DoEvents
Else
block = "" '' "Error " & chr(34) & "missing }" & chr(34)
End If



End Function
Function block2(s$) As String
Dim I As Long, j As Long, c As Long
Dim a1 As Boolean
Dim jump As Boolean
Dim alter As Boolean
If Trim(s$) = "" Then Exit Function

c = Len(s$)
a1 = True
I = 1
Do
Select Case Asc(Mid$(s$, I, 1))
Case 32
' nothing
Case 34
Do While I < c
I = I + 1
If Asc(Mid$(s$, I, 1)) = 34 Then Exit Do
Loop
Case 39, 92
Do While I < c
I = I + 1
If Mid$(s$, I, 2) = vbCrLf Then Exit Do
Loop
Case 61
jump = True
Case 123


If jump Then
jump = False
' we have a multiline text
Dim target As Long
target = j
    Do
    Select Case Asc(Mid$(s$, I, 1))
    Case 34
    Do While I < c
    I = I + 1
    If Asc(Mid$(s$, I, 1)) = 34 Then Exit Do
    Loop
    Case 123
    j = j - 1
    Case 125
    j = j + 1: If j = target Then Exit Do
    End Select
    I = I + 1
    Loop Until I > c
    If j <> target Then Exit Do
    Else
j = j - 1
End If


Case 125
j = j + 1: If j = 1 Then Exit Do
Case Else
jump = False

End Select
I = I + 1
Loop Until I > c
If j = 1 Then
block2 = Left$(s$, I - 1)
s$ = Mid$(s$, I)
'DoEvents
Else
block2 = "" '' "Error " & chr(34) & "missing }" & chr(34)
End If



End Function
Function blockString(s$) As String
Dim I As Long, j As Long, c As Long
Dim a1 As Boolean
c = Len(s$)
a1 = True
I = 1
Do
Select Case Asc(Mid$(s$, I, 1))
Case 34
Do While I < c
I = I + 1
If Asc(Mid$(s$, I, 1)) = 34 Then Exit Do
Loop
Case 123
j = j - 1
Case 125
j = j + 1: If j = 1 Then Exit Do
End Select
I = I + 1
Loop Until I > c
If j = 1 Then
blockString = Left$(s$, I - 1)
s$ = Mid$(s$, I)
Else
blockString = "Error " & Chr(34) & "missing }" & Chr(34)
End If
If Right$(blockString, 1) = " " Then
I = Len(blockString) - Len(RTrim(blockString))
If I > 0 Then blockString = ReplaceStr(Chr$(10) + Space(I), Chr$(10), blockString)
End If

End Function
Sub SetNextLine(c$)
Dim I
I = InStr(c$, vbCrLf)
If I = 0 Then c$ = "" Else c$ = Mid$(c$, I + 2)
End Sub
Function GetNextLine(c$) As String
Dim I, j$
I = InStr(c$, vbCrLf)
If I = 0 Then GetNextLine = Trim$(c$): c$ = "" Else GetNextLine$ = Trim$(Left$(c$, I - 1)): c$ = Mid$(c$, I)
End Function

Sub NoLines(c$)
Dim I
c$ = Trim(c$)
Do While Left$(c$, 2) = vbCrLf
c$ = Trim$(Mid$(c$, 3))
Loop
End Sub

Sub RTarget(ddd As Object, tar As target)
' RENDER TARGET
Dim xl&, yl&, b As Long, f As Long, Tag$, Id&
Dim x&, y&, ox&, oy&
Dim prive As basket, d As Object
Set d = ddd.Owner
prive = players(GetCode(d))
With tar
Id& = .Id
Tag$ = .Tag
x& = .Lx
y& = .ly
xl& = .tx + 1
yl& = .ty
b = .back
f = .fore
prive.mypen = .Pen

Dim dd As Object
If .layer = 0 Then
Set dd = Form1.DIS
ElseIf .layer = -1 Then
Set dd = Form1
ElseIf .layer > 0 Then
Set dd = Form1.dSprite(.layer)
End If

prive.Xt = .Xt
prive.Yt = .Yt
prive.uMineLineSpace = .sUAddTwipsTop
prive.mx = 100
prive.My = 100
prive.SZ = .SZ
End With
dd.FontSize = prive.SZ
LCTbasket dd, prive, y&, x&
If f <> -1 Then BoxBigNew dd, prive, xl& - 1, yl&, f
If b <> -1 Then BoxColorNew dd, prive, xl& - 1, yl&, b
If Id& < 100 Then

    Tag$ = Left$(Tag$, xl& - x&)
    If Tag$ <> "" Then
    '1
    Select Case Id& Mod 10
    Case 4, 5, 6
    y& = (yl& + y&) \ 2
    Case 7, 8, 9
    y& = yl&
    Case Else
    End Select
    
    Select Case Id& Mod 10
    Case 2, 5, 8
   
    x& = (xl& + x& - Len(Tag$)) \ 2
    Case 3, 6, 9
    x& = xl& - Len(Tag$)
    
    Case Else
    End Select
    If (Id& Mod 10) > 0 Then
    LCTbasket dd, prive, y&, x&
    dd.FontTransparent = True
    dd.ForeColor = mycolor(prive.mypen)
    ' Åäþ ðñÝðåé íá äþ óå ðïéï basetask èá ôõðþíåé ï óôü÷ïò...
       PlainBaSket dd, prive, Tag$, True, True
    End If
    End If
Else
        If Tag$ <> "" Then
    Id& = Id& Mod 100
    Select Case Id& Mod 10
    Case 4, 5, 6
    y& = (yl& + y&) \ 2
    Case 7, 8, 9
    y& = yl&
    Case Else
    End Select
    f = 3
    Select Case Id& Mod 10
    Case 2, 5, 8
    f = 2
    Case 3, 6, 9
    f = 1
    Case Else
    End Select
    
    If (Id& Mod 10) > 0 Then
    LCTbasket dd, prive, y&, x&
    dd.FontTransparent = True
    dd.CurrentX = dd.CurrentX - dv15 * 2
    wwPlain ddd, prive, Tag$, xl& - x&, 10000, , True, f, , , True
  
    End If
End If
    

End If
PlaceBasket dd, players(GetCode(dd))
End Sub
Private Function textDel(ByVal ThisFile As String) As Boolean
Dim chk As String
ThisFile = strTemp + ThisFile
chk = CFname(ThisFile)
textDel = (chk <> "")
If chk <> "" Then Kill chk
End Function
Private Function textPUT(bstack As basetask, ByVal ThisFile As String, THISBODY As String, c$, mode2save As Long) As Boolean
Dim chk As String, b$, j As Long, PREPARE$, VR$, s$, v As Double, buf$, I As Long
ThisFile = strTemp + ThisFile
chk = GetDosPath(ThisFile)
If chk <> "" And c$ = "new" Then Kill GetDosPath(chk)
On Error GoTo HM
textPUT = True
Do
j = InStr(THISBODY, "##")
If j = 0 Then PREPARE$ = PREPARE$ & THISBODY: Exit Do
If j > 1 Then PREPARE$ = PREPARE$ & Mid$(THISBODY, 1, InStr(THISBODY, "##") - 1)
THISBODY = Mid$(THISBODY, j + 2)
j = InStr(THISBODY, "##")
If j = 0 Then PREPARE$ = PREPARE$ & THISBODY: Exit Do
If j > 1 Then VR$ = Mid$(THISBODY, 1, InStr(THISBODY, "##") - 1)
THISBODY = Mid$(THISBODY, j + 2)
'
If IsExp(bstack, VR$, v) Then
buf$ = Trim$(Str$(v))
ElseIf IsStrExp(bstack, VR$, s$) Then
buf$ = s$
Else
buf$ = VR$
End If
PREPARE$ = PREPARE$ & buf$
Loop
           If Not WeCanWrite(ThisFile) Then GoTo HM

textPUT = SaveUnicode(ThisFile, PREPARE$, mode2save, Not (c$ = "new"))
Exit Function
HM:
textPUT = False
End Function
Public Sub DropLeft(ByVal uStr As String, fromStr As String)
Dim I As Long
I = InStr(fromStr, uStr)
If I > 0 Then
fromStr = Mid$(fromStr, I + Len(uStr))
Else
fromStr = ""
End If
End Sub
Public Function GetStrUntil(ByVal sStr As String, fromStr As String, Optional RemoveSstr As Boolean = True) As String
Dim I As Long

If fromStr = "" Then GetStrUntil = "": Exit Function
I = InStr(fromStr, sStr)
If I < 2 Then
GetStrUntil = ""
fromStr = ""
Else
GetStrUntil = Left$(fromStr, I - 1)
If RemoveSstr Then
fromStr = Mid$(fromStr, Len(sStr) + I)
Else
fromStr = Mid$(fromStr, I)
End If
End If
End Function

Function RESOURCES() As String
'ON ERROR GoTo r1
 '   r1 = GetFreeResources(GFSR_GDIRESOURCES)
  '  r2 = GetFreeResources(GFSR_SYSTEMRESOURCES)
   ' r3 = GetFreeResources(GFSR_USERRESOURCES)
    'If r1 < 12 Or r2 < 12 Or r3 < 12 Then
'    If r1 < 12 Then
'    RESOURCES = "!!GDI!!"
'    ElseIf r2 < 12 Then
'    RESOURCES = "!!SYSTEM!!"
'    Else
'    RESOURCES = "!!USER!!"
'    End If
'    Else
'    RESOURCES = Left$(Format$((r1 + r2 + r3) / 3#, "#0.0"), 2)
'    End If
'    Exit Function
'r1:
    RESOURCES = ""
End Function
Public Function myRegister(tP$) As String
    strTemp = String(MAX_FILENAME_LEN, Chr$(0))
    GetTempPath MAX_FILENAME_LEN, StrPtr(strTemp)
    strTemp = mylcasefILE(Left$(strTemp, InStr(strTemp, Chr(0)) - 1))
Dim I As Long
I = FreeFile
Open strTemp & "tmp." & tP$ For Output As I
Print #I, "test"
Close I
' found me
Dim rl$
rl$ = PCall(strTemp & "tmp." & tP$)
If rl$ <> "" Then
rl$ = GetStrUntil(Chr(34), rl$)
End If
Sleep 10
Kill strTemp & "tmp." & tP$
myRegister = Trim$(rl$)
End Function
Public Function PCall(ByVal sFile As String) As String
Dim S2 As String, I As Long, bsfile As String, rfile As String, MYNULL$
bsfile = mylcasefILE(sFile)
   S2 = String(MAX_FILENAME_LEN, 32)
   'Retrieve the name and handle of the executable, associated with this file
   I = FindExecutable(StrPtr(sFile), StrPtr(MYNULL$), StrPtr(S2))
   If I > 32 Then
   rfile = mylcasefILE(Left$(S2, InStr(S2, Chr$(0)) - 1))
   If ExtractName(bsfile) = ExtractName(rfile) Then
   ' it is an executable
   PCall = mylcasefILE(bsfile)
   Else
      PCall = rfile & " " & Chr(34) + bsfile + Chr(34)
      End If
      Else
      PCall = ""
End If
End Function
Function PathFromApp(ByVal nap$) As String
Dim ap$
nap$ = nap$ & " "
ap$ = GetStrUntil(" ", nap$)
If ExtractType(ap$) = "" Then ap$ = ap$ & ".exe"
Dim CC As New cRegistry
CC.ClassKey = HKEY_CURRENT_USER
CC.SectionKey = "SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\" & ap$
CC.ValueKey = ""
CC.ValueType = REG_SZ
On Error GoTo 1111
If IsEmpty(CC.Value) Then
CC.ClassKey = HKEY_LOCAL_MACHINE
If IsEmpty(CC.Value) Then

PathFromApp = ""
Else
PathFromApp = Trim$(mylcasefILE(CC.Value & " " & nap$))

End If
Else
PathFromApp = Trim$(mylcasefILE(CC.Value & " " & nap$))
End If
Exit Function
1111:
PathFromApp = ""
End Function
Public Function MyShell(ww$, Optional way As VbAppWinStyle = vbNormalFocus) As Long
Dim frm$, exst As Boolean, pexist As Boolean, PP$, EXE$, PARAM$
' logic
'
On Error GoTo 11111
If ExtractType(ww$) <> "" Then

frm$ = ExtractPath(ww$) + ExtractName(ww$)
PARAM$ = Mid$(ww$, Len(frm$) + 1)
ww$ = frm$
ElseIf ExtractPath(ww$) = "" Then
Dim I As Long, j As Long
I = InStr(ww$, Chr(34))
j = InStrRev(ww$, Chr(34))
If j > I Then
PARAM$ = Mid$(ww$, I, j - I + 1)
ww$ = Left$(ww$, I - 1)
End If

End If
If ww$ = "" Then
If PARAM$ <> "" Then
MyShell = Shell(Trim$(PARAM$), way)
Exit Function
End If
End If
If ExtractPath(ww$) = mylcasefILE(ww$) Then
' it is a path
ww$ = "a.@@@ " & ww$
Else
frm$ = CFname(ww$)
If ExtractName(frm$) <> ExtractName(ww$) Then
On Error Resume Next

MyShell = Shell(Trim$(ww$ & " " & PARAM$), way)
If Err.Number > 0 Then
Err.clear
ww$ = PathFromApp(ww$)
If ww$ <> "" Then
ww$ = ReplaceStr(Chr(34), "", ww$) & " " & PARAM$
MyShell = Shell(Trim$(ww$), way)
End If
End If
Exit Function
End If
If CFname(ww$) <> "" Then ww$ = frm$: exst = True

PP$ = ExtractPath(ww$)
End If
If PP$ <> "" Then
pexist = True
ww$ = Mid$(ww$, Len(PP$) + 1)
End If
ww$ = ww$ & " "
EXE$ = ""
If InStr(ww$, ".") > InStr(ww$, " ") Then
EXE$ = Left$(ww$, InStr(ww$, "."))
ww$ = Mid$(ww$, Len(EXE$) + 1)
End If
ww$ = ww$ & " "
EXE$ = EXE$ & Trim$(GetStrUntil(" ", ww$))
' until now we have all things splitted
EXE$ = mylcasefILE(EXE$)
' until now we have all things splitted
Select Case ExtractType(EXE$)
Case ""
If pexist Then
' this is not normal
' ***************ERROR*************
Else
' so we put exe by default
EXE$ = EXE$ & ".exe"
frm$ = PathFromApp(Trim$(EXE$ & " " & ww$))
If frm$ <> "" Then
MyShell = Shell(frm$, way)
Exit Function
Else
MyShell = Shell(Trim$(EXE$ & " " & ww$ & " " & PARAM$), way)
Exit Function
End If
End If
Case "exe", "bat", "com" ' can be run immediatly
If pexist Then
MyShell = Shell(Trim$(PP$ & EXE$ & " " & ww$), way)
Exit Function
Else
frm$ = PathFromApp(Trim$(EXE$ & " " & ww$))
If frm$ <> "" Then
MyShell = Shell(frm$, vbNormalFocus)
Exit Function
Else
MyShell = Shell(Trim$(EXE$ & " " & ww$), way)
Exit Function
End If
End If
Case "@@@"
MyShell = Shell(RTrim$("explorer " & ww$), way)
Case Else ' its a document
PP$ = ReplaceStr("file:", "", PP$)
frm$ = PCall(PP$ & EXE$)
If frm$ <> "" Then
If Asc(frm$) = 34 Then
frm$ = frm$ & "@"
frm$ = ReplaceStr(Chr(34) & "@", PARAM$ & Chr(34), frm$)
frm$ = ReplaceStr("@", "", frm$)
Else
End If
MyShell = Shell(Trim$(frm$ & " " & ww$ & " " & PARAM$), way)
Exit Function
Else
End If
End Select
11111:
MyShell = 0
' its a document
End Function

Private Function ReplaceStr2(sStr As String, dStr As String, fromStr As String) As String
  ReplaceStr2 = Replace$(fromStr, sStr, dStr, vbTextCompare)
End Function
Function StarSTR(ByVal sStr As String) As String
Dim l As Long, s As Long
l = Len(sStr)
sStr = RTrim(sStr)
s = l - Len(sStr)
StarSTR = String$(l - s, "*") + String$(s, " ")

End Function
Function ReplaceStr(sStr As String, dStr As String, fromStr As String) As String
  ReplaceStr = Replace$(fromStr, sStr, dStr)  ' changed
End Function

Sub MyList(bstack As basetask, Optional tofile As Long = -1)
Dim scr As Object, prive As Long
Set scr = bstack.Owner
prive = GetCode(scr)
Dim p As Double, I As Long, s$, pn&, x As Double, y As Double, it As Long, f As Long, pa$
Dim x1 As Long, y1 As Long, frm$, par As Boolean, ohere$, ss$, w$, sx As Double, sy As Double
Dim pppp As mArray, hlp$, h&, all$
Dim w1 As Long, w2 As Long, DUM As Boolean
pn& = 0
' DELETE ARRNAME$
Dim arrname$

With players(prive)
Do While pn& < varhash.Count '  = Len(VarName$)
varhash.ReadVar pn&, s$, h&

If h& = -1 Then
'Debug.Print "problem in ", pn&
Else
If InStr(s$, ChrW(&H1FFF)) > 0 Then
' DO NOTHING
ElseIf Right$(s$, 1) = "(" Then
    If IsObject(var(h&)) Then
        Set pppp = var(h&)
        pppp.SerialItem (0), f, 5
        w1 = 0
        pppp.SerialItem w2, w1, 6
        w1 = w1 + 1

        If f > 1 Then
            If tofile < 0 Then
                If tofile = -1 Then
                            If .mx - .curpos < Len(s$ & Trim$(Str$(w2)) & ",") Then crNew bstack, players(prive)
                            PlainBaSket scr, players(prive), s$ & Trim$(Str$(w2)) & ","
                Else
                            all = all + " " + s$ + Trim$(Str$(w2)) + ","
                End If
            Else
                If Uni(tofile) Then
                    putUniString tofile, s$ & Trim$(Str$(w2)) & ","
                Else
                    putANSIString tofile, s$ & Trim$(Str$(w2)) & ","
                End If
            End If
        Else
        If pn& < varhash.Count - 1 Then
        If tofile < 0 Then
            If tofile = -1 Then
            If .mx - .curpos < Len(s$ & Trim$(Str$(w2)) & "), ") Then crNew bstack, players(prive)
            PlainBaSket scr, players(prive), s$ & Trim$(Str$(w2)) & "), "
            Else
            'prop
                all = all + " " + s$ + Trim$(Str$(w2)) + "),"
            End If
            Else
                   If Uni(tofile) Then
        putUniString tofile, s$ & Trim$(Str$(w2)) & "), "
                Else
                putANSIString tofile, s$ & Trim$(Str$(w2)) & "), "
            
            End If
            End If
       Else
        If tofile < 0 Then
                If tofile = -1 Then
          If .mx - .curpos < Len(s$ & Trim$(Str$(w2)) & ")") Then crNew bstack, players(prive)
         PlainBaSket scr, players(prive), s$ & Trim$(Str$(w2)) & ")"
         Else
           all = all + " " + s$ + Trim$(Str$(w2)) + ")"
         End If
         Else
                   If Uni(tofile) Then
        putUniString tofile, s$ & Trim$(Str$(w2)) & ")"
                Else
putANSIString tofile, s$ & Trim$(Str$(w2)) & ")"

         End If
         End If
     End If
    End If
x = f - 1

While x > 0
x = x - 1
pppp.SerialItem w2, w1, 6
w1 = w1 + 1
If x > 0 Then
If tofile < 0 Then
    If tofile = -1 Then
    
    If .mx - .curpos < Len(Trim$(Str$(w2)) & ",") Then crNew bstack, players(prive)
    PlainBaSket scr, players(prive), Trim$(Str$(w2)) & ","
    Else
    ' prop
        all = all + " " + s$ + Trim$(Str$(w2)) + ","
    End If
       Else
        If Uni(tofile) Then
        putUniString tofile, Trim$(Str$(w2)) & ","
                Else
         putANSIString tofile, Trim$(Str$(w2)) & ","
        ' Print #tofile, Trim$(str$(w2)) & ",";
         End If
         End If
    
Else
        If InStr(pn&, arrname$, Chr(13)) <> 0 Then
         If tofile < 0 Then
            If tofile = -1 Then
            If .mx - .curpos < Len(Trim$(Str$(w2)) & "), ") Then crNew bstack, players(prive)
            PlainBaSket scr, players(prive), Trim$(Str$(w2)) & "), "
            Else
            'prop
                all = all + " " + s$ + Trim$(Str$(w2)) + "),"
            End If
            Else
     If Uni(tofile) Then
        putUniString tofile, Trim$(Str$(w2)) & "), "
                Else
                putANSIString tofile, Trim$(Str$(w2)) & "), "
            'Print #tofile, Trim$(str$(w2)) & "), ";
            End If
            End If
        Else
        If tofile < 0 Then
    If tofile = -1 Then
            If .mx - .curpos < Len(Trim$(Str$(w2)) & ")") Then crNew bstack, players(prive)
            PlainBaSket scr, players(prive), Trim$(Str$(w2)) & ")"
            Else
            ' prop
                                all = all + " " + s$ + Trim$(Str$(w2)) + ")"
            End If
            Else
                               If Uni(tofile) Then
        putUniString tofile, Trim$(Str$(w2)) & ")"
                Else
                putANSIString tofile, Trim$(Str$(w2)) & ")"
            'Print #tofile, scr, Trim$(str$(w2)) & ")";
            End If
            End If
        End If
    End If
Wend

    End If
    GoTo LOOPNEXT
 ElseIf Right$(s$, 1) = "$" Or Right$(s$, 3) = "$()" Then  ' WHY "$()"
    ' h& = Val(Mid$(VarName$, pn&))
        If Typename(var(h&)) = doc Then
            If var(h&).IsEmpty Then
                hlp$ = " [Empty Document]"
            Else
                hlp$ = " [Document " + CStr(var(h&).SizeCRLF) & " chars]"
            End If
        ElseIf Typename(var(h&)) = "PropReference" Then
        hlp$ = " [Object Property]"
        Else
            If Len(var(h&)) > 3 * .mx Then
                hlp$ = " = " & Chr(34) + Left$(CStr(var(h&)), 4) & "..." & Chr(34)
            Else
                hlp$ = " = " & Chr(34) + CStr(var(h&)) + Chr(34)
            End If
        End If
    s$ = s$ & hlp$
Else

If IsObject(var(h&)) Then
s$ = s$ & "[" & Typename(var(h&)) & "]"
Else
On Error Resume Next
s$ = s$ & " =" & Str(var(h&))
If Err Then
s$ = s$ & " = " & Chr(34) & var(h&) & Chr(34)
Err.clear
End If
End If
End If
If pn& < varhash.Count - 1 Then s$ = s$ & ", "
If tofile < 0 Then
   If tofile = -1 Then
   If .mx - .curpos < Len(s$) Then crNew bstack, players(prive)
    PlainBaSket scr, players(prive), s$
    End If
    ' proportional
    all = all + " " + s$
   Else
   If Uni(tofile) Then
putUniString tofile, s$
   Else
    putANSIString tofile, s$

    End If
    End If
 End If
LOOPNEXT:
pn& = pn& + 1
Loop



If arrname$ <> "" Then

pn& = 1
Do While pn& <= Len(arrname$)
Select Case Asc(Mid$(arrname$, pn&, 1))
Case 13
s$ = ""
Case 32
If InStr(s$, ChrW(&H1FFF)) > 0 Then
Else
If Mid$(arrname$, pn& + 1, 16) = "" Then Exit Do
'Set pppp = neoArray(Mid$(arrname$, pn& + 1, 16))
'pn& = pn& + 16
'pppp.SerialItem (0), f, 5
'w1 = 0
'pppp.SerialItem w2, w1, 6
'w1 = w1 + 1

End If
Case "0" To "9"
Case Else
s$ = s$ & Mid$(arrname$, pn&, 1)
End Select
pn& = pn& + 1
Loop
End If
    If tofile < -1 Then
    If scr.CurrentX <> 0 Then crNew bstack, players(prive)
    wwPlain bstack, players(prive), all$, scr.Width, 1000, True, , 3
    End If
      If tofile < 0 Then crNew bstack, players(prive)
      End With
End Sub
Function NeoGetArrayItem(PP As mArray, bstack As basetask, v$, offset As Long, rst$, Optional noObject As Boolean = False) As Boolean
If noObject And PP.IHaveClass Then Exit Function
Dim dn As Long, dd As Long, W3 As Long
Dim p As Double
If PP.SerialItem((0), dd, 5) Then
dd = dd - 1
offset = 0
Do While dn <= dd

PP.SerialItem W3, dn, 6
 If IsExp(bstack, rst$, p) Then
 If dn < dd Then
        If Not FastSymbol(rst$, ",") Then MyEr "need index for " & v$ & ")", "÷ñåéÜæïìáé äåßêôç ãéá ôï ðßíáêá " & v$ & ")": Exit Function
        Else
        If FastSymbol(rst$, ",") Then MyEr "too many indexes for array " & v$ & ")", "ðïëëïß äåßêôåò ãéá ôï ðßíáêá " & v$ & ")": Exit Function
        If Not FastSymbol(rst$, ")") Then MyEr "missing )", "ëåßðåé )": Exit Function
    End If
        On Error Resume Next
        If p < 0 Then
         MyEr "negative index in array " & v$ & ")", "áñíçôéêüò äåßêôçò óôï ðßíáêá " & v$ & ")": Exit Function
    
        End If
        If PP.PushOffset(offset, dn, CLng(p)) Then
        NeoGetArrayItem = True
        Else
          
          MyEr "index too high for array " & v$ & ")", "äåßêôçò õøçëüò ãéá ôï ðßíáêá " & v$ & ")": Exit Function
        
            
            End If
        Else
         If LastErNum = -2 Then
         Else
   MyEr "missing index for array " & v$ & ")", "÷Üèçêå äåßêôçò ãéá ôï ðßíáêá " & v$ & ")"
   End If
   Exit Function
    End If
    dn = dn + 1
Loop
End If
End Function
Sub getfirstpage()
If UBound(MyDM) = 1 Then
PrinterDim pw, ph, psw, psh, pwox, phoy
End If
'If pwox > phoy Then mydpi = phoy Else mydpi = pwox
''mydpi = pwox / 4
If pwox <= phoy Then
mydpi = pwox
Else
mydpi = phoy
End If
' DC FROM PRINTER
If oprinter.Create(Int(psw / pwox * mydpi + 0.5), Int(psh / phoy * mydpi + 0.5)) Then
oprinter.WhiteBits
oprinter.GetDpi mydpi, mydpi
Form1.PrinterDocument1.Cls
oprinter.needHDC
Set Form1.PrinterDocument1 = hDCToPicture(oprinter.HDC1, 0, 0, oprinter.Width, oprinter.Height)
oprinter.FreeHDC
Form1.PrinterDocument1.Scale (0, 0)-(Form1.ScaleX(Int(psw / pwox * (mydpi / 4) + 0.5), 3, 1), Form1.ScaleY(Int(psh / phoy * mydpi / 4 + 0.5), 3, 1))
pnum = 0
End If
End Sub
Sub getnextpage()

If oprinter.Height = 0 Then
getfirstpage

Else
pnum = pnum + 1
With players(-2)
.curpos = 0
.currow = 0
.lastprint = False
.XGRAPH = 0
.YGRAPH = 0
End With
With Form1.PrinterDocument1
.CurrentX = 0
.CurrentY = 0
End With
oprinter.CopyPicture Form1.PrinterDocument1
oprinter.ThumbnailPaintPrinter 1, , False, True, True, , , , , , Form3.Caption & " " & Str$(pnum)
Form1.PrinterDocument1.Cls
End If
End Sub
Sub getenddoc()
pnum = pnum + 1
oprinter.CopyPicture Form1.PrinterDocument1
oprinter.ThumbnailPaintPrinter 1, 100, False, True, True, , , , , , Form3.Caption & " " & Str$(pnum)
oprinter.ClearUp
Form1.PrinterDocument1.Picture = LoadPicture("")
End Sub
Sub Landscape(bstack As basetask)
Dim DUMMY As Object
If UBound(MyDM) = 1 Then
PrinterDim pw, ph, psw, psh, pwox, phoy
End If

'If pwox > phoy Then mydpi = phoy Else mydpi = pwox
mydpi = pwox

If Int(psw / pwox * mydpi + 0.5) / Int(psh / phoy * mydpi + 0.5) < 1 Then ChangeOrientation DUMMY, Printer.DeviceName, MyDM(): PrinterDim pw, ph, psw, psh, pwox, phoy
If Not bstack.toprinter Then Exit Sub
oprinter.ClearUp
If oprinter.Create(Int(psw / pwox * mydpi + 0.5), Int(psh / phoy * mydpi + 0.5)) Then
oprinter.WhiteBits
oprinter.GetDpi mydpi, mydpi
oprinter.needHDC
Set Form1.PrinterDocument1 = hDCToPicture(oprinter.HDC1, 0, 0, oprinter.Width, oprinter.Height)
oprinter.FreeHDC
Form1.PrinterDocument1.Scale (0, 0)-(Form1.ScaleX(Int(psw / pwox * (mydpi / 4) + 0.5), 3, 1), Form1.ScaleY(Int(psh / phoy * mydpi / 4 + 0.5), 3, 1))

End If


End Sub
Sub Portrait(bstack As basetask)
Dim DUMMY As Object
If UBound(MyDM) = 1 Then
PrinterDim pw, ph, psw, psh, pwox, phoy
End If

'If pwox > phoy Then mydpi = phoy Else mydpi = pwox
mydpi = pwox / 4
If Int(psw / pwox * mydpi + 0.5) / Int(psh / phoy * mydpi + 0.5) > 1 Then ChangeOrientation DUMMY, Printer.DeviceName, MyDM(): PrinterDim pw, ph, psw, psh, pwox, phoy
If Not bstack.toprinter Then Exit Sub
oprinter.ClearUp
If oprinter.Create(Int(psw / pwox * mydpi + 0.5), Int(psh / phoy * mydpi + 0.5)) Then

oprinter.WhiteBits
oprinter.GetDpi mydpi, mydpi
oprinter.needHDC
Set Form1.PrinterDocument1 = hDCToPicture(oprinter.HDC1, 0, 0, oprinter.Width, oprinter.Height)
oprinter.FreeHDC
Form1.PrinterDocument1.Scale (0, 0)-(Form1.ScaleX(Int(psw / pwox * (mydpi / 4) + 0.5), 3, 1), Form1.ScaleY(Int(psh / phoy * mydpi / 4 + 0.5), 3, 1))

End If

End Sub
Function StripTerminator(ByVal strString As String) As String
    Dim intZeroPos As Long

    intZeroPos = InStr(strString, Chr$(0))
    If intZeroPos > 0 Then
        StripTerminator = Left$(strString, intZeroPos - 1)
    Else
        StripTerminator = strString
    End If
End Function
Sub AddDirSep(strPathName As String)
    If Right(Trim(strPathName), Len(gstrSEP_URLDIR)) <> gstrSEP_URLDIR And _
       Right(Trim(strPathName), Len(gstrSEP_DIR)) <> gstrSEP_DIR Then
        strPathName = RTrim$(strPathName) & gstrSEP_DIR
    End If
End Sub

Function GetWindowsDir() As String
    Dim strBuf As String

    strBuf = Space$(gintMAX_SIZE)

    '
    'Get the windows directory and then trim the buffer to the exact length
    'returned and add a dir sep (backslash) if the API didn't return one
    '
    If GetWindowsDirectory(strBuf, gintMAX_SIZE) > 0 Then
        strBuf = StripTerminator$(strBuf)
        AddDirSep strBuf

        GetWindowsDir = strBuf
    Else
        GetWindowsDir = ""
    End If
End Function
Function GetWindowsfontDir() As String
    Dim strBuf As String

    strBuf = Space$(gintMAX_SIZE)

    '
    'Get the windows directory and then trim the buffer to the exact length
    'returned and add a dir sep (backslash) if the API didn't return one
    '
    If GetWindowsDirectory(strBuf, gintMAX_SIZE) > 0 Then
        strBuf = StripTerminator$(strBuf)
        AddDirSep strBuf
        strBuf = strBuf & "FONT"
        AddDirSep strBuf
    
        GetWindowsfontDir = strBuf
    Else
        GetWindowsfontDir = ""
    End If
End Function

 
Sub nhelp(bstack As basetask, Optional GREEK As Boolean = False)
Dim di As Object
Set di = bstack.Owner
If GREEK Then
Dim bb$
bb$ = "   ÅËËÇÍÉÊÁ Þ ËÁÔÉÍÉÊÁ ãéá åðéëïãÞ êùäéêïóåëßäáò ãéá ôï ôýðï åìöÜíéóçò âïÞèåéáò " & vbCrLf
bb$ = bb$ & "   Ìå Esc ôåñìáôßæåé ç åêôÝëåóç ôìçìÜôùí  " & vbCrLf
bb$ = bb$ & "   ctrl + f1 áíïßãåé ôçí âïÞèåéá, ãñÜöïíôáò êáé åðéëÝãïíôáò âñßóêåé" & vbCrLf
bb$ = bb$ & "   ctrl + c Ôåñìáôßæåé ôçí åêôÝëåóç êáé êáèáñßæåé" & vbCrLf
bb$ = bb$ & "   ctrl + ïðïéïäÞðïôå ðëÞêôñï áíïßãåé ôç âçìáôéêÞ åêôÝëåóç" & vbCrLf
bb$ = bb$ & "   pause/break êÜíåé øõ÷ñÞ åêêßíçóç / äåò ÂÏÇÈÅÉÁ ÁÑ×Ç" & vbCrLf
bb$ = bb$ & "   Ó ïíïìáÔìçìáôïò áíïßãåé ôïí äéïñèùôÞ ãéá íá ãñÜøïõìå ðñüãñáììá" & vbCrLf
bb$ = bb$ & "   Ó ïíïìáÓõíÜñôçóçò( áíïßãåé ôïí äéïñèùôÞ ãéá íá ãñÜøïõìå óõíÜñôçóç" & vbCrLf
bb$ = bb$ & "   Ó ïíïìáÓõíÜñôçóçò$( áíïßãåé ôïí äéïñèùôÞ ãéá íá ãñÜøïõìå óõíÜñôçóç$" & vbCrLf
bb$ = bb$ & "   Ôìçìáôá  [ìáò äåß÷íåé ôá ôìÞìáôá óôç ìíÞìç êáé ôï äßóêï]" & vbCrLf
bb$ = bb$ & "   ÂÏÇÈÅÉÁ êáôé  {ìáò äßíåé âïÞèåéá óå îå÷ùñéóôü ðáñÜèõñï)" & vbCrLf
bb$ = bb$ & "   ? Þ ÔÕÐÙÓÅ ôõðþíåé" & vbCrLf
bb$ = bb$ & "   äþóå ôçí åíôïëÞ ÑÕÈÌÉÓÅÉÓ ç ctrl+U ãéá íá áëëÜîåé ôçí åî ïñéóìïý ãñáììáôïóåéñÜ êáé ôá ÷ñþìáôá" & vbCrLf

Else
bb$ = "   GREEK or LATIN for choose the codepage for errors display" & vbCrLf
bb$ = bb$ & "   with LATIN all error messages are in ENGLISH language  " & vbCrLf
bb$ = bb$ & "   Esc escape execution" & vbCrLf
bb$ = bb$ & "   ctrl + f1 open help form, you can write and click for find" & vbCrLf
bb$ = bb$ & "   ctrl + c terminate execution, clear all" & vbCrLf
bb$ = bb$ & "   ctrl + anykey open for test" & vbCrLf
bb$ = bb$ & "   pause/break for break cold reset / look HELP START" & vbCrLf
bb$ = bb$ & "   EDIT modulename     [open editor for writing program]" & vbCrLf
bb$ = bb$ & "   EDIT functionname( [open editor for writing function()]" & vbCrLf
bb$ = bb$ & "   EDIT functionname$( [open editor for writing function$()]" & vbCrLf
bb$ = bb$ & "   MODULES for a list of modules in memory and on dik" & vbCrLf
bb$ = bb$ & "   use HELP writesomething [to find some help, open the help form]" & vbCrLf
bb$ = bb$ & "   ? or PRINT for printing" & vbCrLf
bb$ = bb$ & "   type SETTINGS or ctrl+U to change the default font and colors" & vbCrLf

End If
wwPlain bstack, players(GetCode(bstack.Owner)), bb$, di.Width, 1000, True
crNew bstack, players(GetCode(bstack.Owner))
End Sub
Public Sub EnableMidi()
Dim curDevice As Long, rc As Long

 If hmidi = 0 Then
rc = GetFuncPtr("winmm.dll", "midiOutOpen")
If rc <> 0 Then
    rc = midiOutOpen(hmidi, curDevice, 0, 0, 0)
    If (rc <> 0) Then
        MsgBox "Couldn't open midi device - Error #" & rc
    End If
    End If
    End If
End Sub
Public Sub DisableMidi()
  midiOutClose (hmidi)
  hmidi = 0
End Sub
Public Sub Quit()
  ' An example of an Application Quit routine:
  
  ' The Dispose method must be called to
  ' clean up the queue
  DisableMidi
  TaskMaster.Dispose
  Set TaskMaster = Nothing
  
  ' Insure all but 1 form is unloaded.
  ' (When called from Form_Unload, that form
  '  cannot be removed, so 1 is allowed)
  Do While Forms.Count > 1
    Unload Forms(1)
  Loop
  ' Notification if there are problems with demo
  Debug.Assert Forms.Count = 1
End Sub


' TASK MASTER TIMING ROUTINE

Public Sub TaskMasterTick()
' This is the TimerFunction that will be
' called when SetTimer times out.

  If Not TaskMaster Is Nothing Then
     ''MasterTimer + CDbl(TaskMaster.Interval)
    '' CDbl(timeGetTime)
    If Abs(MasterTimer - CDbl(timeGetTime)) > 50 Then
  If Not extreme Then Sleep 1: MyDoEvents1 Form1
    MasterTimer = CDbl(timeGetTime)
    End If
   ' Form1.Caption = MasterTimer
    TaskMaster.TimerTick
  End If

End Sub
Public Sub instrument(insID As Long, Channel As Long)
EnableMidi
Dim midimsg As Long
    midimsg = (insID * 256) + &HC0 + Channel
    midiOutShortMsg hmidi, midimsg
End Sub
Public Function VALIDATEmStiva(bs As basetask, p$, s$) As Boolean
Dim st As mStiva, ss$, j As Long

Set st = bs.soros
Dim I As Long, r$
If p$ <> "" Then
    ''s$ = ""
    If st.Total < Len(p$) Then Exit Function
    Do While I < Len(p$)
    I = I + 1
    j = AscW(st.StackItemType(I))
    If j = 42 Then
    j = AscW(Typename(st.StackItem(I)))
    End If
    Select Case AscW(Mid$(p$, I, 1))
    Case 925, 957, 913, 945, 78, 110 '' number  - use spellunicode to make it
        If j <> 78 Then Exit Function
    Case 915, 947, 83, 115 '' string
         If j <> 83 Then Exit Function
    Case 928, 960, 65, 97  '' array
         If j <> 109 Then Exit Function
        ''j = 65
    Case 927, 959, 922, 954, 71, 103, 67, 99  '' G or  C
         If j <> 71 Then Exit Function
    Case Else
        Exit Function
    End Select
    ''r$ = r$ + ChrW(j)
    Loop
    s$ = " "
    VALIDATEmStiva = True
    Exit Function
Else
Do
    I = I + 1
    If st.Total < I Then Exit Do
    ss$ = st.StackItemType(I)
    If ss$ = "*" Then
    ss$ = Left$(Typename(st.StackItem(I)), 1)
    If ss$ = "m" Then ss$ = "A"
    End If
    r$ = r$ & ss$
    Loop
    s$ = r$
End If
VALIDATEmStiva = r$ <> ""
End Function

Public Function VALIDATE(st$, p$, s$) As Boolean
Dim DUMMY As Double
Dim I As Long, j As Long, ok As Boolean
If Len(st$) = 0 Then
VALIDATE = True
End If
' NORMALIZE
s$ = ""
ok = True
For I = 1 To Len(st$)
Select Case Mid$(st$, I, 1)
Case " ", ",", ChrW(160)

Case Is = Chr(34)
j = InStr(I + 1, st$, Chr(34), vbBinaryCompare)
If j = 0 Then Exit For
s$ = s$ & "S"
I = j + 1
            If p$ <> "" Then
                Select Case AscW(p$)
                Case 915, 947, 83, 115 '' string
                Case Else
                        ok = False: Exit For
                End Select
                    p$ = Mid$(p$, 2)
                    If p$ = "" Then Exit For
             End If
 Case Is = Chr$(2)
            If Len(Mid$(st$, I + 1, 8)) = 8 Then
             I = I + UNPACKLNG(Mid$(st$, I + 1, 8)) + 8
             s$ = s$ & "S"
             If p$ <> "" Then
                Select Case AscW(p$)
                Case 915, 947, 83, 115 '' string
                Case Else
                        ok = False: Exit For
                End Select
             p$ = Mid$(p$, 2)
             If p$ = "" Then Exit For
             End If
             Else
             Exit For
             End If
Case Else
        If IsNumberD3(st$, I, j) Then
                If I = 0 Then I = j + 1
                I = I + j - 2
                s$ = s$ & "N"
                    If p$ <> "" Then
                Select Case AscW(p$)
                 Case 925, 957, 913, 945, 78, 110 '' number
                Case Else
                        ok = False: Exit For
                End Select
                         p$ = Mid$(p$, 2)
                         If p$ = "" Then Exit For
                    End If
      Else
          Exit For
      End If
End Select
      

Next I
 ' TO P$ ÈÁ ÐÁÑÅÉ ÔÏ ÕÐÏËÏÉÐÏ

   p$ = Mid$(st$, I + 1)
   st$ = Left$(st$, I)
    VALIDATE = ok
End Function
Function constwidth(one As Long) As String
' I use constwidth to perform rebound..;;
constwidth = " ..............."
Mid$(constwidth, 2) = CStr(one)
End Function
Public Function VALIDATEpart(st$, p$) As Boolean
Dim DUMMY As Double
Dim I As Long, j As Long, ok As Boolean, s$
If Len(st$) = 0 Then
VALIDATEpart = False   ' reverse logic here...
End If
' NORMALIZE
s$ = ""
ok = True
For I = 1 To Len(st$)
If Mid$(st$, I, 1) = Chr$(2) Then
            If Len(Mid$(st$, I + 1, 8)) = 8 Then
             I = I + UNPACKLNG(Mid$(st$, I + 1, 8)) + 8
             Else
             Exit For
             End If
      ElseIf IsNumberD3(st$, I, j) Then
      I = j + I - 2
      Else
      I = I - 1
      Exit For
      End If
      

Next I
p$ = Left$(st$, I)
    st$ = " " & Mid$(st$, I + 1)
    VALIDATEpart = p$ <> ""
End Function

Private Function validateold(st$, p$, s$) As Boolean
Dim counter As Long, MARKSTART As Long, MARKEND As Long, test$, dumy As Double
Dim I As Long, j As Long, ok As Boolean
If Len(st$) = 0 Then
validateold = True
End If
MARKSTART = Len(st$) + 1
s$ = ""
ok = True
For I = 1 To Len(st$)
If I < MARKSTART Then
    MARKSTART = I: MARKEND = I
            If Mid$(st$, I, 1) = Chr$(2) Then
            If Len(Mid$(st$, I + 1, 8)) = 8 Then
             I = I + UNPACKLNG(Mid$(st$, I + 1, 8)) + 8
             s$ = s$ & "S"
             Else
             ok = False: Exit For
             End If
            MARKSTART = Len(st$) + 1
            End If
    ElseIf Mid$(st$, I, 1) = Chr$(2) Then
        If MARKEND > MARKSTART Then
            If Mid$(st$, MARKSTART, 1) = " " Then
                test$ = Mid$(st$, MARKSTART, MARKEND - MARKSTART + 1)
                If IsNumberD2(test$, dumy) Then
                If Len(test$) <> 0 Then ok = False: Exit For
                End If
                s$ = s$ & "N"
           '  MARKSTART = Len(ST$) + 1
            Else
                ok = False: Exit For
            End If
         End If
                If p$ <> "" Then
                   If Len(s$) = Len(p$) Then
                   If s$ <> p$ Then ok = False
                   Exit For
                   End If
                   End If
               If Len(Mid$(st$, I + 1, 8)) = 8 Then
             I = I + UNPACKLNG(Mid$(st$, I + 1, 8)) + 8
             s$ = s$ & "S"
             Else
             ok = False: Exit For
             End If
        MARKSTART = Len(st$) + 1
    ElseIf Mid$(st$, I, 1) = " " Then
      If MARKEND > MARKSTART Then
            If Mid$(st$, MARKSTART, 1) = " " Then
                test$ = Mid$(st$, MARKSTART, MARKEND - MARKSTART + 1)
                If IsNumberD2(test$, dumy) Then
                If Len(test$) <> 0 Then ok = False: Exit For
                End If
              s$ = s$ & "N"
            Else
                ok = False: Exit For
            End If
         End If
        MARKSTART = I: MARKEND = I
    Else
    MARKEND = MARKEND + 1
End If
If p$ <> "" Then
If Len(s$) = Len(p$) Then
If s$ <> p$ Then ok = False
Exit For
End If
End If
Next I
If Not (ok And s$ = p$ And s$ <> "") Then
 If ok And (MARKEND > MARKSTART) Then
If Mid$(st$, MARKSTART, 1) = " " Then
                test$ = Mid$(st$, MARKSTART, MARKEND - MARKSTART + 1)
                If IsNumberD2(test$, dumy) Then
                If Len(test$) <> 0 Then ok = False
                End If
              s$ = s$ & "N"
            Else
                ok = False
            End If
    End If
    If p$ <> "" Then
If Len(s$) = Len(p$) Then
If s$ <> p$ Then ok = False
End If
End If
    End If
    If ok And p$ <> "" Then
    p$ = Mid$(st$, I)
    st$ = Left$(st$, I - 1)
    End If
    validateold = ok
End Function

Public Function GetTempFileName() As String

   Dim sTmp    As String
   Dim sTmp2   As String
   Dim EXENAME As String
   EXENAME = App.EXENAME

   sTmp2 = GetTempPathgg
   sTmp = Space(Len(sTmp2) + 256)
   Call GetTempFileNameW(StrPtr(sTmp2), StrPtr(EXENAME), UNIQUE_NAME, StrPtr(sTmp))
   GetTempFileName = Left$(sTmp, InStr(sTmp, Chr$(0)) - 1)
    tempList2delete = Sput(GetTempFileName) + tempList2delete
End Function
Public Sub DelTemp()
Dim Tmp$
On Error Resume Next
While tempList2delete <> ""
If Not ISSTRINGA(tempList2delete, Tmp$) Then Exit Sub
Kill Tmp$
Wend

End Sub

Private Function GetTempPathgg() As String
  
   Dim sTmp       As String
   Dim I          As Long
    Dim EM$
    
   I = GetTempPath(0, StrPtr(EM$))
   sTmp = Space(I)

   Call GetTempPath(I, StrPtr(sTmp))
   GetTempPathgg = AddBackslash(Left$(sTmp, I - 1))

End Function

Private Function AddBackslash(s As String) As String

   If Len(s) > 0 Then
      If Right$(s, 1) <> "\" Then
         AddBackslash = s & "\"
      Else
         AddBackslash = s
      End If
   Else
      AddBackslash = "\"
   End If

End Function


Private Sub olamazi()
If Form4.Visible Then
Form4.Visible = False
If Form1.Visible Then
   
   ' If Form2.Visible Then Form2.ZOrder
    If Form1.TEXT1.Visible Then
        Form1.TEXT1.SetFocus
    Else
        Form1.SetFocus
    End If
    End If
    End If
End Sub
Sub mywait(bstack As basetask, PP As Double)
Dim p As Boolean, e As Boolean
On Error Resume Next
If bstack.Process Is Nothing Then
''If extreme Then MyDoEvents1 Form1
If PP = 0 Then Exit Sub
Else

Err.clear
p = bstack.Process.Done
If Err.Number = 0 Then
e = True
If p <> 0 Then
Exit Sub
End If
End If
End If
PP = PP + CDbl(timeGetTime)

Do


If TaskMaster.Processing And Not bstack.TaskMain Then
        If Not bstack.toprinter Then bstack.Owner.refresh
        TaskMaster.TimerTick
       ' SleepWait 1
        MyDoEvents1 Form1
Else
        ' SleepWait 1
        MyDoEvents1 Form1
End If
If e Then
p = bstack.Process.Done
If Err.Number = 0 Then
If p <> 0 Then
Exit Do
End If
End If
End If
Loop Until PP <= CDbl(timeGetTime) Or NOEXECUTION

                       If exWnd <> 0 Then
                mytitle$ bstack
                End If
End Sub
Sub ProcTask(bstack As basetask)
If TaskMaster.Processing Then
           TaskMaster.RestEnd1
 TaskMaster.TimerTick
''TaskMaster.rest
ElseIf Not bstack.IamChild Then
If REFRESHRATE > 25 Then k1 = 0
REFRESHRATE = 40
Sleep 1
ElseIf SLOW Then
Sleep 1
End If
TaskMaster.rest
SleepWaitEdit 1
TaskMaster.RestEnd
End Sub
Sub ProcTask2(bstack As basetask)
If TaskMaster.Processing Then
          TaskMaster.RestEnd1
 TaskMaster.TimerTickNow

ElseIf SLOW Then
Sleep 1

End If
TaskMaster.rest

SleepWaitEdit2 1
TaskMaster.RestEnd
End Sub
Function mybreakkey() As Boolean
If RRCOUNTER = 1 Then
    If KeyPressedLong(&H13) = 1 Then
k1 = 0
mybreakkey = Form1.mybreak1()
End If
RRCOUNTER = 2
End If
               


End Function
Sub ResetBreak()
Do While KeyPressedLong(&H13) <> 0
MyDoEvents
Loop

End Sub
Function myexit(bstack As basetask) As Boolean
Static counter As Long
Dim p As Boolean
On Error Resume Next
If Not extreme Then
            If escok Then
                        If KeyPressed(&H1B) Then
                                    If AVIRUN Then AVI.GETLOST
                                    NOEXECUTION = True
                                    While KeyPressed(&H1B)
                                            MyDoEvents
                                    Wend
                                    myexit = True
                                    Exit Function
                        End If
             End If
End If
If counter = 0 Then Sleep 0: counter = 5001
counter = counter - 1
If bstack Is Nothing Then
myexit = True: Exit Function
End If
If TaskMaster.OnlyMusic Then
TaskMaster.TimerTick
End If
If bstack.IamThread Then

myexit = bstack.Process.Done
Else
myexit = False
End If
End Function

Sub closeAll()
Dim I As Long
For I = 0 To 511
If FLEN(I) > 0 Then
FLEN(I) = 0
Close I
End If
Next I
CloseAllConnections
End Sub
Sub MakeitObjectLong(var As Variant)
Dim aa As Long
var = aa
End Sub
Sub MakeitObject(var As Variant)
Dim aa As New Document
Set var = aa
var.textDoc = ""
End Sub
Sub MakeitPropReference(var As Variant)
Dim aa As New PropReference
Set var = aa
End Sub

Sub CreateitObject(var As Variant, THISOBECT As String, Optional ByVal CC As Variant)
Dim aa As Object
If IsMissing(CC) Then
Set aa = CreateObject(THISOBECT)
Else
Set aa = CreateObject(THISOBECT, CStr(CC))
End If
Set var = aa
End Sub
Sub CheckVar(var As Variant, s As String)

If Typename(var) = doc Then
If var.IsEmpty Then
var.textDoc = s
Else
var.InsertDoc var.LastParagraph, var.TextParagraphLen(var.LastParagraph) + 1, s
End If
Else
var = s
End If
End Sub
Sub CheckVarLong(var As Variant, l As Long)

If IsObject(var) Then

Set var = Nothing
var = Empty
End If
var = l

End Sub
Sub LATIN(bstack As basetask)
On Error Resume Next
cLid = 1033
UserCodePage = 1252

With Form1
bstack.myCharSet = 0
If bstack.tolayer > 0 Then
    .dSprite(bstack.tolayer).Font.charset = 0
    ElseIf bstack.toback Then
    .Font.charset = 0
    Else
    
    .DIS.Font.charset = bstack.myCharSet
    .TEXT1.Font.charset = bstack.myCharSet
    .List1.Font.charset = bstack.myCharSet
   ' .List2.Font.CharSet = bstack.myCharSet
    End If
End With
pagio$ = "LATIN"
cLid = 1033
DialogSetupLang 1
End Sub
Sub GREEK(bstack As basetask)
On Error Resume Next
cLid = 1032
UserCodePage = 1253
With Form1
   bstack.myCharSet = 161
If bstack.tolayer > 0 Then
    .dSprite(bstack.tolayer).Font.charset = 161
    ElseIf bstack.toback Then
    .Font.charset = 161
    Else
 
    .DIS.Font.charset = bstack.myCharSet
    .TEXT1.Font.charset = bstack.myCharSet
    .List1.Font.charset = bstack.myCharSet
   ' .List2.Font.CharSet = bstack.myCharSet
    End If
End With
pagio$ = "GREEK"
cLid = 1032
DialogSetupLang 0
End Sub
Private Function GetLCIDFromKeyboard() As Long
    Dim Buffer As String, Ret&, r&
    Buffer = String$(514, 0)
      r = GetKeyboardLayout(DWL_ANYTHREAD) And &HFFFF
      r = Val("&H" & Right(Hex(r), 4))
        Ret = GetLocaleInfoW(r, LOCALE_ILANGUAGE, StrPtr(Buffer), Len(Buffer))
    GetLCIDFromKeyboard = CLng(Val("&h" + Left$(Buffer, Ret - 1)))
End Function
Public Function GetLCIDFromKeyboardLanguage() As String
    Dim Buffer As String, Ret&, r&
    Buffer = String$(514, 0)
      r = GetKeyboardLayout(DWL_ANYTHREAD) And &HFFFF
      r = Val("&H" & Right(Hex(r), 4))
      'LOCALE_SENGLANGUAGE&
      If cLid = 0 Then ''
      Ret = GetLocaleInfoW(r, LOCALE_SENGLANGUAGE&, StrPtr(Buffer), Len(Buffer))
      Else
        Ret = GetLocaleInfoW(r, LOCALE_SLANGUAGE&, StrPtr(Buffer), Len(Buffer))
        End If
     If shortlang Then If Ret > 3 Then Ret = 4
     On Error Resume Next
    GetLCIDFromKeyboardLanguage = Left$(Buffer, Ret - 1)

End Function
Private Function GetlocaleString(ByVal this As Long) As String
On Error GoTo 1234
    Dim Buffer As String, Ret&, r&
    Buffer = String$(514, 0)
      
        Ret = GetLocaleInfoW(cLid, this, StrPtr(Buffer), Len(Buffer))
    GetlocaleString = Left$(Buffer, Ret - 1)
    
1234:
    
End Function
Sub helpBin(f&, n$)
Dim a() As Byte
a() = n$
Put #f, , a
End Sub
Sub MakeitObject2(var As Variant)
Dim aa As Object
Set aa = New Group
Set var = aa
End Sub

Sub prepareGroup(bstack As basetask, ByVal ohere$, vvv As Long)
Dim hv As Boolean
'' ohere$ = myUcase(ohere$)

If HERE$ = "" Then
    hv = GetVar(bstack, bstack.GroupName & ohere$, vvv)
Else
    hv = GetlocalVar(bstack.GroupName & ohere$, vvv)
End If
If hv Then
' so it is an object now
    If Not IsObject(var(vvv)) Then
        MakeitObject2 var(vvv)
    ElseIf Typename(var(vvv)) <> "Group" Then
        MakeitObject2 var(vvv)
    End If
Else
    vvv = GlobalVarRefOnly(bstack.GroupName & ohere$)
    MakeitObject2 var(vvv)

    var(vvv).GroupName = ohere$ + "."
End If
var(vvv).edittag = ""
End Sub
Function ExecuteVarOnly(bstack As basetask, ohere$, vvv As Long, rest$, lang As Long) As Long
Dim w$, p As Double, v As Long, ss$, b$, I As Long, lcl As Boolean, j As Long, nm$, x1 As Long, y1 As Long, frm$
Const tt$ = "=-+*/<!,{" + vbCr
If Trim(rest$) = "" Then
    var(vvv) = CLng(0)
    ExecuteVarOnly = 1
    Exit Function
End If
Dim myobject As Object
'' ohere$ = myUcase$(ohere$)
Dim OvarnameLen As Long, OarrnameLen As Long
Dim f$
Dim pppp As mArray

''OvarnameLen = Len(VarName$) + 1   'we record ...
OvarnameLen = varhash.Count + 1 ' new way


   
 If bstack.GroupName <> "" Then
  bstack.GroupName = bstack.GroupName & var(vvv).GroupName '' & "."
  Else
  bstack.GroupName = var(vvv).GroupName ''& "."
  End If


   ExecuteVarOnly = 1
Do
there100:
Do

If Left$(NLtrim$(rest$) + "00", 2) = vbCrLf Or MaybeIsSymbol(rest$, "\'") Then
SetNextLine rest$
lcl = False
Else
Exit Do
End If

Loop
there12345:
If rest$ = "" Then Exit Do
v = IsLabelA(HERE$, rest$, w$)
' DOCUMENT DIM LONG....
' ÅÃÃÑÁÖÏ ÐÉÍÁÊÁÓ ÌÁÊÑÕÓ...

If v = 0 Then Exit Do



''w$ = myUcase(w$)
Select Case w$
Case "LOCAL", "ÔÏÐÉÊÁ", "ÔÏÐÉÊÇ", "ÔÏÐÉÊÅÓ"
lcl = True
GoTo there12345
Case "CLASS", "ÊËÁÓÇ"
If IsLabelSymbolNew(rest$, "ÃÅÍÉÊÇ", "GLOBAL", lang) Then
MyEr "GLOBAL can't used in a CLASS", "Ç êëÜóç óôçí ïìÜäá äåí ìðïñåß íá åßíáé ãåíéêÞ"
ExecuteVarOnly = False
Exit Function
End If
 If IsLabelA("", rest$, w$) = 1 Then
                     If IsLabelSymbolNew(rest$, "ÔÕÐÏÓ", "TYPE", lang) Then
                     MyEr "Use here a Group not a Class", "×ñçóéìïðïßçóå ìéá ÏìÜäá êáé ü÷é ìéá ÊëÜóç"
                    ExecuteVarOnly = False
                    Exit Function
                    End If
                If HERE$ = "" Then
                f$ = bstack.GroupName + w$
                Else
                f$ = w$
                End If
        If lang = 1 Then
               If FastSymbol(rest$, "{") Then
            ss$ = block(rest$)
            If Right$("  " + ss$, 2) <> vbCrLf Then ss$ = ss$ + vbCrLf
            rest$ = f$ + "  {  group " + w$ + " {" + ss$ & "}" + vbCrLf + " try { call! " + w$ + "." + w$ + " }  : =" + w$ + rest$
            w$ = "Function"
            GoTo classcontclass
            Else
             f$ = w$
            w$ = "Group "
            End If
         Else
            If FastSymbol(rest$, "{") Then
            ss$ = block(rest$)
                If Right$("  " + ss$, 2) <> vbCrLf Then ss$ = ss$ + vbCrLf
            rest$ = f$ + "  {  ïìáäá " + w$ + " {" + ss$ & "}" + vbCrLf + " try { call! " + w$ + "." + w$ + "}  : =" + w$ + rest$
            w$ = "ÓõíÜñôçóç"
            GoTo classcontclass
            Else
             f$ = w$
            w$ = "ÏìÜäá "
            End If
            
        End If
        
        Do While FastSymbol(rest$, ",")
         If IsLabelA("", rest$, nm$) <> 1 Then
            SyntaxError
            ExecuteVarOnly = False
            Exit Function
         End If
             f$ = f$ + w$ + nm$ + vbCrLf
        Loop
            If IsLabelSymbolNew(rest$, "ÔÕÐÏÓ", "TYPE", lang) Then
                 MyEr "Use here a Group not a Class", "×ñçóéìïðïßçóå ìéá ÏìÜäá êáé ü÷é ìéá ÊëÜóç"
                ExecuteVarOnly = False
            Exit Function
            End If
            w$ = Trim$(w$)
            rest$ = f$ + rest$
        GoTo contVar
            Else
            SyntaxError
            ExecuteVarOnly = False
            Exit Function
            
   End If
Case "REM", "ÓÇÌ"
SetNextLine rest$: GoTo there100
Case "FUNCTION", "ÓÕÍÁÑÔÇÓÇ"
If IsLabelSymbolNew(rest$, "ÃÅÍÉÊÇ", "GLOBAL", lang) Then
MyEr "GLOBAL can't used in a Group", "Ç óõíÜñôçóç óôçí ïìÜäá äåí ìðïñåß íá åßíáé ãåíéêÞ"
ExecuteVarOnly = False
Exit Function
End If
classcontclass:
x1 = Abs(IsLabel(bstack, rest$, f$))
''f$ = myUcase$(f$)
If x1 <> 0 Then
  If var(vvv).FuncList <> "" Then  ' maybe we have it
  If InStr(var(vvv).FuncList, Chr$(2) + f$ + "() ") > 0 Then
  IsSymbol3 rest$, "{"
    ss$ = block(rest$)
    If FastSymbol(rest$, "}") Then
             If GetSub(bstack.GroupName + f$ + "()", I) Then
                         If rinstr(sbf(I).sbgroup, bstack.GroupName) + Len(bstack.GroupName) - 1 = Len(sbf(I).sbgroup) Then
                         bstack.IndexSub = I
                          sbf(I).sb = ss$
                          GoTo there12345
                          Else
                          End If
             End If
 
   If HERE$ <> "" Then

             If lang = 1 Then
                rest$ = "GLOBAL " + Chr(34) + HERE$ + "." + bstack.GroupName + f$ + Chr(34) + " { " + ss$ + "} " + rest$
                  Else
                  rest$ = "ÃÅÍÉÊÇ " + Chr(34) + HERE$ + "." + bstack.GroupName + f$ + Chr(34) + " { " + ss$ + "} " + rest$ ''sbf(I).sbGROUP +  " { " + ss$ + "} " + Rest$
                  End If
   GoTo BYPASS3
   Else
   
        ExecuteVarOnly = 0: Exit Function
   End If
   End If
  End If
  End If
  ' so is the first time, put it back
  If Left$(sbf(bstack.OriginalCode).sb, 10) = "'11001EDIT" Then
   
   ss$ = rest$
     IsSymbol3 ss$, "{"
    frm$ = block(ss$)
  If Right$(ss$, 2) <> vbCrLf Then
        b$ = GetNextLine((sbf(bstack.OriginalCode).sb)) + "+2"
  Else
        b$ = GetNextLine((sbf(bstack.OriginalCode).sb))
        End If
        nm$ = GetStrUntil(",", Mid$(b$, 12))
      GetSub nm$, I
      IsSymbol3 rest, "{"
       b$ = "{" + b$ + "+" + CStr(Len(sbf(I).sb)) + "-" + CStr(Len(ss$)) + vbCrLf
     
        
    rest$ = b$ + rest$


  End If
  If HERE$ = "" Then
  rest$ = bstack.GroupName + f$ & " " & rest$
  Else
  rest$ = f$ & " " & rest$
  End If
BYPASS3:
 ExecuteVarOnly = Abs(Identifier(bstack, w$, rest$))

   
  If GetSub(bstack.GroupName + f$ + "()", I) Then
 '''åäù íá âÜëù ôï group name ìáæß!!!!! óôï ó÷åôéêü ìå ôï i
   If Not lcl Then
   var(vvv).FuncList = Chr$(1) + Chr$(2) + f$ + "() " + CStr(I) + Chr$(1) + var(vvv).FuncList
   Else
   var(vvv).LocalList = var(vvv).LocalList + vbCrLf + "Local Function " + f$ + "{" + sbf(I).sb + "}"
   End If
   If HERE$ = "" Then
   sbf(I).sbgroup = bstack.GroupName
   Else
    sbf(I).sbgroup = HERE$ + "." + bstack.GroupName
  End If
  If lcl Then
  
  End If
  End If
   
  ''   Bstack.GroupName = oldgroupname$
     Else
     ExecuteVarOnly = 0
     End If
     
     If ExecuteVarOnly = 0 Then Exit Function
     

Case "MODULE", "ÔÌÇÌÁ"
If IsLabelSymbolNew(rest$, "ÃÅÍÉÊÇ", "GLOBAL", lang) Then
MyEr "GLOBAL can't used in a Group", "Ç óõíÜñôçóç óôçí ïìÜäá äåí ìðïñåß íá åßíáé ãåíéêÞ"
ExecuteVarOnly = False
Exit Function
End If
x1 = Abs(IsLabel(bstack, rest$, f$))
''f$ = myUcase$(f$)
If x1 <> 0 Then
  If var(vvv).FuncList <> "" Then  ' maybe we have it
  If InStr(var(vvv).FuncList, Chr$(3) + f$ + " ") > 0 Then
    IsSymbol3 rest$, "{"
    ss$ = block(rest$)
    If Right$(ss$, 2) <> vbCrLf Then ss$ = ss$ + vbCrLf
    If FastSymbol(rest$, "}") Then
             If GetSub(bstack.GroupName + f$, I) Then
            '' IF sbf(I).sbGROUP
                         If rinstr(sbf(I).sbgroup, bstack.GroupName) + Len(bstack.GroupName) - 1 = Len(sbf(I).sbgroup) Then
                          bstack.IndexSub = I
                          sbf(I).sb = ss$
                          GoTo there12345
                          End If
             End If

 
   If HERE$ <> "" Then
v = 123
             If lang = 1 Then
                rest$ = "GLOBAL " + Chr(34) + HERE$ + "." + bstack.GroupName + f$ + Chr(34) + " {'11001EDIT " + CStr(bstack.OriginalCode) + ", 3" + vbCrLf + ss$ + "} " + rest$
                  Else
                  rest$ = "ÃÅÍÉÊÏ " + Chr(34) + HERE$ + "." + bstack.GroupName + f$ + Chr(34) + " {'11001EDIT " + CStr(bstack.OriginalCode) + ", 3" + vbCrLf + ss$ + "} " + rest$
                  End If
   GoTo BYPASS4
   Else
   
        ExecuteVarOnly = 0: Exit Function
   End If
   End If
  End If
  End If
  ' so is the first time, put it back
  If Left$(sbf(bstack.OriginalCode).sb, 10) = "'11001EDIT" Then
   
   ss$ = rest$
     IsSymbol3 ss$, "{"
    frm$ = block(ss$)
 If Right$(ss$, 2) <> vbCrLf Then
        b$ = GetNextLine((sbf(bstack.OriginalCode).sb))
  Else
        b$ = GetNextLine((sbf(bstack.OriginalCode).sb))
        End If
        nm$ = GetStrUntil(",", Mid$(b$, 12))
      GetSub nm$, I
      IsSymbol3 rest, "{"
       b$ = "{" + b$ + "+" + CStr(Len(sbf(I).sb)) + "-" + CStr(Len(ss$)) + vbCrLf
     
        
    rest$ = b$ + rest$


  End If
  If HERE$ = "" Then
  
  rest$ = bstack.GroupName + f$ & " " & rest$
  Else
  
  rest$ = f$ & " " & rest$
  End If
BYPASS4:
 ExecuteVarOnly = Abs(Identifier(bstack, w$, rest$))

  If GetSub(bstack.GroupName + f$, I) Then

 If Not lcl Then
 var(vvv).FuncList = Chr$(1) + Chr$(3) + f$ + " " + CStr(I) + Chr$(1) + var(vvv).FuncList
 Else
  var(vvv).LocalList = var(vvv).LocalList + vbCrLf + "Local Module " + f$ + "{" + sbf(I).sb + "}"
 End If

        If HERE$ = "" Then
   sbf(I).sbgroup = bstack.GroupName
   Else
    sbf(I).sbgroup = HERE$ + "." + bstack.GroupName
  End If
  End If

     Else
     ExecuteVarOnly = 0
     End If
     If ExecuteVarOnly = 0 Then Exit Function

Case "DOCUMENT", "ÅÃÃÑÁÖÏ", "DIM", "ÐÉÍÁÊÁÓ", "GROUP", "ÏÌÁÄÁ", "LONG", "ÌÁÊÑÕÓ"
' put back, change HERE$ and
contVar:
If w$ = "GROUP" Or w$ = "ÏÌÁÄÁ" Then
                                                 x1 = Abs(IsLabel(bstack, rest$, w$))
                                                  If x1 = 1 Then
                                                                     If IsLabelSymbolNew(rest$, "ÔÕÐÏÓ", "TYPE", lang) Then
                                                                                        If IsStrExp(bstack, rest$, ss$) Then
                                                                                        frm$ = bstack.GroupName
                                                                                        prepareGroup bstack, w$, y1
                                                                                        LogGroup bstack, vvv, ohere$, OvarnameLen, OarrnameLen, lcl
                                                                                         ExecuteVarOnly = Abs(ExecuteVarOnly(bstack, bstack.GroupName & w$, y1, ss$, lang))
                                                                                        
                                                                                            OvarnameLen = varhash.Count + 1 'Len(VarName$) + 1   'we record ...
                                                                                      
                                                                                        
                                                                                         bstack.GroupName = frm$
                                                                                        End If
                                                
                                                                        Else
                                                                      If FastSymbol(rest$, "{") Then
                                                                                      ss$ = block(rest$)
                                                                                      frm$ = bstack.GroupName
                                                                                      prepareGroup bstack, w$, y1
                                                                                    LogGroup bstack, vvv, ohere$, OvarnameLen, OarrnameLen, lcl
                                                                                    
                                                                                    If Abs(ExecuteVarOnly(bstack, bstack.GroupName & w$, y1, ss$, lang)) = 0 Then
                                                                                        rest$ = ss$ + rest$
                                                                                    Else
                                                                                        ExecuteVarOnly = FastSymbol(rest$, "}")
                                                                                    End If
                                                                                        OvarnameLen = varhash.Count + 1  'we record ...
                                                                              
                                                                                     bstack.GroupName = frm$
                                                                                     If Typename(var(y1)) <> "Group" Then Set var(y1) = New Group
                                                                                     
                                                                                  Else
                                                                                  prepareGroup bstack, w$, y1
                                                                                    LogGroup bstack, vvv, ohere$, OvarnameLen, OarrnameLen, lcl
                                                                        End If
                                                                    End If
                                                         End If
                                   





Else
  ExecuteVarOnly = Abs(Identifier(bstack, w$, rest$))
End If

     If ExecuteVarOnly = 0 Then Exit Function
       ''LogGroup bstack, vvv, oHere$, OvarnameLen, OarrnameLen, lcl
Case Else
' check if we have a class

nm$ = ""
If Len(rest$) > 0 Then
If Not MaybeIsSymbol(rest$, tt$) Then
    If GetSub(w$ + "()", j) Then
        f$ = "=" + w$ + "()"
        
            If IsLabelA(HERE$, rest$, w$) <> 1 Then Exit Do
            ''w$ = myUcase(w$)
            rest$ = f$ + rest$
            nm$ = w$
            ''
    ElseIf GetSub(bstack.GroupName + w$ + "()", j) Then   '' why not here??
        f$ = "=" + bstack.GroupName + w$ + "()"
        If IsLabelA(HERE$, rest$, w$) <> 1 Then Exit Do
        ''w$ = myUcase(w$)
        rest$ = f$ + rest$
        nm$ = w$
        
    End If
End If
End If
w$ = ohere$ & "." & w$
''If b$ = "" Then b$ = W$ Else b$ = b$ + ", " + W$
Select Case v
Case 1
p = 0
If HERE$ = "" Then
    If Not GetVar(bstack, w$, v) Then v = GlobalVar(w$, p) ': GetVar bstack, W$, v
Else
    If Not GetlocalVar(w$, v) Then v = GlobalVar(w$, p) ': GetlocalVar W$, v
End If

If FastSymbol(rest$, "=") Then
        
               If IsExp(bstack, rest$, p) Then
               If Not bstack.LastObj Is Nothing Then
                                If Typename(bstack.LastObj) = "Group" Then
                                            Set myobject = bstack.LastObj
                                                                                                                                                                    
againgroup:
                                LogGroup bstack, vvv, ohere$, OvarnameLen, OarrnameLen, lcl

                       
                                            If nm$ <> "" Then
                                                
                                                UnFloatGroup bstack, nm$, v, myobject

                                                                                            OvarnameLen = varhash.Count + 1  'we record ...
                                                                                      
                                            End If
                                            If FastSymbol(rest$, ",") Then
                                            
                                          
                                                If IsLabelA(HERE$, rest$, nm$) = 1 Then
                                                    If HERE$ = "" Then
                                                        If Not GetVar(bstack, ohere$ & "." & nm$, v) Then v = GlobalVar(ohere$ & "." & nm$, p)   ': GetVar bstack, nm$, v
                                                    Else
                                                        If Not GetlocalVar(ohere$ & "." & nm$, v) Then v = GlobalVar(ohere$ & "." & nm$, p)   ': GetlocalVar W$, v
                                                    End If
                                                    GoTo againgroup:
                                                Else
                                                    SyntaxError
                                                    Exit Do
                                                End If
                                       
                                        End If

                                         Set bstack.LastObj = Nothing
                                        GoTo continuehere
                                    Set bstack.LastObj = Nothing
                                        ' look for other
                                Else
                                SyntaxError
                                Exit Do
                                End If
            ElseIf VarType(var(v)) = vbLong Then
                    var(v) = CLng(p)
                    Else
                    var(v) = p
                    End If
            
                 Else
                
                
                
                   If LastErNum <> -2 Then
                   NoValueForvariable w$
                    ExecuteVarOnly = 0
                     
                     Exit Function
                     End If
                    
                End If
               
        Else
        ss$ = ""
         If MaybeIsSymbol(rest$, "=-+*/<!") Then
            If FastSymbol(rest$, "+=") Then
                ss$ = "+"
            ElseIf FastSymbol(rest$, "/=") Then
            ss$ = "/"
            ElseIf FastSymbol(rest$, "-=") Then
            ss$ = "-"
            ElseIf FastSymbol(rest$, "*=") Then
            ss$ = "*"
            ElseIf IsOperator(rest$, "++") Then
            ss$ = "++"
            ElseIf IsOperator(rest$, "--") Then
            ss$ = "--"
            ElseIf IsOperator(rest$, "-!") Then
            ss$ = "-!"
            ElseIf IsOperator(rest$, "~") Then
            ss$ = "!"
            ElseIf FastSymbol(rest$, "<=") Then
            ss$ = "="
            End If
        End If
        If Len(ss$) > 0 Then
        
        If GetVar(bstack, w$, v) Then
        If Len(ss$) = 1 Then
                    If IsExp(bstack, rest$, p) Then
                            On Error Resume Next
                            If VarType(var(v)) = vbLong Then
                               Select Case ss$
                                Case "="
                                var(v) = CLng(p)
                                Case "+"
                                var(v) = CLng(p) + var(v)
                                Case "*"
                                 var(v) = CLng(p) * var(v)
                                Case "-"
                                var(v) = var(v) - CLng(p)
                                Case "/"
                                If p = 0 Then
                                   ExecuteVarOnly = 0
                                   Exit Do
                                End If
                                 var(v) = var(v) \ CLng(p)
                                         Case "!"
                                 var(v) = -1 - (var(v) <> 0)
                            End Select
                            Else
                            Select Case ss$
                                Case "="
                                var(v) = p
                                Case "+"
                                var(v) = p + var(v)
                                Case "*"
                                 var(v) = p * var(v)
                                Case "-"
                                var(v) = var(v) - p
                                Case "/"
                                If p = 0 Then
                                   ExecuteVarOnly = 0
                                    
                                   Exit Function
                                End If
                          
                                 var(v) = var(v) / p
                                     Case "!"
                                 var(v) = -1 - (var(v) <> 0)
                            End Select
                            End If
                            If Err.Number = 6 Then
                             
                                Exit Function   'why ?
                          
                                             
                               End If
                               On Error GoTo 0
                    Else
        
       If LastErNum <> -2 Then
        NoValueForvariable w$
        ExecuteVarOnly = 0
         
         Exit Function
   
      
       End If
              
                               
                    End If
        Else
        If ss$ = "++" Then
        var(v) = 1 + var(v)
        ElseIf ss$ = "--" Then
        var(v) = var(v) - 1
        Else
        var(v) = -var(v)
        End If
        
        End If
    Else
                    ExecuteVarOnly = 0
                     
                                     Exit Function
    End If
        Else
     '         If Not ExecuteVarOnly(bstack, W$, Rest$) Then
             ''  ExecuteVarOnly = 0: Exit Function
          ''     End If
          ''  If Left$(HERE$ & "#", 1) = "!" Then HERE$ = Mid$(HERE$, 2): HERE$ = HERE$
        End If
        
    End If
        
    
        
Case 2
rest$ = w$ & rest$: Exit Function
Case 3
        ss$ = ""
         If MaybeIsSymbol(rest$, "=<") Then
            If FastSymbol(rest$, "<=") Then
                ss$ = "g"  'global
            ElseIf FastSymbol(rest$, "=") Then
            ss$ = "="
            End If
        End If
       

If ss$ <> "" Then

    If ss$ = "=" Then
    
    If HERE$ = "" Then
            If GetVar(bstack, w$, v) Then
                If IsStrExp(bstack, rest$, ss$) Then CheckVar var(v), ss$
            ElseIf IsStrExp(bstack, rest$, ss$) Then
                GlobalVar w$, ss$
            
            End If
    Else
    
            If GetlocalVar(w$, v) Then
                If IsStrExp(bstack, rest$, ss$) Then CheckVar var(v), ss$
            ElseIf IsStrExp(bstack, rest$, ss$) Then
                GlobalVar w$, ss$
            
            End If
            End If
        Else    ' g
          If GetVar(bstack, w$, v) Then
          
               If IsStrExp(bstack, rest$, ss$) Then
               CheckVar var(v), ss$
               Else
               NoValueForvariable w$
               End If
            Else
            Nosuchvariable w$
          End If
    End If
Else
' NO VALUE IS OK
If Not GetlocalVar(w$, v) Then
                v = GlobalVar(w$, ss$)
                ''GetlocalVar W$, v
                var(v) = ""

            End If
End If
Case 4
If HERE$ = "" Then
If Not GetVar(bstack, w$, v) Then v = GlobalVar(w$, p) '': GetVar bstack, W$, v
Else
If Not GetlocalVar(w$, v) Then v = GlobalVar(w$, p) '': GetlocalVar W$, v
End If
        If FastSymbol(rest$, "=") Then
                If IsExp(bstack, rest$, p) Then
                 var(v) = Int(p)
                If Err.Number = 6 Then ExecuteVarOnly = 0:   Exit Function

                Else
                      If LastErNum <> -2 Then
                     NoValueForvariable w$
                    ExecuteVarOnly = 0
                     
                     Exit Function
                     End If
            
            End If
Else
    If FastSymbol(rest$, "+=") Then
    ss$ = "+"
    ElseIf FastSymbol(rest$, "/=") Then
    ss$ = "/"
    ElseIf FastSymbol(rest$, "-=") Then
    ss$ = "-"
    ElseIf FastSymbol(rest$, "*=") Then
    ss$ = "*"
    ElseIf IsOperator(rest$, "++") Then
    ss$ = "++"
    ElseIf IsOperator(rest$, "--") Then
    ss$ = "--"
    ElseIf IsOperator(rest$, "-!") Then
    ss$ = "-!"
                ElseIf IsOperator(rest$, "~") Then
            ss$ = "!"
    ElseIf FastSymbol(rest$, "<=") Then
    ss$ = "="
    End If
    If ss$ = "" Then
              GoTo continuehere
                 
    End If
    If GetVar(bstack, w$, v) Then
        If Len(ss$) = 1 Then
                    If IsExp(bstack, rest$, p) Then
                            On Error Resume Next
                            Select Case ss$
                            Case "="
                            var(v) = Int(p)
                            Case "+"
                                var(v) = Int(p) + var(v)
                                Case "*"
                                 var(v) = Int(Int(p) * var(v))
                                Case "-"
                                var(v) = var(v) - Int(p)
                                Case "/"
                                     If p = 0 Then
                                ExecuteVarOnly = 0:   Exit Function
                                End If
                                 var(v) = var(v) \ Int(p)
                                                     Case "!"
                                 var(v) = -1 - (var(v) <> 0)
                            End Select
                            If Err.Number = 6 Then ExecuteVarOnly = 0:   Exit Function
                                On Error GoTo 0
                    Else
                                ExecuteVarOnly = 0:   Exit Function
                    End If
        Else
        If ss$ = "++" Then
          var(v) = 1 + var(v)
          ElseIf ss$ = "--" Then
          var(v) = var(v) - 1
          Else
          var(v) = -var(v)
          End If
        End If
    Else
            ExecuteVarOnly = 0:   Exit Function
    End If
End If
Case 5
If neoGetArray(bstack, w$, pppp) Then
If Not NeoGetArrayItem(pppp, bstack, w$, v, rest$) Then

 
If LastErNum = -2 Then

ExecuteVarOnly = 0:  Exit Function
Else
ExecuteVarOnly = 0
Exit Function
End If
End If
On Error Resume Next

If Not FastSymbol(rest$, "=", True) Then

End If
If Not IsExp(bstack, rest$, p) Then
If LastErNum = -2 Then

Else
MissNumExpr
End If
 
ExecuteVarOnly = 0: Exit Function
End If
pppp.item(v) = p
Do While FastSymbol(rest$, ",")
If pppp.UpperMonoLimit > v Then
v = v + 1
If Not IsExp(bstack, rest$, p) Then ExecuteVarOnly = 0:   Exit Function
pppp.item(v) = p
Else
Exit Do
End If
Loop
lcl = False
Else
MyEr "Can't find array " & w$ & ")", "Äåí âñßóêù ðßíáêá " & w$ & ")"
ExecuteVarOnly = 0:   Exit Function
End If
Case 6
If neoGetArray(bstack, w$, pppp) Then
If Not NeoGetArrayItem(pppp, bstack, w$, v, rest$) Then ExecuteVarOnly = 0:   Exit Function
On Error Resume Next

If Not FastSymbol(rest$, "=") Then
  If FastSymbol(rest$, ":=") Then
    ss$ = Left$(aheadstatus(rest$), 1)
        If ss$ = "S" Then
        If Not IsStrExp(bstack, rest$, ss$) Then ExecuteVarOnly = 0:      Exit Function
        Else
        If Not IsExp(bstack, rest$, p) Then ExecuteVarOnly = 0:    Exit Function
        ss$ = Trim$(Str$(p))
        End If
             If Not IsObject(pppp.item(v)) Then
          pppp.item(v) = ss$
          Else
        CheckVar pppp.item(v), ss$
        
        End If
        Do While FastSymbol(rest$, ",")
        If pppp.UpperMonoLimit > v Then
        v = v + 1
          ss$ = Left$(aheadstatus(rest$), 1)
                        If ss$ = "S" Then
        If Not IsStrExp(bstack, rest$, ss$) Then ExecuteVarOnly = 0:     Exit Function
        Else
        If Not IsExp(bstack, rest$, p) Then ExecuteVarOnly = 0:   Exit Function
        ss$ = Trim$(Str$(p))
        End If
        
                If Not IsObject(pppp.item(v)) Then
                  pppp.item(v) = ss$
                  Else
                CheckVar pppp.item(v), ss$
                
                End If
        Else
        Exit Do
        End If
        Loop
   lcl = False
    Else
        ExecuteVarOnly = 0:   Exit Function
    End If
Else
If Not IsStrExp(bstack, rest$, ss$) Then
     ExecuteVarOnly = 0:   Exit Function
     End If
    If Not IsObject(pppp.item(v)) Then
        pppp.item(v) = ss$
    Else
        CheckVar pppp.item(v), ss$
    End If
        Do While FastSymbol(rest$, ",")
        If pppp.UpperMonoLimit > v Then
        v = v + 1
        If Not IsStrExp(bstack, rest$, ss$) Then ExecuteVarOnly = 0:   Exit Function
        
        If Not IsObject(pppp.item(v)) Then
          pppp.item(v) = ss$
          Else
        CheckVar pppp.item(v), ss$
        
        End If
        Else
        Exit Do
        End If
        Loop
        lcl = False
End If
Else
ExecuteVarOnly = 0:   Exit Function
End If
Case 7
If neoGetArray(bstack, w$, pppp) Then
If Not NeoGetArrayItem(pppp, bstack, w$, v, rest$) Then ExecuteVarOnly = 0:   Exit Function
On Error Resume Next
If Not FastSymbol(rest$, "=") Then ExecuteVarOnly = 0: Exit Function
If Not IsExp(bstack, rest$, p) Then ExecuteVarOnly = 0: Exit Function
p = Int(p)
If Err.Number > 0 Then ExecuteVarOnly = 0: Exit Function
pppp.item(v) = p
Do While FastSymbol(rest$, ",")
If pppp.UpperMonoLimit > v Then
v = v + 1
If Not IsExp(bstack, rest$, p) Then ExecuteVarOnly = 0: Exit Function
pppp.item(v) = p
Else
Exit Do
End If
Loop
Else
ExecuteVarOnly = 0: Exit Function
End If
Case Else

If MaybeIsSymbol(rest$, ",-+*/_!@()[];<>|~`") Then
SyntaxError
ExecuteVarOnly = 0
Exit Function
End If
End Select
End Select
continuehere:
''\\\\\\\\\\\\\\\\
LogGroup bstack, vvv, ohere$, OvarnameLen, OarrnameLen, lcl
If MaybeIsSymbol(rest$, "}") Then

ExecuteVarOnly = 1
Exit Do
End If
If Not FastSymbol(rest$, ",") Then
SetNextLine rest$
lcl = False
End If
ExecuteVarOnly = 1
Loop Until Trim(rest$) = ""


End Function
Private Sub CallByObject2(bstack As basetask, b$, I As Long, Ret As Boolean)
Dim that As stdCallFunction
Dim k As Long, p As Double, final(0 To 63) As Variant
Dim x1 As Long, what$, curtype As Long, s$
Dim pppp As mArray, par(0 To 63) As Variant, thisref(0 To 63) As Long

Set that = var(I)
For k = 1 To that.Count
       
        If that.IsByRef(k - 1) Then
            ' look for label..and check it
            IsSymbol3 b$, "&"   'drop it is optional
            curtype = Abs(IsLabel(bstack, b$, what$))
            If that.CheckType(k - 1, curtype) Then
            ' so this is the right type
            
                    If curtype <= 4 Then
                            If GetlocalVar(bstack.GroupName & what$, x1) Then   '''why GetlocalVar(bstack.GroupName
                                    thisref(k - 1) = x1 ' so that is used to restore value
                                    If IsObject(var(x1)) Then
                                         ' THIS IS NOT GOOD
                                    
                                    Else
                                             final(k - 1) = var(x1)  ' so if this is a long we place a variant long
                                     End If
                            Else
                            ' no such variable
                            End If
                            ''****************
                    ElseIf neoGetArray(bstack, what$, pppp, HERE$ <> "") Then ''bstack.GroupName &
                            If NeoGetArrayItem(pppp, bstack, bstack.GroupName & what$, x1, b$) Then
                                Set par(k - 1) = pppp ' we hold a reference to array
                                If IsObject(pppp.item(x1)) Then
                                   ' THIS IS NOT GOOD
                                Else
                                final(k - 1) = pppp.item(x1)
                                End If
                            End If
                    
                    End If
            Else
            ' type mismatch
            ' exit - error
            End If
        Else
                Select Case that.ReadType(k - 1)
                Case 2
                    If Not IsExp(bstack, b$, p) Then Exit For
                    final(k - 1) = CLng(p)
                Case 1, 5
                    If Not IsExp(bstack, b$, p) Then Exit For
                    final(k - 1) = p
                Case 4, 7
                    If Not IsExp(bstack, b$, p) Then Exit For
                    final(k - 1) = Int(p)
                Case Else
                    If Not IsStrExp(bstack, b$, s$) Then Exit For
                    final(k - 1) = s$
                End Select
        End If
Next k
If k > that.Count Then
'all is ok
' make your call

''x1 = stdCallW(that.LIB, that.FUNC, vbLong, final(), that.Count)
x1 = 100
If Ret Then
bstack.soros.PushVal CDbl(x1)   ' FEEDBACK TO STACK
End If
Else
'error message


Exit Sub
End If
For k = 1 To that.Count
If that.IsByRef(k - 1) Then
' RESTORE VALUES...
    If that.IsArrayItem(k - 1) Then
    par(k - 1).item(thisref(k - 1)) = final(k - 1)
    Set par(k - 1) = Nothing
    Else
    
    End If
End If
Next k

End Sub
Private Sub CallByObject(bstack As basetask, I As Long, Ret As Boolean)
Dim that As stdCallFunction
Dim k As Long, p As Double, final(0 To 63) As Variant
Dim x1 As Long, what$, curtype As Long, s$, Link$
Dim thisref(0 To 63) As Long

Set that = var(I)
For k = 1 To that.Count
       
        If that.IsByRef(k - 1) Then
            ' look for label..and check it
           If bstack.IsInStackString(what$) Then
                    If that.ReadType(k - 1) <= 4 Then
                            If GetGlobalVar(bstack.GroupName & what$, x1) Then
                                    thisref(k - 1) = x1 ' so that is used to restore value
                                    If IsObject(var(x1)) Then
                                         ' THIS IS NOT GOOD
                                    
                                    Else
                                             final(k - 1) = var(x1)  ' so if this is a long we place a variant long
                                            thisref(k - 1) = x1
                                     End If
                            Else
                            ' no such variable
                            End If
                    Else
                    ' error no array yet
                    
                    End If
            Else
            ' type mismatch
            ' exit - error
            End If
        Else
                Select Case that.ReadType(k - 1)
                Case 2
                   If Not bstack.IsInStackNumber(p) Then Exit For
                    final(k - 1) = CLng(p)
                Case 1, 5
                     If Not bstack.IsInStackNumber(p) Then Exit For
                    final(k - 1) = p
                Case 4, 7
                    If Not bstack.IsInStackNumber(p) Then Exit For
                    final(k - 1) = Int(p)
                Case Else
                    If Not bstack.IsInStackString(s$) Then Exit For
                    final(k - 1) = s$
                End Select
        End If
Next k
If k > that.Count Then
'all is ok
' make your call

x1 = stdCallW(that.LIB, that.FUNC, vbLong, final(), that.Count)
If Ret Then
If that.RetType = 0 Then
bstack.soros.PushVal CDbl(x1)   ' FEEDBACK TO STACK
Else
bstack.soros.PushStr GetBStrFromPtr(x1)
End If
End If
Else
'error message


Exit Sub
End If
For k = 1 To that.Count
If that.IsByRef(k - 1) Then
' RESTORE VALUES...
    If that.ReadType(k - 1) < 5 Then
    var(thisref(k - 1)) = final(k - 1)
    
    End If
End If
Next k

End Sub

Sub CallGlobal(s$)
Dim ohere$
ohere$ = HERE$
HERE$ = "@"
 Execute basestack1, s$, False
 s$ = ""
HERE$ = ohere$
End Sub



Public Sub ProcProperty(bstack As basetask, v(), vIndex As Long, FN$, rest$, language As Long)
Dim var1() As Variant, s$, r As Double, l As Long, newref As Long, many As Long
Dim var2() As String
Dim VV As Object
Set VV = v(vIndex)
ReDim var1(0 To 0)

Do
If FastSymbol(rest$, ",") Then
If IsExp(bstack, rest$, r) Then
''var1(0) = r
l = FindDISPID(VV, FN$)
ChangeOneParameter VV, l, (r), FN$
ElseIf IsStrExp(bstack, rest$, s$) Then
var1(0) = s$

CallByNameFixParamArray VV, FN$, VbLet, var1(), var2(), 1

End If
ElseIf IsLabelSymbolNew(rest$, "ÙÓ", "AS", language) Then
' WE MAKE A NEW OBJECT

l = FindDISPID(VV, FN$)
FN$ = Typename(VV) & "." & UCase(FN$)
If l <> -1 Then
' we have vv, fn$, l and we are looking for a label to make an object to that
If Abs(IsLabel(bstack, rest$, s$)) < 5 Then
' now we have  S$, but maybe is used
''s$ = myUcase(s$)
If GetlocalVar(s$, newref) Then
' so it is an object now
If Not IsObject(v(newref)) Then
MakeitPropReference v(newref)
ElseIf Typename(v(newref)) <> "PropReference" Then
MakeitPropReference v(newref)
End If
Else
''GlobalVar s$, 0   'we push a zero..GlobalVar create
''GetlocalVar s$, newref
newref = GlobalVarRefOnly(bstack.GroupName & s$)
MakeitPropReference v(newref)
v(newref).Construct vIndex, l   ' this is the link vindex is an index to var()
' so for every method or property we use this simple struct
' we can define the value type

End If


End If
End If
ElseIf IsLabelSymbolNew(rest$, "ÈÅÓÅ", "SET", language) Then
' we make a new reference to that property
End If
 If FastSymbol(rest$, ",") Then
 If Not IsStrExp(bstack, rest$, FN$) Then Exit Do
 Else
 Exit Do
 End If
Loop
End Sub
''ProcProperty bstack, var(i), sS$, rest$,  LANG
' METHOD A,"Multiply" (12,12) [AS RESULT]   (or Result$)  if [As] isn't there so
' METHOD A "Multiply" (12,12)  AS RESULT  without
' METHOD A "Multiply", &alfa,&beta$   'passing by reference
''ProcMethod bstack, var(i), sS$, rest$,  LANG
Sub ProcMethod(bstack As basetask, v(), vIndex As Long, FN$, rest$, language As Long)
Dim var1() As Variant, s$, r As Double, l As Long, newref As Long, glob As Boolean
Dim VV As Object, mstack As New mStiva, result As Variant, retobject As Object
Dim namarg As Long
Set VV = v(vIndex)
ReDim var1(0 To 0)
Dim var2() As String
ReDim var2(0 To 0)
' expression or label:=expression'

''Exit Sub
Dim what$, it As Long, items As Long
 If FastSymbol(rest$, ",") Then
' we have parameters..(by value)
If FastSymbol(rest$, "(") Then  ' we have "(par1, par2...) as result"
RealMeth bstack, rest$, var1(), var2(), items, namarg
If Not FastSymbol(rest$, ")", True) Then Exit Sub
Else
RealMeth bstack, rest$, var1(), var2(), items, namarg  ' if we have as result then we get an error...
End If
 result = CallByNameFixParamArray(VV, FN$, VbMethod, var1(), var2(), items, retobject, namarg)
Else
 result = CallByNameFixParamArray(VV, FN$, VbMethod, var1(), var2(), 0, retobject, namarg)
End If
If Not retobject Is Nothing Then
     If IsLabelSymbolNew(rest$, "ÙÓ", "AS", language) Then
             glob = IsLabelSymbolNew(rest$, "ÃÅÍÉÊÇ", "GLOBAL", language)
             If Abs(IsLabel(bstack, rest$, what$)) = 1 Then
                                If GetVar(bstack, what$, it) Then
                                    Set var(it) = retobject
                                Else
                                    it = GlobalVar(what$, 0, glob)
                                    Set var(it) = retobject
                                End If
            End If
     End If
Else
     If IsLabelSymbolNew(rest$, "ÙÓ", "AS", language) Then
             glob = IsLabelSymbolNew(rest$, "ÃÅÍÉÊÇ", "GLOBAL", language)
             Select Case Abs(IsLabel(bstack, rest$, what$))
             Case 1
                                If GetVar(bstack, what$, it) Then
                                    var(it) = CDbl(result)
                                    
                                Else
                                    GlobalVar what$, CDbl(result), glob
                                    
                                End If
              Case 4
                                If GetVar(bstack, what$, it) Then
                                    var(it) = Int(CDbl(result))
                                Else
                                    GlobalVar what$, Int(CDbl(result)), glob
                                    
                                End If
              Case 3
              If GetVar(bstack, what$, it) Then
                                    var(it) = CStr(result)
                                Else
                                    GlobalVar what$, CStr(result), glob
                                    
                                End If
              End Select
            
    End If
End If
End Sub
Sub RealMeth(bstack As basetask, rest$, var2() As Variant, var3() As String, NoNameditems As Long, namedargument As Long)
'  testmeth "122,&beta,121,alfa:=a+4, beta:=122"
Dim s$, l$
Dim trap As Long, ss$, p As Double, items As Long
Do
again:
s$ = aheadstatus(rest$, True) + " "

Select Case Left$(s$, 1)
Case "S"
If (trap Mod 2 = 0) And namedargument > 0 Then Exit Do  ' is a fault
        If IsStrExp(bstack, rest$, ss$) Then
            var2(items) = ss$
           If namedargument = 0 Then NoNameditems = NoNameditems + 1
        Else
            var2(items) = ""
            s$ = ""
        End If
        If trap > 0 Then trap = trap + 1
        items = items + 1
        If UBound(var2()) < items Then ReDim Preserve var2(items + 1)
Case "N"


        ' maybe is a named argument
        l$ = rest$
        If IsLabel(bstack, l$, ss$) Then
                If IsOperator(l$, ":=") Then
                    'push name to
                    namedargument = namedargument + 1
                    If UBound(var3()) < namedargument Then ReDim Preserve var3(namedargument + 1)
                    var3(namedargument) = ss$
                    
                    trap = 1
                    rest$ = l$
                    GoTo again
                Else
                       If Not ((trap Mod 2 = 0) And namedargument > 0) Then
                            
                            If IsExp(bstack, rest$, p) Then
                                 var2(items) = p
                                If namedargument = 0 Then NoNameditems = NoNameditems + 1
                                  If trap > 0 Then trap = trap + 1
                             Else
                             
                             End If
                        Else
                        Exit Do
                        End If
                End If
        Else
                If Not ((trap Mod 2 = 0) And namedargument > 0) Then
                         If IsExp(bstack, rest$, p) Then
                             var2(items) = p
                             If namedargument = 0 Then NoNameditems = NoNameditems + 1
                              If trap > 0 Then trap = trap + 1
                         Else
                                 Exit Do
                         End If
                 Else
                             Exit Do
                 End If
    End If
        items = items + 1
        If UBound(var2()) < items Then ReDim Preserve var2(items + 1)
End Select
If Not FastSymbol(rest$, ",") Then Exit Do
Loop Until s$ = ""

End Sub
Sub TestMeth(rest$)
'  testmeth "122,&beta,121,alfa:=a+4, beta:=122"
Dim s$, y1 As Long, l$, namedargument As Long
Dim trap As Long
Do
s$ = aheadstatus(rest$, True, y1)
''Debug.Print s$, Mid$(rest$, 1, y1 - 1)
If s$ <> "" Then
    l$ = Mid$(rest$, 1, y1 - 1)
    rest$ = Mid$(rest$, y1)
End If
If FastSymbol(rest$, ":=") Then

namedargument = namedargument + 1
trap = 0
ElseIf FastSymbol(rest$, ",") Then
trap = trap + 1
If trap > 1 And namedargument > 0 Then
''Debug.Print "error...no normal after namedvariablesl"
Exit Sub
End If
End If
y1 = 1
Loop Until s$ = ""
End Sub
Function ReadProp(fromIndex As Long, ByVal propIndex As Long) As Variant
Dim o As Object, er$
Set o = var(fromIndex)
er$ = ""
ReadProp = ReadOneParameter(o, propIndex, er$)
If er$ <> "" Then
BadGetProp
End If
End Function
Sub WriteProp(fromIndex As Long, ByVal propIndex As Long, Anyval As Variant)
Dim o As Object, er$
Set o = var(fromIndex)
ChangeOneParameter o, propIndex, Anyval, er$
If er$ <> "" Then
BadLetProp
End If
End Sub

Sub MakeThisSub(ThatStack As basetask, rest$)

If Left$(rest$, 5) = "THIS." Then

    If ThatStack.GroupName = "" Then
        rest$ = ThatStack.UseGroupname & Mid$(rest$, 6)
    Else
        rest$ = ThatStack.GroupName & Mid$(rest$, 6)
    End If

ElseIf Left$(rest$, 5) = "ÁÕÔÏ." Then

If ThatStack.GroupName = "" Then
    rest$ = ThatStack.UseGroupname & Mid$(rest$, 6)

Else

    rest$ = ThatStack.GroupName & Mid$(rest$, 6)
End If

Else

End If
End Sub

Sub MakeThisSubNum(ThatStack As basetask, rest$)
If Left$(rest$, 5) = "THIS." Then
    If ThatStack.UseGroupname <> "" Then
        rest$ = ThatStack.UseGroupname & Mid$(rest$, 6)
    Else
        rest$ = ThatStack.GroupName & Mid$(rest$, 6)
    End If
ElseIf Left$(rest$, 5) = "ÁÕÔÏ." Then
    If ThatStack.UseGroupname <> "" Then
       rest$ = ThatStack.UseGroupname & Mid$(rest$, 6)
    Else
        rest$ = ThatStack.GroupName & Mid$(rest$, 6)
    End If
End If

End Sub

Function ColorRGB(bstack As basetask, n$, r As Double) As Boolean
Dim r2 As Double, r3 As Double, ss$, par As Boolean
ColorRGB = True
    If IsExp(bstack, n$, r) Then
            
            r = mycolor(r)
            par = True
            If FastSymbol(n$, ",") Then
            par = IsExp(bstack, n$, r2)
            If par And FastSymbol(n$, ",") Then
            par = IsExp(bstack, n$, r3)
            End If
            r = rgb(Abs(r Mod 256), Abs(r2 Mod 256), Abs(r3 Mod 256))
            End If
            If Not par Then ColorRGB = False: Exit Function
    ElseIf IsStrExp(bstack, n$, ss$) Then
            ' value in hexadecimal input as in html RGB
            ' we have to make BGR
    
            ss$ = Right$("00000000" & ss$, 8)
   r = CDbl(UNPACKLNG(Right$(ss$, 2)) * 65536#) + CDbl(UNPACKLNG(Mid$(ss$, 5, 2)) * 256#) + CDbl(UNPACKLNG(Mid$(ss$, 3, 2)))
   
         
             Else
              ColorRGB = False
              
    End If
End Function

Function globalArrByPointer(bs As basetask, basestack As basetask, what$, Optional newonly As Boolean = False) As Boolean
Dim pppp As mArray, myobject As Object
   If bs.IsObjectRef(myobject) Then
   If newonly Then GoTo there1
             If neoGetArray(basestack, what$, pppp) Then ''basestack.GroupName &
             If Not pppp Is Nothing Then
                myobject.CopyArray pppp
                Set myobject = Nothing
                globalArrByPointer = True
                End If
            Else
there1:
      
                GlobalArr basestack, basestack.GroupName & what$, "", 0, -1
                If neoGetArray(basestack, what$, pppp) Then  ''basestack.GroupName &
                   myobject.CopyArray pppp
                   Set myobject = Nothing
                   globalArrByPointer = True
                End If
                
             End If
      
    End If
End Function

Public Sub CopyGroup(mg As Variant, bstack As basetask)
Dim mgroup As Group
Set mgroup = mg
Dim name$, k As Group, I As Long, j As Long, s$, v As Variant, W3 As Long
Dim b$(), vvl As Variant, delme As Document, myArray As mArray, mySecondArray As mArray
Dim c$(), arrIndex As Long, choose$
Set k = New Group
Set k.Sorosref = mgroup.soros.Copy

Dim BI As Long
BI = 1

I = mgroup.soros.Total
k.BeginFloat I + 2
k.PokeItem 0, "Variables-Arrays"
k.PokeItem 1, I
For j = 2 To I * 2 + 1 Step 2
'Debug.Print k.soros.StackItem(BI)
b$() = Split(k.soros.StackItem(BI), " ")
If Right$(b$(0), 1) = ")" Then
b$(0) = Left$(b$(0), Len(b$(0)) - 1)

End If
If Right$(b$(0), 1) <> "(" Then

k.PokeItem j, b$(0)

If Typename(var(Val(b$(1)))) = doc Then 'preserve Documents
 MakeitObject vvl
 vvl.EmptyDoc
 vvl.textDoc = var(Val(b$(1))).textDoc
 k.PokeItem j + 1, vvl
ElseIf Typename(var(Val(b$(1)))) = "Group" Then
MakeitObject2 vvl

vvl.GroupName = var(Val(b$(1))).GroupName


CopyGroup var(Val(b$(1))), bstack
Set vvl = bstack.LastObj
Set bstack.LastObj = Nothing
k.PokeItem j + 1, vvl

Else
k.PokeItem j + 1, var(Val(b$(1)))
End If
Else


If Val(b$(1)) = 0 Then
Set vvl = New mArray
ElseIf Typename$(var(Val(b$(1)))) = "Empty" Then

Else
Set myArray = var(Val(b$(1)))

Set mySecondArray = New mArray
myArray.CopyArray mySecondArray
mySecondArray.arrname = myArray.arrname
Set vvl = mySecondArray
Set myArray = Nothing
End If
k.PokeItem j, b$(0) + ")"
 k.PokeItem j + 1, vvl
Set vvl = Nothing


End If
BI = BI + 1
Next j
k.PokeItem j, mgroup.LocalList
k.PokeItem j + 1, GetFunctionList(mgroup.FuncList)
Set bstack.LastObj = k
'groupname-Varlist-FuncList-ArrList not used
End Sub

Sub UnFloatGroup(bstack As basetask, what$, I As Long, myobject As Object)
While Right$(what$, 1) = "."
what$ = Left$(what$, Len(what$) - 1)
Wend
If Trim$(what$) = "" Then Exit Sub
 Dim ps As mStiva, v As Long, s$, frm$, vvl As Variant, x1 As Long, ss$, frmarr$, sss$, j As Long
 Dim grtype As Variant, ps2push As String
 Set var(I) = New Group
 Set ps = var(I).soros
 Dim subgroup As Object, pppp As mArray
 Dim ohere$, oldgroupname$
 ohere$ = HERE$

If bstack.UseGroupname <> "" Then
HERE$ = ""
End If
 oldgroupname$ = bstack.GroupName
    If bstack.GroupName <> "" Then
  bstack.GroupName = bstack.GroupName & what$ & "."
  Else
  bstack.GroupName = what$ & "."
  End If

With myobject
            If .IamFloatGroup Then
                    .PeekItem 0, grtype
                    .PeekItem 1, vvl
                    For x1 = 2 To 1 + vvl * 2 Step 2
                            .PeekItem x1, vvl    'here is the name
                          '  Debug.Print "Preek one from UnFloatGroup to "; what$; "  <- "; vvl
                                                    
                            s$ = vvl

                            
                                     If HERE$ = "" Then
                                        ps2push = bstack.GroupName + s$
                                        Else
                                        ps2push = HERE$ + "." + bstack.GroupName + s$
                                        End If
              
                            
                            .PeekItem x1 + 1, vvl  'here is the value

                                       If InStr(s$, ".") = 0 Then

                            If Typename(vvl) = "mArray" Then
                                            s$ = Left$(s$, Len(s$) - 1)
                                            ss$ = ""
                                            If Not neoGetArrayLinkOnly(bstack, s$, I) Then  ''
                                                    Set subgroup = vvl
                                                    j = -1
                                                    GlobalArr bstack, s$, ss$, 0, j ''bstack.GroupName &
                                                    Set pppp = var(j)
                                                    subgroup.CopyArray pppp
                                                    Set subgroup = Nothing
                                            End If
                                           
                                        '   Debug.Print "push", s$ + ")" + Str$(j)
                                         '   ps.DataStr s$ + ")" + Str$(j) '' s$ + " " + ss$ '
                                            ps.DataStr s$ + Str$(j)  '' s$ + " " + ss$ '
                                            
                            Else  ' is not array so...

                                                   
                     
                                            If Typename(vvl) = "Group" Then
                                            Dim spare As Object
                                            If Left$(s$, 1) = "*" Then
                                            
                                             v = GlobalVar(bstack.GroupName & Mid$(s$, 2), 0)
                                                   Set spare = vvl
                                                        UnFloatGroup bstack, Mid$(s$, 2), v, spare
                                                    '    vvl.EndFloat
                                                        Set spare = Nothing
                                             ps.DataStr s$ + Str(v) ' ps2push + Str(V)
                                             Else
                                             
                                             
                                             
                                             v = GlobalVar(bstack.GroupName & s$, 0)
                                                 Set spare = vvl
                                                        UnFloatGroup bstack, s$, v, spare
                                                    '    vvl.EndFloat
                                                        Set spare = Nothing
                                             
                                              ps.DataStr "*" + s$ + Str(v) ' ps2push + Str(V)
                                             End If
                                                        
                                                  
                                                      
                                            Else

                                            If Right$(s$, 2) = "()" Then
                                            s$ = Left$(s$, Len(s$) - 1)
                                            End If
                                    
                                                 v = GlobalVar(bstack.GroupName & s$, 0)
                                 
                                                        If IsObject(vvl) Then
                                                                    Set var(v) = vvl
                                                        Else
                                                                    var(v) = vvl
                                                        End If
                                                ps.DataStr s$ + Str(v) 'ps2push + Str(V)
                                            End If
                                                         ss$ = String$(16, ".")
                                                        Mid$(ss$, 1) = Str$(v)
                                                  ''      frm$ = frm$ + ss$
                                                  
                            End If
                            End If  ' rom instr
                 Next x1
           
                        If ohere$ = "" Or bstack.UseGroupname <> "" Then
                        HERE$ = ""
                        Else
                        HERE$ = ohere$
                        End If
              
              .PeekItem x1, vvl
     
              If Trim$(vvl) <> "" Then
              s$ = CStr(vvl)

                 ExecuteVarOnly bstack, what$, I, s$, 1
              End If
                .PeekItem x1 + 1, vvl
               
              If Trim$(vvl) <> "" Then
              s$ = CStr(vvl)
           
                bstack.GroupName = ""
              While s$ <> ""
                 If ohere$ = "" Or bstack.UseGroupname <> "" Then
               HERE$ = oldgroupname$ + what$
              Else
              HERE$ = ohere$ + "." + oldgroupname$ + what$
              End If
              
              ''Execute bstack, s$, (True)
          x1 = IsLabelA("", s$, ss$)
        
             If x1 <> 0 Then
                sss$ = s$
                If Len(ss$) > 6 Then
                        x1 = IsLabelA("", s$, ss$)
                        If Identifier(bstack, "@FUNCTION", sss$) Then  '' >6 len for function
                        x1 = bstack.IndexSub
                                              var(I).FuncList = Chr$(1) + Chr$(2) + ss$ + "()" + Str(x1) + Chr$(1) + var(I).FuncList
                                              sbf(x1).sbgroup = HERE$ + "."
                        Else
                        x1 = 0
                         End If
                       
                      
                Else
                        x1 = IsLabelA("", s$, ss$)
                        If Identifier(bstack, "@MODULE", sss$) Then
                         x1 = bstack.IndexSub
                              var(I).FuncList = Chr$(1) + Chr$(2) + ss$ + Str(x1) + Chr$(1) + var(I).FuncList
                              sbf(x1).sbgroup = HERE$ + "."
                      Else
                        x1 = 0
                       End If
                End If
                
       
                sss$ = NLtrim$(sss$) + " "
                While Asc(sss$) = 13
                    SetNextLine sss$
                    sss$ = NLtrim$(sss$) + " "
                Wend
                    If bstack.UseGroupname <> "" Then
                                HERE$ = ""
                    Else
                            HERE$ = ohere$
                    End If
               
                s$ = sss$
              Else
              s$ = ""
              End If
              Wend

              End If
                 End If
                End With
                With var(I)
                 .GroupName = what$ + "."
                 .FloatGroupName = myobject.FloatGroupName
              '  .Varlist = frm$
          '      .ArrList = frmarr$
                
         
                End With
            
            HERE$ = ohere$
             bstack.GroupName = oldgroupname$
End Sub
Sub UnFloatGroupReWriteVars(bstack As basetask, what$, I As Long, myobject As Object)
While Right$(what$, 1) = "."
what$ = Left$(what$, Len(what$) - 1)
Wend
If Trim$(what$) = "" Then Exit Sub
 Dim ps As mStiva, v As Long, s$, frm$, vvl As Variant, x1 As Long, ss$, frmarr$, sss$, j As Long
 Dim grtype As Variant, ps2push As String, tt As Long, ff$
 Set ps = var(I).soros
 Dim subgroup As Object, pppp As mArray
 Dim ohere$, oldgroupname$
 ohere$ = HERE$
If bstack.UseGroupname <> "" Then
' check this please..
HERE$ = ""
End If
 oldgroupname$ = bstack.GroupName
 
    If bstack.GroupName <> "" Then
  bstack.GroupName = bstack.GroupName & what$ & "."
  Else
  bstack.GroupName = what$ & "."
  End If

             With myobject
             If Not .IamFloatGroup Then

             GoTo exithere1
             End If
                If .IamFloatGroup Then
                 .PeekItem 0, grtype
                 
                 .PeekItem 1, vvl
                    For x1 = 2 To 1 + vvl * 2 Step 2
                            .PeekItem x1, vvl    'here is the name
                    
                            
                            s$ = vvl
                            
                                        If HERE$ = "" Then
                                        ps2push = bstack.GroupName + s$
                                        Else
                                        ps2push = HERE$ + "." + bstack.GroupName + s$
                                        End If
                            
                            .PeekItem x1 + 1, vvl  'here is the value

                            If Typename(vvl) = "mArray" Then
                                            s$ = Left$(s$, Len(s$) - 1)
                                            ss$ = ""
                                            If Not neoGetArrayLinkOnly(bstack, s$, j) Then  ''
                                            j = -1
                                                    Set subgroup = vvl
                                                    GlobalArr bstack, s$, ss$, 0, j
                                                    Set pppp = var(j)
                                                    subgroup.CopyArray pppp
                                                    Set subgroup = Nothing
                                            Else
                                            Set subgroup = vvl
                                                    Set pppp = var(j)
                                                    subgroup.CopyArray pppp
                                                    Set subgroup = Nothing
                                            End If
                                            tt = ps.Total
                                          '  ps.DataStrUn s$ + ")" + Str$(j)
                                            ps.DataStrUn s$ + Str$(j)
                                           ' If Not tt = ps.Total Then frmarr$ = frmarr$ + ff$ + ss$
                                            
                                            
                            Else  ' is not array so...
                                  If GetVar(bstack, bstack.GroupName & s$, v) And HERE$ = "" Then
                                  ' this needed for "a<=b"  a copy to a global group
                                
                                                ElseIf Not GetVar(bstack, s$, v) Then
                                                        v = GlobalVar(bstack.GroupName & s$, 0)
                                            End If
                                            If Typename(vvl) = "Group" Then
                                                        Dim spare As Object
                                                        Set spare = vvl
                                                                    If Typename(var(v)) <> "Group" Then
                                                                                UnFloatGroup bstack, s$, v, spare
                                                                    Else
                                                                                UnFloatGroupReWriteVars bstack, s$, v, spare
                                                                    End If
                                           
                                                        Set spare = Nothing
                                                                  tt = ps.Total
                              
                                                         ps.DataStrUn "*" + s$ + Str(v)  'ps2push + Str(v)
                                            Else
                                                        If IsObject(vvl) Then
                                                                    Set var(v) = vvl
                                                        Else
                                                                    var(v) = vvl
                                                        End If
                                                         tt = ps.Total
                                                             ps.DataStrUn s$ + Str(v)  'ps2push + Str(v)
                                            End If
                                                     If Not tt = ps.Total Then
                                                       ' ss$ = String$(16, ".")
                                                        'Mid$(ss$, 1) = Str$(v)
                                                        'frm$ = frm$ + ff$ + ss$
                                       End If

                            End If
                 Next x1
                End If
                 If ohere$ = "" Or bstack.UseGroupname <> "" Then
                                HERE$ = ""
              Else
                                 HERE$ = ohere$
              End If
              
              .PeekItem x1, vvl
              If Trim$(vvl) <> "" Then
              s$ = CStr(vvl)
                   ExecuteVarOnly bstack, what$, I, s$, 1
              End If
                .PeekItem x1 + 1, vvl
               
              If Trim$(vvl) <> "" Then
              s$ = CStr(vvl)
           
                bstack.GroupName = ""
              While s$ <> ""
                 If ohere$ = "" Or bstack.UseGroupname <> "" Then
               HERE$ = oldgroupname$ + what$
              Else
     HERE$ = ohere$ + "." + oldgroupname$ + what$
              End If
              
              ''Execute bstack, s$, (True)
          x1 = IsLabelA("", s$, ss$)
        
             If x1 <> 0 Then
                sss$ = s$
                If Len(ss$) > 6 Then
                        x1 = IsLabelA("", s$, ss$)
                        If Identifier(bstack, "@FUNCTION", sss$) Then  '' >6 len for function
                        x1 = bstack.IndexSub
                                              var(I).FuncList = Chr$(1) + Chr$(2) + ss$ + "()" + Str(x1) + Chr$(1) + var(I).FuncList
                                              sbf(x1).sbgroup = HERE$ + "."
                        Else
                        x1 = 0
                         End If
                       
                      
                Else
                        x1 = IsLabelA("", s$, ss$)
                        If Identifier(bstack, "@MODULE", sss$) Then
                         x1 = bstack.IndexSub
                              var(I).FuncList = Chr$(1) + Chr$(2) + ss$ + Str(x1) + Chr$(1) + var(I).FuncList
                              sbf(x1).sbgroup = HERE$ + "."
                      Else
                        x1 = 0
                       End If
                End If
                
       
                sss$ = NLtrim$(sss$) + " "
                While Asc(sss$) = 13
                    SetNextLine sss$
                    sss$ = NLtrim$(sss$) + " "
                Wend
                        If bstack.UseGroupname <> "" Then
                    HERE$ = ""
                    Else
                                  HERE$ = ohere$
                    End If
               
                s$ = sss$
              Else
              s$ = ""
              End If
              Wend

              End If
             
             ''\   .EndFloat
                   
                
                
                End With
                With var(I)
    
             
                
         
                End With
exithere1:
            HERE$ = ohere$
             bstack.GroupName = oldgroupname$

End Sub
Function GetFunctionList(ByVal s$) As String
Dim c$, f$, k$(), b$(), q$(), dd$, qq$
While s$ <> ""
If ISSTRINGA(s$, c$) Then
k$() = Split(c$, " ")
qq$ = RTrim$(sbf(Val(k$(1))).sb)
If qq$ <> "" Then
    If Right$(qq$, 2) <> vbCrLf Then qq$ = qq$ + vbCrLf
End If
If Right$(k$(0), 1) = ")" Then


f$ = "Function " + Mid$(k$(0), 2, Len(k$(0)) - 3) + " {" + qq$ + "}" + vbCrLf + f$
Else


f$ = "Module " + Mid$(k$(0), 2, Len(k$(0)) - 1) + " {" + qq$ + "}" + vbCrLf + f$
End If
End If

Wend
GetFunctionList = f$
End Function

Sub MakeMyTitle(s$, lang As Long)
     If InStr(s$, "(") > 0 Then
            If shortlang Then
            If lang Then Form1.TEXT1.title = "F. " + s$ + " F12 " Else Form1.TEXT1.title = "Ó. " + s$ + " "
            Else
            If lang Then Form1.TEXT1.title = "Function " + s$ + " F12 " Else Form1.TEXT1.title = "ÓõíÜñôçóç " + s$ + " "
            End If
            Else
            If shortlang Then
            If lang Then Form1.TEXT1.title = "M. " + s$ + " F12 " Else Form1.TEXT1.title = "Ô. " + s$ + " "
            Else
            If lang Then Form1.TEXT1.title = "Module " + s$ + " F12 " Else Form1.TEXT1.title = "ÔìÞìá " + s$ + " "
            End If
            End If
End Sub
Function SBcode(I As Long) As String
SBcode = sbf(I).sb
End Function
Function GlobalGroup(basestack As basetask, rest$, lang As Long) As Boolean
Dim ohere$
ohere$ = HERE$
HERE$ = "" ' this is global......
If lang Then
 GlobalGroup = Identifier(basestack, "@GROUP", rest$)
Else
 GlobalGroup = Identifier(basestack, "@ÏÌÁÄÁ", rest$)
End If
HERE$ = ohere$

End Function
Function GlobalMoveGroup(bstack As basetask, w$) As Boolean

Dim myobject As Object, r1 As Long, p As Double
                           r1 = GlobalVar(w$, p)
                                        Set myobject = bstack.LastObj
                                        Set bstack.LastObj = Nothing
                                        If r1 <> 0 Then
                                        
                                            If Typename(var(r1)) = "Group" Then
                                 
                                            UnFloatGroupReWriteVars bstack, w$, r1, myobject
                                            Else
                         
                                        UnFloatGroup bstack, w$, r1, myobject
                                                 ' global??
                                        Set myobject = Nothing
                                    
                                            End If
                                                         
                                            
                                        End If

End Function
Function dimString(typo$) As String
Dim pppp As mArray, PP, I As Long, p
Dim b$(), vl$
b$() = Split(typo$, " ")

Set pppp = var(Val(b$(1)))
      pppp.SerialItem PP, CLng(p), 5
         Dim a$()
         ReDim a$(PP)
      For I = 0 To PP - 1
      pppp.SerialItem p, I, 6
      a$(I) = CStr(p)
      Next I
      pppp.SerialItem p, CLng(0), 2
      If InStr(b$(0), "$") > 0 Then
      vl$ = "{" + CStr(p) + "} "
      Else
      vl$ = CStr(p) + " "
      End If
      If PP > 1 Then
      dimString = b$(0) + Join(a$(), ",") + ")=" + vl$
      Else
      dimString = b$(0) + a$(0) + ")=" + vl$
      End If
End Function
Sub LogGroup(bstack As basetask, vvv As Long, ohere$, OvarnameLen As Long, OarrnameLen As Long, lcl As Boolean)
Dim ss$, w$, I As Long, nm$, nt$, CM$, nt1$, j As Long, k As Long, dropit As Long
Dim s() As String
      With var(vvv)

  
        
        If HERE$ <> "" Then
        w$ = UCase(HERE$ & "." & ohere$ & ".")
        Else
        w$ = UCase(ohere$ & ".")
        End If
            If OvarnameLen <= varhash.Count Then
                    
            For I = OvarnameLen To varhash.Count  ' or not
            
                 varhash.ReadVar I - 1, ss$, dropit
                 
                If Left(ss$, Len(w$)) = w$ Then
                j = dropit
                    nt$ = Typename$(var(j))
                 If Not lcl Then
                                         If nt$ = "Group" Then
                                        .soros.DataStr "*" + Mid$(ss$, Len(w$) + 1) + Str(j)
                                        Else
                                        .soros.DataStr Mid$(ss$, Len(w$) + 1) + Str(j)
                                       
                                        End If
                            Else
                             nm$ = Mid$(ss$, Len(w$) + 1)
                          
                                If nt1$ <> nt$ Then .LocalList = .LocalList + vbCrLf: CM$ = ""
                           If I = OvarnameLen Then CM$ = "Local " Else CM$ = ", "
                           If nt$ = "Long" Then
                           If CM$ = "," Then nt1$ = "" Else nt1$ = nt$ + " "
                           .LocalList = .LocalList + CM$ + nt1$ + nm$ + "=" + CStr(var(j))
                           ElseIf nt$ = "mArray" Then
                            .LocalList = .LocalList + vbCrLf + "local DIM " + dimString(nm$ + Str$(j)) + vbCrLf
                           ElseIf nt$ = doc Then
                           If CM$ = "," Then nt1$ = "" Else nt1$ = nt$ + " "
                           .LocalList = .LocalList + CM$ + nt1$ + nm$ + "=" + "{" + CStr(var(j)) + "}"
                           ElseIf InStr(nm$, "$") Then
                                .LocalList = .LocalList + CM$ + nm$ + "=" + "{" + CStr(var(j)) + "}"
                           Else
                                .LocalList = .LocalList + CM$ + nm$ + "=" + CStr(var(j))
                            End If
                            nt1$ = nt$
                End If
                End If
            Next I

            If lcl Then .LocalList = .LocalList + vbCrLf
            End If
        
           
           '
           

End With
OvarnameLen = varhash.Count + 1 'Len(VarName$) + 1   'we record ...AGAIN

End Sub
Function FindNameForGroup(bstack As basetask, w$) As Boolean
Dim ss() As String, w2 As Long
  If InStr(w$, ChrW(&H1FFF)) > 0 Then
        If InStr(w$, ".") > 0 Then
        ss() = Split(w$, ".")
            If GetVar(bstack, ss(0), w2) Then
                If Typename(var(w2)) = "Group" Then
                   If var(w2).FloatGroupName <> "" Then ss(0) = var(w2).FloatGroupName: FindNameForGroup = True
                   w$ = Join(ss(), ".")
                            If InStr(w$, ChrW(&H1FFF)) > 0 Then
                             w$ = ""
                            Else
                             FindNameForGroup = True
                             End If
                 Else
                 w$ = ""
                End If
                                 Else
                 w$ = ""
            End If
                             Else
                 w$ = ""
    End If
    End If
End Function
Sub i3MouseIcon(basestack As basetask, rest$, lang As Long)
Dim scr As Object, s$, x As Double
Set scr = basestack.Owner


If basestack.toprinter Then
    oxiforPrinter
Else
        If IsLabelSymbolNew(rest$, "ÊÑÕØÅ", "HIDE", lang) Then
                If basestack.tolayer > 0 Or basestack.toback Then
                            scr.MouseIcon = Form1.Picture2.Picture
                            scr.mousepointer = 99
                Else
                            If Not basestack.LastState Then
                                        basestack.LastState = True
                                        scr.MouseIcon = Form1.Picture2.Picture
                                        scr.mousepointer = 99
                            End If
                End If
        ElseIf IsLabelSymbolNew(rest$, "ÄÅÉÎÅ", "SHOW", lang) Then
                If basestack.tolayer > 0 Or basestack.toback Then
                 scr.mousepointer = 1
                          Set scr.MouseIcon = Nothing
                           
                
                Else
                            If basestack.LastState Then
                                    basestack.LastState = False
                                    If basestack.LastMouse1 = 99 Then
                                          s$ = CFname(basestack.LastMouse2)
                                          scr.MouseIcon = LoadPicture(GetDosPath(s$))
                                    End If
                                    scr.mousepointer = basestack.LastMouse1
                            End If
                End If
        ElseIf IsStrExp(basestack, rest$, s$) Then
                    
                If basestack.tolayer > 0 Or basestack.toback Then
                            If CFname(s$) <> "" Then
                                        s$ = CFname(s$)
                                        scr.MouseIcon = LoadPicture(GetDosPath(s$))
                                        scr.mousepointer = 99
                            End If
                Else
                            If Not basestack.LastState Then
                            s$ = CFname(s$)
                                        scr.MouseIcon = LoadPicture(GetDosPath(s$))
                                        scr.mousepointer = 99
                            Else
                                        If CFname(s$) <> "" Then
                                                s$ = CFname(s$)
                                                basestack.LastMouse1 = 99
                                                basestack.LastMouse2 = s$
                                                If Not basestack.LastState Then
                                                                scr.MouseIcon = LoadPicture(GetDosPath(s$))
                                                                scr.mousepointer = 99
                                                End If
                                        End If
                        End If
                End If
    ElseIf IsExp(basestack, rest$, x) Then
                basestack.LastState = False
                basestack.LastMouse1 = CLng(x)
                scr.mousepointer = CLng(x)
                
    Else
             MyEr "Missing  filename or icon number", "Ëåßðåé üíïìá áñ÷åßïõ Þ áñéèìüò åéêïíéäßïõ"
    End If
End If
End Sub
Function procTestMe(bstack As basetask, rest$, what$) As Boolean
Dim ss$
procTestMe = True
If FastSymbol(rest$, "!") Then
untest:
If trace Then
With Form2
If pagio$ = "GREEK" Then
.gList2.HeadLine = "¸ëåã÷ïò"
Else
.gList2.HeadLine = "Control"
End If
If TestShowCode And HERE$ <> "" Then
    Form2.gList3(2).BackColor = &H606060
Else
    Form2.gList3(2).BackColor = &H3B3B3B
    End If
.Label1(0) = ""
.Label1(1) = ""
.Label1(2) = ""
.Hide
 Set .Process = Nothing
 End With
 
STq = False
STEXIT = False
STbyST = False
trace = False
End If
Else
ss$ = ""

STq = False
STEXIT = False
STbyST = True
Form2.Show , Form1
If ISSTRINGA(rest$, ss$) Then IsSymbol rest$, ","
If HERE$ = "" Then

 TestShowSub = ""
 TestShowStart = 0
 Form2.testpad.Text = ""
 Form2.testpad.Show
 Form2.testpad.SetRowColumn 1, 1
 
 End If
MyDoEvents
' gList2.HeadLine
If ss$ <> "" Then Form2.gList2.HeadLine = Form2.gList2.HeadLine + ": " + ss$: TestShowCode = True
Form2.Label1(0) = HERE$
Form2.Label1(1) = what$
Form2.Label1(2) = GetStrUntil(vbCrLf, rest$ & vbCrLf, False)

If TestShowCode And HERE$ <> "" Then

Form2.gList3(2).BackColor = &H606060
ss$ = GetNextLine((sbf(bstack.OriginalCode).sb))
    If Left$(ss$, 10) = "'11001EDIT" Then
    
    TestShowSub = Mid$(sbf(bstack.OriginalCode).sb, Len(ss$) + 3)
    Else
     TestShowSub = ss$
     End If
     If bstack.addlen Then
     If Len(TestShowSub) - bstack.addlen > 0 Then
     TestShowStart = rinstr(Left$(TestShowSub, Len(TestShowSub) - bstack.addlen), Mid$(rest$, 2)) - 1
     Else
     TestShowStart = 1
     End If
     Else
        TestShowStart = rinstr(TestShowSub, Mid$(rest$, 2)) - 1
End If
Else
 TestShowSub = ""
 End If
 Set Form2.Process = bstack
stackshow bstack
MyDoEvents
Form1.Show , Form5

If IsLabelOnly(rest$, what$) Then
rest$ = ": " + what$ + " " + rest$
If Not trace Then
trace = True
procTestMe = Execute(bstack, rest$, True) = 1
GoTo untest
End If

End If
trace = True
End If

End Function
Function procMotionW(bstack As basetask, rest$) As Boolean
Dim x As Double, y As Double
If Not Form1.Visible Then Exit Function
procMotionW = True
Form1.Visible = True
If Form1.WindowState <> 0 Then Form1.WindowState = 0 ': mydoevents

If Form1.WindowState = 0 Then
    If Not IsExp(bstack, rest$, x) Then x = Form1.Left
    If FastSymbol(rest$, ",") Then
        If Not IsExp(bstack, rest$, y) Then procMotionW = False: Exit Function
        Else
        
        y = Form1.top
    End If
    If FastSymbol(rest$, ";") Then
    x = ((ScrX() - 1) - Form1.Width) / 2
    y = ((ScrY() - 1) - Form1.Height) / 2
    End If
' LETS MOVE
Form1.Move x, y
Form1.follow IEX, IEY
Form1.Up
If IsWine Then Sleep 10

'Form1.Refresh
End If
End Function
Function procLineSpace(bstack As basetask, rest$) As Boolean
Dim x As Double
procLineSpace = True
If IsExp(bstack, rest$, x) Then

    If CLng(x) < 0 Or CLng(x) > 60 * dv15 Then
    OutOfLimit
    Else
    x = (x \ 30) * 60
    x = CLng(x) / 2
    
   SetText bstack.Owner, CLng(x)
    
    End If
ElseIf FastSymbol(rest$, "!") Then
   SetText bstack.Owner, 4 * Screen.TwipsPerPixelY
Else
MissNumExpr
procLineSpace = False

Exit Function
End If


End Function

Function ProcLegend(basestack As basetask, rest$) As Boolean
Dim s$, frm$, p As Double, x As Double, y As Double, sx As Double, sy As Double
Dim scr As Object, prive As basket
Set scr = basestack.Owner
prive = players(GetCode(scr))
ProcLegend = True
If FastSymbol(rest$, "!") Then
ProcLegend = False
If IsStrExp(basestack, rest$, s$) Then
    ProcLegend = True
    If Not FastSymbol(rest$, ",") Then ProcLegend = False: Exit Function
    If IsExp(basestack, rest$, p) Then
    x = p
    If Not FastSymbol(rest$, ",") Then
    y = 1
    ElseIf Not IsExp(basestack, rest$, y) Then
       ProcLegend = False: Exit Function
    End If
    Else
    x = prive.mx
    If Not FastSymbol(rest$, ",") Then ProcLegend = False: Exit Function
    If Not IsExp(basestack, rest$, y) Then ProcLegend = False: Exit Function
    End If
    wPlain scr, prive, s$, (x), y - 1
End If
Else
If Not IsStrExp(basestack, rest$, s$) Then Exit Function
frm$ = s$
s$ = ""
x = 0
If FastSymbol(rest$, ",") Then
If Not IsStrExp(basestack, rest$, s$) Then Exit Function
End If
If FastSymbol(rest$, ",") Then
If Not IsExp(basestack, rest$, x) Then Exit Function
End If
If FastSymbol(rest$, ",") Then
If Not IsExp(basestack, rest$, y) Then Exit Function
If FastSymbol(rest$, ",") Then
If Not IsExp(basestack, rest$, p) Then Exit Function
If FastSymbol(rest$, ",") Then
If Not IsExp(basestack, rest$, sx) Then Exit Function
If FastSymbol(rest$, ",") Then
If Not IsExp(basestack, rest$, sy) Then Exit Function
nPlain basestack, frm$, s$, x, y, CLng(p), sx <> False, CLng(sy \ DXP)
Else
nPlain basestack, frm$, s$, x, y, CLng(p), sx <> False
End If
Else
nPlain basestack, frm$, s$, x, y, CLng(p)
End If
Else
nPlain basestack, frm$, s$, x, y
End If
Else

nPlain basestack, frm$, s$, x
End If
End If
If FastSymbol(rest$, ";") Then
''NO REFRESH
Else
If Not extreme Then If Not basestack.toprinter Then MyDoEvents1 scr
End If
PlaceBasket scr, prive
End Function
Function ProcText(basestack As basetask, what$, rest$) As Boolean
Dim x1 As Long, frm$, pa$, s$
ProcText = True
If IsSymbol(rest$, "UTF-8") Then
x1 = 2
ElseIf IsSymbol(rest$, "UTF-16") Then
x1 = 0 ' only little endian (but if something convert it to big we can read...)
Else
x1 = 3
End If

s$ = ""
If Not IsStrExp(basestack, rest$, s$) Then
If Not Abs(IsLabelOnly(rest$, s$)) = 1 Then
    ProcText = False
    Exit Function
End If
End If
FastSymbol rest$, ","
If s$ <> "" Then

If FastSymbol(rest$, "+") Then pa$ = "" Else pa$ = "new"
If FastSymbol(rest$, "{") Then frm$ = NLtrim$(blockString(rest$))
If frm$ <> "" Then
If what$ = "HTML" Then
If ExtractType(s$) = "" Then s$ = s$ & ".html"
End If
 textPUT basestack, mylcasefILE(s$), frm$, pa$, x1
Else
 textDel (mylcasefILE(s$))
 ProcText = True
 Exit Function
End If
ProcText = FastSymbol(rest$, "}")
End If
Exit Function

End Function
Function ProcPrinting(basestack As basetask, rest$, lang As Long) As Boolean
Dim xp As Printer, scr As Object
Set scr = basestack.Owner
  ProcPrinting = True
 If ThereIsAPrinter = False Then Exit Function
If IsLabelSymbolNew(rest$, "ÍÁÉ", "ON", lang) And pname <> "" And Not basestack.toprinter Then
                            basestack.toprinter = True
                            For Each xp In Printers
                            If xp.DeviceName = pname And xp.port = port Then Set Printer = xp
                            Next xp
                            getfirstpage
                            Set scr = Form1.PrinterDocument1
                            If players(-2).Xt = 0 Then
                            players(-2) = players(0)  'COPY dis
                            With players(-2)
                                .curpos = 0
                                .currow = 0
                                .XGRAPH = 0
                                .YGRAPH = 0
                            End With
                            End If
                            PlaceBasket Form1.PrinterDocument1, players(-2)
                            SetText Form1.PrinterDocument1
                            ''SetTextSZ scr, players(0).SZ
                            LCTbasket Form1.PrinterDocument1, players(-2), 0, 0
                            Printer.CurrentX = 0
                            Printer.CurrentY = 0
ElseIf IsLabelSymbolNew(rest$, "Ï×É", "OFF", lang) And basestack.toprinter Then
                    getenddoc
                    Set scr = Form1.DIS
                    basestack.toprinter = False
                    SetNormal scr
ElseIf IsLabelSymbolNew(rest$, "ÄÉÅÊÏØÅ", "BREAK", lang) And basestack.toprinter Then
                    pnum = 0
                    oprinter.ClearUp
                    Form1.PrinterDocument1.Picture = LoadPicture("")
                    Set scr = Form1.DIS
                    basestack.toprinter = False
                    SetNormal scr
                    Else
                    ProcPrinting = False
                    End If
Exit Function


End Function

Function ProcPrinter(basestack As basetask, rest$) As Boolean
Dim xp As Printer, I As Long, p As Double, x1 As Long, y1 As Long, x As Double, y As Double
Dim s$, ss$, frm$, f As Long, pa$, sx As Double, it As Long, ya As Long, AddTwipsTopL As Long
Dim scr As Object
ProcPrinter = True
Set scr = basestack.Owner
If basestack.toprinter Then Exit Function
 If ThereIsAPrinter = False Then Exit Function
If FastSymbol(rest$, "!") Then
olamazi
If ThereIsAPrinter Then
For Each xp In Printers
If xp.DeviceName = pname Then
Set Printer = xp
Exit For
End If
Next xp

If ShowProperties(Form1, Printer.DeviceName, MyDM()) Then
MyDoEvents
PrinterDim pw, ph, psw, psh, pwox, phoy
End If
End If
Exit Function
End If

If FastSymbol(rest$, "?") Then
Form1.List1.clear
For Each xp In Printers
Form1.List1.additemFast xp.DeviceName & " (" & xp.port & ")"
Next xp
For I = 0 To Form1.List1.listcount - 1
If pname & " (" & port & ")" = Form1.List1.List(I) Then Form1.List1.listindex = I
Next I
If interpret(basestack, "menu !") Then
I = InStr(Form1.List1, " (")
pname = Left$(Form1.List1, I - 1)
port = Mid$(Form1.List1, I + 2, InStr(I + 2, Form1.List1, ")") - I - 2)
End If
For Each xp In Printers
If xp.DeviceName = pname And xp.port = port Then Set Printer = xp
Next xp
ReDim MyDM(1 To 1) As Byte
Exit Function
End If
If Not IsExp(basestack, rest$, p) Then p = players(-2).SZ

If FastSymbol(rest$, ",") Then
If IsStrExp(basestack, rest$, s$) Then
For Each xp In Printers
If xp.DeviceName & " (" & xp.port & ")" = s$ Then
pname = xp.DeviceName
port = xp.port
Set Printer = xp
If FastSymbol(rest$, ",") Then
If IsStrExp(basestack, rest$, ss$) Then
LoadArray MyDM(), ss$
End If
Exit For
End If
End If
Next xp

Exit Function
End If
End If
If FastSymbol(rest$, "{") Then
ss$ = "{" & block(rest$) & "}"
frm$ = rest$
If FastSymbol(rest$, "}") Then
 If ThereIsAPrinter = False Then Exit Function
If pname = "" Then Exit Function
For Each xp In Printers
If xp.DeviceName = pname And xp.port = port Then Set Printer = xp
Next xp
getfirstpage

If players(-2).Xt = 0 Then

players(-2) = players(0)  'COPY dis
With players(-2)
players(-2).curpos = 0
players(-2).currow = 0
.SZ = CSng(p * 3)
End With
PlaceBasket Form1.PrinterDocument1, players(-2)
SetText Form1.PrinterDocument1

Else
SetTextSZ Form1.PrinterDocument1, CSng(p * 3)
LCTbasket Form1.PrinterDocument1, players(-2), 0, 0
End If

With Printer   ' for no specific reason..I have to think it again
.CurrentX = 0
.CurrentY = 0
End With
basestack.toprinter = True
it = Execute(basestack, ss$, False)
If Not basestack.toprinter Then
pnum = 0
oprinter.ClearUp
Form1.PrinterDocument1.Picture = LoadPicture("")
Else
getenddoc
End If
basestack.toprinter = False
Set scr = basestack.Owner
If it = 0 Then
If Trim(ss$) = "" Then ss$ = " "
rest$ = Left$(ss$, Len(ss$) - 1) + frm$
ProcPrinter = False
End If
End If
Else
PlainBaSket scr, players(GetCode(scr)), pname & " (" & port & ")"
crNew basestack, players(GetCode(scr))
End If
Exit Function
End Function

Function ProcLayer(basestack As basetask, rest$) As Boolean
Dim xp As Printer, I As Long, p As Double, x1 As Long, y1 As Long, x As Double, y As Double
Dim s$, ss$, frm$, f As Long, pa$, sx As Double, it As Long, W3 As Long, ya As Long, AddTwipsTopL As Long
Dim scr As Object
Dim prive As basket
ProcLayer = True
Set scr = basestack.Owner
prive = players(GetCode(scr))  ' backup
If Not IsExp(basestack, rest$, p) Then p = 0 ' dis
''If scr.name = "DIS" And basestack.tolayer = 1 Then
''basestack.tolayer = 0
''End If
W3 = basestack.tolayer
basestack.tolayer = CLng(p)


If FastSymbol(rest$, "{") Then
If p > 0 Then
f = FindSpriteByTag(CLng(p))
If f = 0 Then
    f = GetNewLayerObj(CLng(p), scr.Width, scr.Height)
    SetTextBasketBack Form1.dSprite(f), prive   ' load form prive to dSprite
    SetText Form1.dSprite(f), prive.MineLineSpace, True    'load Players() with first values
    With players(p)
    .curpos = 0
    .currow = 0
    .mysplit = 0
    .osplit = 0
    .Paper = Form1.DIS.BackColor
    .mypen = players(0).mypen
    End With
    Form1.dSprite(f).BackColor = Form1.DIS.BackColor
End If

p = f
End If
ss$ = "{" & block(rest$) & "}"
frm$ = rest$
If FastSymbol(rest$, "}") Then
If p = 0 Then
Set basestack.Owner = Form1.DIS
Else
Set basestack.Owner = Form1.dSprite(p)
End If
it = Execute(basestack, ss$, False)
MyDoEvents2 basestack.Owner
''LCTC Form1.dSprite(CInt(p)), 0, 0, -1
''if p=0 then if form1.dis.visible then form1.dis.refresh
''If Form1.dSprite(CInt(p)).Visible Then Form1.dSprite(CInt(p)).refresh
GdiFlush
basestack.tolayer = W3
Set basestack.Owner = scr

If it = 0 Then
If Trim(ss$) = "" Then ss$ = " "
rest$ = Left$(ss$, Len(ss$) - 1) + frm$
ProcLayer = False
End If
End If
End If



End Function
Function MakeForm(basestack As basetask, rest$) As Boolean
On Error Resume Next
MakeForm = True
Dim scr As Object, XX As Single, p As Double, x1 As Long, y1 As Long, x As Double, y As Double
Dim W3 As Long, W4 As Long, sx As Double, adjustlinespace As Boolean, SZ As Single
Set scr = basestack.Owner
Dim basketcode As Long, mAddTwipsTop As Long



If scr.name = "Form1" Then

Else
basketcode = GetCode(scr)
With players(basketcode)
mAddTwipsTop = .uMineLineSpace  ' the basic

If IsExp(basestack, rest$, p) Then
    If p < 10 Then p = 10
    x = 4
    XX = 4
    If scr.name = "DIS" Then
    Do
    y = CDbl(XX)
    XX = CSng(x)
    nForm basestack, XX, W3, W4, mAddTwipsTop  'using line spacing
    If XX > CSng(x) Then x = CDbl(XX)
    
    If Form1.Width < W3 * p Then Exit Do
    x = x + 0.25
    Loop
 
    
    Else
    Do
    
    y = CDbl(XX)
    XX = CSng(x)

    nForm basestack, XX, W3, W4, mAddTwipsTop  'using line spacing
    If XX > CSng(x) Then x = CDbl(XX)
    
    If scr.Width < W3 * p Then Exit Do
    
    x = x + 0.4
    Loop
    End If
    x = y
    sx = 0
   
    If FastSymbol(rest$, ",") Then
        If IsExp(basestack, rest$, sx) Then
        '' ok
        
       mAddTwipsTop = 0  ' find a new one
       players(basketcode).MineLineSpace = 0
       players(basketcode).uMineLineSpace = 0
        adjustlinespace = True
    ''    mmx = scr.Width
''mmy = scr.Height
        Else
        MakeForm = False
        MissNumExpr
        Set scr = Nothing
        Exit Function
        End If
   
End If
If FastSymbol(rest$, ";") And scr.name = "DIS" Then
adjustlinespace = False
    Form1.Move 0, 0, ScrX(), ScrY()
    Form1.BackColor = players(-1).Paper
    
Sleep 1
End If
nForm basestack, CSng(x), W3, W4, 0
Dim mmx As Long, mmy As Long
If sx = 0 Then
SZ = CSng(x)
mmx = scr.Width
 If scr.name = "DIS" Then
 mmy = CLng(mmx * Form1.Height / Form1.Width) ' WHY 3/4 ??
 Else
 mmy = scr.Width
 End If
 players(basketcode).MineLineSpace = mAddTwipsTop
 players(basketcode).uMineLineSpace = mAddTwipsTop
FrameText scr, SZ, CLng(W3 * p), mmy, players(basketcode).Paper
Else
If scr.name = "DIS" Then
If (sx * W4) > Form1.Height Then
y = Form1.Height
While sx * W4 > Form1.Height

XX = y / (dv20 * sx)

nForm basestack, XX, W3, W4, 0  'using no spacing so we put a lot of lines
x = CDbl(XX)
y = y * 0.9
Wend


End If
Else
If sx * W4 > scr.Height Then
y = scr.Height
While sx * W4 > scr.Height

XX = y / (dv20 * sx)

nForm basestack, XX, W3, W4, 0  'using no spacing so we put a lot of lines
x = CDbl(XX)
y = y * 0.9
Wend


End If

End If
If scr.name = "DIS" Then
If Not adjustlinespace Then If scr.Height >= Form1.Height - dv15 Then mAddTwipsTop = dv15 * (((scr.Height - sx * W4) / sx / 2) \ dv15)
End If
nForm basestack, (x), W3, W4, mAddTwipsTop
SZ = CSng(x)
'If mmx < scr.Width Then
mmx = scr.Width


'If mmx < scr.Width Then
mmy = scr.Height
If adjustlinespace Then
If scr.name = "DIS" Then
mAddTwipsTop = dv15 * (((Form1.Height - sx * W4) / sx / 2) \ dv15)
Else
mAddTwipsTop = dv15 * (((scr.Height - sx * W4) / sx / 2) \ dv15)
End If
sx = CLng(sx * (W4 + mAddTwipsTop * 2))
Else
sx = CLng(sx * W4)
End If
players(basketcode).MineLineSpace = mAddTwipsTop
players(basketcode).uMineLineSpace = mAddTwipsTop
FrameText scr, SZ, CLng(W3 * p), CLng(sx), players(basketcode).Paper, Not (scr.name = "DIS")


End If


ElseIf FastSymbol(rest$, ";") And scr.name = "DIS" Then
Form1.Move 0, 0, ScrX(), ScrY()
Form1.BackColor = players(-1).Paper
Form1.Cls


''x = interpret(basestack, "MOTION CENTER")
''x = interpret(basestack, "MODE" & Str$(players(GetCode(scr)).SZ) & "," & Str$(scr.Width) & "," & Str$(scr.Height))
MyMode scr
ElseIf scr.name = "DIS" Then
Form1.Move Form1.Left + scr.Left, Form1.top + scr.top, scr.Width, scr.Height
scr.Move 0, 0
Form1.Cls
SetText scr
Set scr = Nothing
Exit Function
Else
'' CROP LAYER
If basketcode > 0 Then
With players(basketcode)
.MAXXGRAPH = .mx * .Xt
.MAXYGRAPH = .My * .Yt
End With
With Form1.dSprite(basestack.tolayer)
.Move .Left, .top, players(basketcode).MAXXGRAPH, players(basketcode).MAXYGRAPH
End With

End If
End If

players(basketcode).MineLineSpace = mAddTwipsTop
players(basketcode).uMineLineSpace = mAddTwipsTop
MakeForm = True
.curpos = 0
.currow = 0

End With
End If
SetText scr


End Function
Function ProcAbout(basestack As basetask, rest$, lang As Long) As Boolean

Dim par As Long, s$, ss$, x As Double, y As Double, I As Long
Dim KK As New Document
Dim UAddPixelsTop As Long  ' just not used

If FastSymbol(rest$, "!") Then
'*******
vH_title$ = ""
par = True
par = par And IsStrExp(basestack, rest$, s$)

If par Then
If s$ = "" Then
abt = False
sHelp "", "", 0, 0
Else
par = par And FastSymbol(rest$, ",")
par = par And IsExp(basestack, rest$, x)
par = par And FastSymbol(rest$, ",")
par = par And IsExp(basestack, rest$, y)
par = par And FastSymbol(rest$, ",")
par = par And IsStrExp(basestack, rest$, ss$)

If par Then
abt = True
KK.EmptyDoc
KK.textDoc = s$
s$ = KK.textFormat(vbCrLf)
KK.EmptyDoc
KK.textDoc = s$
s$ = KK.TextParagraph(1)
KK.EmptyDoc
KK.textDoc = ss$
sHelp s$, KK.textFormat(vbCrLf), CLng(x), CLng(y)
End If
End If
End If
'*******
ElseIf IsLabelSymbolNew(rest$, "ÊÁËÅÓÅ", "CALL", lang) Then

If IsStrExp(basestack, rest$, ss$) Then
KK.textDoc = ss$
FeedbackExec$ = KK.textFormat(vbCrLf)
Else

End If
Else
If IsStrExp(basestack, rest$, s$) Then
KK.EmptyDoc
KK.textDoc = s$
s$ = KK.textFormat(vbCrLf)
KK.EmptyDoc
KK.textDoc = s$
s$ = KK.TextParagraph(1)
        I = 0
        x = (ScrX() - 1) * 2 / 5
        y = (ScrY() - 1) / 7
        If FastSymbol(rest$, ",") Then
                par = True
                    If Not IsExp(basestack, rest$, x) Then
                    x = (ScrX() - 1) * 2 / 5: par = False
                    Else
                    I = 1
                    End If
                    If FastSymbol(rest$, ",") Then
                        par = True
                        If Not IsExp(basestack, rest$, y) Then
                        y = (ScrY() - 1) / 7: par = False
                        Else
                        I = 2
                        End If
                    End If
        End If
 
        If Not Form4.Visible Then
           vH_x = CLng(x * Helplastfactor)
           vH_y = CLng(y * Helplastfactor)
           
                Form4.Show , Form1
                
                MyForm Form4, ScrX() - CLng(x * Helplastfactor), ScrY() - CLng(y * Helplastfactor), CLng(x * Helplastfactor), CLng(y * Helplastfactor), True, 1  'Helplastfactor
                HelpLastWidth = x
        ElseIf I <> 0 Then
                Form4.Show , Form1
                
                MyForm Form4, Form4.Left, Form4.top, CLng(x * Helplastfactor), CLng(y * Helplastfactor), True, Helplastfactor
        End If
       
        Form4.Line (0, 0)-(Form4.ScaleWidth - dv15, Form4.ScaleHeight - dv15), Form4.BackColor, BF
        Form4.MoveMe
        If FastSymbol(rest$, ",") Or Not par Then
        If IsStrExp(basestack, rest$, ss$) Then
        KK.EmptyDoc
        KK.textDoc = ss$
        Form4.Label1.Text = KK.textFormat(vbCrLf)
        End If
        End If
        
With Form4.Label1

.EditDoc = False
.NoMark = True
.Enabled = True
.NewTitle s$, 4 + UAddPixelsTop
.glistN.DragEnabled = False
.glistN.WordCharLeft = "["
.glistN.WordCharRight = "]"
.glistN.WordCharRightButIncluded = ""
End With
Else
vH_title$ = ""
If Form4.Visible Then
Form4.Visible = False
    If Form1.TEXT1.Visible Then
        Form1.TEXT1.SetFocus
    Else
        Form1.SetFocus
    End If
End If

End If
End If
Exit Function
End Function
Sub procthreads(scr As Object, bstack As basetask, rest$, lang As Long)

If TaskMaster.QueueCount >= 0 Then

If IsLabelSymbolNew(rest$, "ÓÂÇÓÅ", "ERASE", lang) Then TaskMaster.Dispose: Exit Sub
If lang = 0 Then
        PlainBaSket scr, players(GetCode(scr)), "NHMATA ÓÅ ÅÐÅÎÅÑÃÁÓÉÁ:" & CStr(TaskMaster.QueueCount)
        Else
        PlainBaSket scr, players(GetCode(scr)), "THREADS PROCESSING:" & CStr(TaskMaster.QueueCount)
        End If
        If bstack.ThreadsStr(lang) <> "" Then
        crNew bstack, players(GetCode(scr))
        PlainBaSket scr, players(GetCode(scr)), bstack.ThreadsStr(lang)
        End If
Else
        If lang = 0 Then
        PlainBaSket scr, players(GetCode(scr)), "ÔÉÐÏÔÁ ÓÅ ÅÐÅÎÅÑÃÁÓÉÁ"
        Else
        PlainBaSket scr, players(GetCode(scr)), "NOTHING PROCESSING"
        End If
End If
crNew bstack, players(GetCode(scr))
' was mydoevents 2
MyDoEvents1 scr
Set scr = Nothing
End Sub
Function ProcPage(basestack As basetask, rest$, lang As Long) As Boolean
ProcPage = True
Dim scr As Object, x As Double
Set scr = basestack.Owner
If basestack.toprinter Then
getnextpage
If IsNumber(basestack, rest$, x) Then
If x = 1 Then Portrait basestack Else Landscape basestack
End If
ElseIf IsNumber(basestack, rest$, x) Then
If x = 1 Then Portrait basestack Else Landscape basestack
Else
ClearScr scr, mycolor(PaperOne)
End If
Set scr = Nothing
End Function

Function ProcMotion(basestack As basetask, rest$, lang As Long) As Boolean
Dim scr As Object, x1 As Long, y1 As Long, p As Double
Set scr = basestack.Owner
ProcMotion = True
If lang = 1 And IsLabelSymbolLatin(rest$, "CENTER") Then
x1 = interpret(basestack, "MODE" & Str$(players(GetCode(scr)).SZ) & "," & Str$(scr.Width) & "," & Str$(scr.Height))
ElseIf IsLabelSymbol(rest$, "ÊÅÍÔÑÏ") Then
x1 = interpret(basestack, "MODE" & Str$(players(GetCode(scr)).SZ) & "," & Str$(scr.Width) & "," & Str$(scr.Height))

Else
If IsExp(basestack, rest$, p) Then x1 = CLng(p) Else x1 = scr.Left
If FastSymbol(rest$, ",") Then
If IsExp(basestack, rest$, p) Then
y1 = CLng(p)
Else
Set scr = Nothing
ProcMotion = False
Exit Function
End If
Else
y1 = scr.top
End If
scr.Move x1, y1
End If
 MyDoEvents1 scr
Set scr = Nothing


End Function


Function ProcCls(basestack As basetask, rest$, lang As Long) As Boolean
If basestack.toprinter Then Exit Function
Dim scr As Object, p As Double
 ProcCls = True
Set scr = basestack.Owner
If Not IsExp(basestack, rest$, p) Then p = -scr.BackColor
With players(GetCode(scr))
.Paper = mycolor(p)
If Not basestack.toprinter Then
If FastSymbol(rest$, ",") Then
    If IsExp(basestack, rest$, p) Then
    If p < 0 Then p = .My + p
        .mysplit = Int(p)
        If .mysplit >= .My Then .mysplit = 0: .pageframe = 0
        .pageframe = Int((.My - .mysplit) * 2 / 3)
    Else
        ProcCls = False
        Set scr = Nothing
        Exit Function
    End If
End If
End If

ClearScrNew scr, players(GetCode(scr)), CLng(mycolor(.Paper))   '' here 1.15 is not rgb but standard colors
''.Paper = scr.BackColor  ' Áõôü èá ãßíåé ôïõ BASESTACK
If Form4.Visible Then
vHelp
End If
End With
Set scr = Nothing
End Function

Function ProcPen(basestack As basetask, rest$, lang As Long) As Boolean
Dim scr As Object, x1 As Long, y1 As Long, p As Double, ss$, it As Long
ProcPen = True
Set scr = basestack.Owner
If IsExp(basestack, rest$, p) Then
    If FastSymbol(rest$, "{") Then
        ss$ = "{" & block(rest$) & "}"
        If FastSymbol(rest$, "}") Then
         y1 = GetCode(scr)
            x1 = players(y1).mypen
           
            players(y1).mypen = CLng(mycolor(p))
            TextColor scr, players(y1).mypen
            Call executeblock(it, basestack, ss$, False, False)

            players(y1).mypen = x1
            TextColor scr, x1
            If it <> 1 Then ProcPen = False: rest$ = Left$(ss$, Len(ss$) - 1) + rest$
        End If
    Else
    
        players(GetCode(scr)).mypen = CLng(mycolor(p))
        
        TextColor scr, CLng(mycolor(p))
    End If
Else
    ProcPen = False
End If
Set scr = Nothing
End Function
Function ProcMedia(basestack As basetask, rest$, lang As Long) As Boolean
Dim scr As Object
Dim s$, ss$, x As Double, y As Double
Set scr = basestack.Owner
On Error Resume Next
ProcMedia = True
If IsLabelSymbolNew(rest$, "ÖÏÑÔÙÓÅ", "LOAD", lang) Then
            If AVIUP Then
                  AVI.GETLOST
                  MyDoEvents
            End If
            If IsStrExp(basestack, rest$, s$) Then
                If s$ <> "" Then
                    If ExtractType(s$) = "" Then s$ = s$ & ".avi"
                    If CFname(s$) = "" Then
                        s$ = mcd & s$: If CFname(s$) = "" Then Exit Function
                    Else
                        s$ = CFname(s$)
                    End If
                Else
                    Set scr = Nothing
                    ProcMedia = True  ' ??????????
                    Exit Function
                End If
                avifile = s$
                Load AVI
                
                MediaPlayer1.playMovie
                MediaPlayer1.pauseMovie
                
                MediaPlayer1.setPositionTo 0
                Sleep 2
                MyDoEvents
                AVIRUN = False
                    If Form1.Visible Then Form1.SetFocus
                    MediaPlayer1.setLeftVolume vol * 10
                    MediaPlayer1.setRightVolume vol * 10
                    
                
            End If
            Set scr = Nothing
            ProcMedia = True
            Exit Function
            
    ElseIf AVIUP Then
    ss$ = ""
        If IsLabelSymbolNewExp(rest$, "ÄÅÉÎÅ", "SHOW", lang, ss$) Then
            'If Not AVIRUN Then MediaPlayer1.playMovie: MediaPlayer1.pauseMovie
                AVI.Show
             AVI.SetFocus
                MyDoEvents
                Set scr = Nothing
                ProcMedia = True
                Exit Function
      
        ElseIf IsLabelSymbolNewExp(rest$, "ÊÑÕØÅ", "HIDE", lang, ss$) Then
                AVI.Hide
                Set scr = Nothing
                ProcMedia = True
                Exit Function
        ElseIf IsLabelSymbolNewExp(rest$, "ÊÑÁÔÇÓÅ", "PAUSE", lang, ss$) Then
                If MediaPlayer1.isMoviePlaying Then MediaPlayer1.pauseMovie
                Set scr = Nothing
                ProcMedia = True
                Exit Function
        ElseIf IsLabelSymbolNewExp(rest$, "ÐÁÉÎÅ", "PLAY", lang, ss$) Then
        
                If Not AVIRUN Then
                AVI.Timer1.Interval = MediaPlayer1.getLengthInMS - MediaPlayer1.getPositionInMS
                AVI.Avi2Up
                End If
        
                MyDoEvents
                Set scr = Nothing
                ProcMedia = True
                Exit Function
        ElseIf IsLabelSymbolNewExp(rest$, "ÎÅÊÉÍÁ", "RESTART", lang, ss$) Then
                    If Not MediaPlayer1.isMoviePlaying Then
                    
                         MediaPlayer1.playMovie
                         
                    Else
                         MediaPlayer1.resumeMovie
                    End If
                    MyDoEvents
                    AVIRUN = False
                    Set scr = Nothing
                    ProcMedia = True
                    Exit Function
        ElseIf IsLabelSymbolNewExp(rest$, "ÓÔÏ", "TO", lang, ss$) Then
                    If IsExp(basestack, rest$, x) Then
                        If MediaPlayer1.getLengthInMS > 0 Then MediaPlayer1.setPositionTo x
                        
                    End If
                    Set scr = Nothing
                    ProcMedia = True
                    Exit Function

        End If
    End If
    ss$ = ""
' do nothing until here
If IsExp(basestack, rest$, x) Then
   
            If FastSymbol(rest$, ",") Then
    
             UseAviSize = False
    AviSizeX = 0
    AviSizeY = 0
    aviX = 0
    aviY = 0
    UseAviSize = False
    UseAviXY = True: aviX = CLng(x): aviY = 0
            If IsExp(basestack, rest$, y) Then aviY = CLng(y) Else ProcMedia = False: UseAviXY = False: aviX = 0
            Else ' SPECIAL
            If MediaPlayer1.getLengthInMS > 0 Then
                If x < 0 Then
                MediaPlayer1.pauseMovie
                AVIRUN = MediaPlayer1.isMoviePlaying
                If scr.name <> "Printer" Then
                If scr.Visible Then scr.SetFocus
                End If
                ElseIf x = 0 Then
                          
                MediaPlayer1.playMovie
                MyDoEvents
                Else
                MediaPlayer1.setPositionTo x
                End If
                ProcMedia = True
        Else
        ProcMedia = False
        End If
        Set scr = Nothing
        Exit Function
            End If
            If aviX = 0 Then UseAviXY = False
            If FastSymbol(rest$, ",") Then
                    If IsExp(basestack, rest$, x) Then AviSizeX = CLng(x) Else rest$ = "," & rest$
                If FastSymbol(rest$, ",") Then
            If IsExp(basestack, rest$, x) Then AviSizeY = CLng(x) Else rest$ = "," & rest$
                End If
                UseAviSize = (AviSizeY + AviSizeX) <> 0 Or (aviX = 0 And aviY = 0)
                
            End If
            If Not FastSymbol(rest$, ",") Then
                   If AVIUP Then
                   If UseAviXY And UseAviSize Then
                   AVI.Move aviX, aviY, AviSizeX, AviSizeY
                   MediaPlayer1.sizeLocateMovie 0, 0, Form1.ScaleX(AviSizeX, vbTwips, vbPixels), Form1.ScaleY(AviSizeY, vbTwips, vbPixels) + 1
                   ElseIf UseAviXY Then
                   AVI.Move aviX, aviY
                    End If
           Else
                   If AVIRUN Or AVIUP Then
                AVI.GETLOST
            End If
           
            End If
            Set scr = Nothing
            Exit Function
            
            End If
      
ElseIf FastSymbol(rest$, ";") Then
'MediaPlayer1.closeMovie
    UseAviXY = False
    UseAviSize = False
    AviSizeX = 0
    AviSizeY = 0
    aviX = 0
    aviY = 0
    AVI.GETLOST
Else
 
'MediaPlayer1.closeMovie
If AVIRUN Or AVIUP Then
                AVI.GETLOST
              
            End If
  
End If

Do
ProcTask2 basestack

 If Not MediaPlayer1.isMoviePlaying Then AVIRUN = False
Loop Until Not AVIRUN Or NOEXECUTION

Do While IsStrExp(basestack, rest$, s$)
If s$ <> "" Then
If ExtractType(s$) = "" Then s$ = s$ & ".avi"
    If CFname(s$) = "" Then
        s$ = mcd & s$: If CFname(s$) = "" Then Set scr = Nothing: Exit Function

    Else
        s$ = CFname(s$)
    End If
    Else
    AVI.GETLOST
    Exit Do
End If
avifile = s$
Load AVI
AVI.Avi2Up
AVI.Show
Sleep 5

If AVIRUN Then
If Form1.Visible Then Form1.SetFocus
MediaPlayer1.setLeftVolume vol * 10
MediaPlayer1.setRightVolume vol * 10

End If
If FastSymbol(rest$, ",") Then
If AVIRUN Then
Do
 AVIRUN = MediaPlayer1.isMoviePlaying
 ProcTask2 basestack
' sleep 5

Loop Until AVIRUN = False Or NOEXECUTION
End If
Else
If FastSymbol(rest$, ";") Then
If AVIRUN Then
Do
 AVIRUN = MediaPlayer1.isMoviePlaying
ProcTask2 basestack
 ' sleep 5

Loop Until AVIRUN = False Or NOEXECUTION
End If
End If
Exit Do
End If
Loop
Set scr = Nothing
Exit Function


End Function
Function ProcCat(bstack As basetask, rest$, lang As Long) As Boolean
Dim aDir As New recDir, ss$, s$, pa$, frm$, par As Boolean, I As Long, col As Long
aDir.IncludedFolders = True
aDir.Nofiles = True
aDir.TopFolder = mcd
aDir.LevelStop = 1
aDir.SortType = Abs(FastSymbol(rest$, "!")) + Abs(FastSymbol(rest$, "!"))
ProcCat = True
s$ = ""
pa$ = ""

par = lang = 1
I = FastSymbol(rest$, "+")
If FastSymbol(rest$, "*") Then
ss$ = "*"
ElseIf Not IsStrExp(bstack, rest$, ss$) Then
ss$ = ""
Else
ss$ = myUcase$(ss$)
End If
''stac1 = ""

If InStr(ss$, "?") > 0 Or InStr(ss$, "*") > 0 Then
aDir.Pattern = ss$
frm$ = mylcasefILE$(aDir.Dir2$(mcd, "", False))

Else
frm$ = mylcasefILE$(aDir.Dir2$(mcd, ss$, False))

End If

If I = False Then
    If frm$ <> "" Then
        If par Then
            pa$ = "Folders " & ss$ & ": "
        Else
            pa$ = "ÊáôÜëïãïé " & ss$ & ": "
        End If
    End If
End If
ss$ = ""
col = Len(mcd)
Do While frm$ <> ""
MyDoEvents
s$ = Mid$(frm$, col + 2)
If s$ <> "" Then
If I Then
Form1.List1.additem s$
Else
If InStr(s$, " ") > 0 Then s$ = Chr(34) + s$ + Chr(34)
If ss$ <> "" Then ss$ = ss$ & ", " & s$ Else ss$ = s$
End If
End If
s$ = aDir.Dir2
If s$ <> "" Then frm$ = s$ Else frm$ = ""
Loop
If I = False Then RepPlain bstack, bstack.Owner, pa$ + ss$

End Function
Function ProcImage(bstack As basetask, rest$, lang As Long) As Boolean
Dim photo As Object, pppp As mArray, s$, x1 As Long, y1 As Long, w$, it As Long, p As Double
ProcImage = True
If IsStrExp(bstack, rest$, s$) Then
    x1 = 0
    y1 = 0
    If Not (Left$(s$, 4) = "cDIB" And Len(s$) > 12) Then If ExtractType(s$) = "" Then s$ = s$ + ".bmp"
    If IsLabelSymbolNew(rest$, "ÓÔÏ", "TO", lang) Then
        If CFname(s$) <> "" Or (Left$(s$, 4) = "cDIB" And Len(s$) > 12) Then
            Select Case Abs(IsLabel(bstack, rest$, w$))
            Case 3
                If GetVar(bstack, w$, it) Then
                    Set photo = New cDIBSection
                    If CFname(s$) <> "" Then
                    s$ = CFname(s$)
                    On Error GoTo 0
                        photo.CreateFromPicture LoadPicture(GetDosPath(s$))
                         photo.GetDpi 96, 96
                CheckOrientation photo, s$
                        If photo.bitsPerPixel <> 24 Then Conv24 photo
                        
                        If photo.Width = 0 Then
                            Set photo = Nothing
                            MissCdib
                             ProcImage = False: Exit Function
                        End If
                    ElseIf Not cDib(s$, photo) Then
                        Set photo = Nothing
                        MissCdibStr
                         Exit Function
                    End If
                    x1 = photo.Width
                    y1 = photo.Height
                    If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then x1 = x1 * p / 100#: y1 = y1 * p / 100#
                    If FastSymbol(rest$, ",") Then
                        If IsExp(bstack, rest$, p) Then
                            y1 = photo.Height * p / 100#
                        Else
                            Set photo = Nothing
                         ProcImage = False: MissNumExpr: Exit Function
                        End If
                    End If
                    If photo.Width > 0 Then
                    Set photo = photo.Resample(Abs(y1), Abs(x1))
                        var(it) = DIBtoSTR(photo)
                    End If
                    Set photo = Nothing
                    Exit Function
                Else
                ProcImage = False
                If w$ <> "" Then
                Nosuchvariable w$
                Else
            MissingStrVar
                     End If
                End If
                Exit Function
            Case 6
    ' ÁÐÏ ÐÉÍÁÊÁ
                Dim W5 As Long
                
                If neoGetArray(bstack, w$, pppp) Then
                       
                        If Not NeoGetArrayItem(pppp, bstack, w$, W5, rest$) Then ProcImage = False: MissNumExpr: Exit Function
                     Set photo = New cDIBSection
                    If CFname(s$) <> "" Then
                    s$ = CFname(s$)
                        photo.CreateFromPicture LoadPicture(GetDosPath(s$))
                         
                        If photo.bitsPerPixel <> 24 Then
                        Conv24 photo
                        Else
                        CheckOrientation photo, s$
                        End If
                        If photo.Width = 0 Then
                            Set photo = Nothing
                             ProcImage = False: MissNumExpr: Exit Function
                        End If
                        ' load the bitmap to string array
                        If IsObject(pppp.item(W5)) Then
                        ' this is an error.we cannot push binary data to Document
                        MyEr "can't copy image to " + Typename(pppp.item(W5)), "äåí ìðïñþ íá áíôéãñÜøù åéêüíá óå " + Typename(pppp.item(W5))
                        ProcImage = False
                        Else
                        pppp.item(W5) = DIBtoSTR(photo)
                        End If
                       
                        Set photo = Nothing
                        Exit Function
                    ElseIf Not cDib(s$, photo) Then
                        Set photo = Nothing
                         ProcImage = False: MissNumExpr: Exit Function
                    End If
                    x1 = photo.Width
                    y1 = photo.Height
                    If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then x1 = x1 * p / 100#: y1 = y1 * p / 100#
                    If FastSymbol(rest$, ",") Then
                        If IsExp(bstack, rest$, p) Then
                            y1 = photo.Height * p / 100#
                        Else
                            Set photo = Nothing
                         ProcImage = False: MissNumExpr: Exit Function
                        End If
                    End If
                    If photo.Width > 0 Then
                        'resample bitmap to string array
                        Set photo = photo.Resample(y1, x1)
                           If IsObject(pppp.item(W5)) Then
                        ' this is an error.we cannot push binary data to Document
                             MyEr "can't copy image to " + Typename(pppp.item(W5)), "äåí ìðïñþ íá áíôéãñÜøù åéêüíá óå " + Typename(pppp.item(W5))

                        ProcImage = False
                        Else
                        pppp.item(W5) = DIBtoSTR(photo)
                        End If
                    End If
                    Set photo = Nothing
                    Exit Function
                Else
                     ProcImage = False: MissNumExpr: Exit Function
                End If
            End Select
        Else
        MyEr "file missing " & s$, "ëåßðåé ôï áñ÷åßï åéêüíáò " & s$
        ProcImage = False
        Exit Function
        End If
    ElseIf IsLabelSymbolNew(rest$, "ÅÎÁÃÙÃÇ", "EXPORT", lang) Then
        If IsStrExp(bstack, rest$, w$) Then
            If Not CanKillFile(w$) Then FilePathNotForUser:  Exit Function
           Set photo = New cDIBSection
           If cDib(s$, photo) Then
                If FastSymbol(rest$, ",") Then
                    If IsExp(bstack, rest$, p) Then
                        x1 = (Abs(p) - 1) Mod 100 + 1
                        
                        SaveJPG photo, ExtractPath(w$) + ExtractNameOnly(w$) & ".jpg", x1
                     Else
                        Set photo = Nothing
                         ProcImage = False: MissNumExpr: Exit Function
                    End If
                Else
                    photo.SaveDib ExtractPath(w$) + ExtractNameOnly(w$) & ".bmp"
                End If
            Else
                Set photo = Nothing
                 ProcImage = False: MissNumExpr: Exit Function
            End If
            Set photo = Nothing
            Exit Function
        Else
             ProcImage = False: MissNumExpr: Exit Function
        End If
    Else
        If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then x1 = p
        If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y1 = p Else ProcImage = False: MissNumExpr: Exit Function
        SImage bstack.Owner, x1, y1, s$
    End If
End If
End Function
Function ProcField(bstack As basetask, rest$, lang As Long) As Boolean
Dim prive As Long, pppp As mArray, s$, it As Long, x As Double, y As Double, p As Double
Dim I As Long, x1 As Long, y1 As Long, what$, par As Boolean
ProcField = True
 prive = GetCode(bstack.Owner)
  With players(prive)
        If IsLabelSymbolNew(rest$, "ÍÅÏ", "NEW", lang) Then result = 0: Exit Function
        If IsLabelSymbolNew(rest$, "ÓÕÍÈÇÌÁ", "PASSWORD", lang) Then I = True
    
        If Not IsExp(bstack, rest$, x) Then x = .curpos
        If Not FastSymbol(rest$, ",") Then Exit Function
        If Not IsExp(bstack, rest$, y) Then y = .currow
        If FastSymbol(rest$, ",") Then
        If Not IsExp(bstack, rest$, p) Then Exit Function
        p = Int(p)
        End If
        If Not IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then Exit Function
        Select Case Abs(IsLabel(bstack, rest$, what$))
        Case 3
            par = False
            If Not GetVar(bstack, what$, it) Then it = GlobalVar(what$, String$(CLng(p), 32))
            s$ = var(it)
        Case 6
                 par = True
                If neoGetArray(bstack, what$, pppp) Then If Not NeoGetArrayItem(pppp, bstack, what$, it, rest$) Then Exit Function
                s$ = pppp.item(it)
        Case Else
        Exit Function
        End Select
        If p = 0 And s$ = "" Then Exit Function
        If p = 0 Then p = Len(s$)
        s$ = Left$(s$, p)
        s$ = s$ & String$(p - Len(s$), " ")
        x1 = 1
        
        s$ = gf(bstack, y, x, s$, x1, y1, CBool(I))
        
        
        If y1 <> 99 Then
        LCTbasket bstack.Owner, players(prive), y + 1, 0
        End If
        result = y1
        If par Then
                If Typename(pppp.item(it)) = doc Then
            Set pppp.item(it) = New Document
            If s$ <> "" Then pppp.item(it).textDoc = s$
            Else
            pppp.item(it) = s$
            End If
        Else
        CheckVar var(it), s$
        End If
        Exit Function
End With
End Function
Function ProcFiles(bstack As basetask, rest$, lang As Long) As Boolean
Dim aDir As New recDir, ss$, pa$, s$, par As Boolean, stac1 As String, frm$, I As Long
ProcFiles = True
aDir.IncludedFolders = False
aDir.Nofiles = False
aDir.TopFolder = mcd
aDir.SortType = Abs(FastSymbol(rest$, "!")) + Abs(FastSymbol(rest$, "!"))

s$ = ""
pa$ = ""

par = lang = 1
I = FastSymbol(rest$, "+")
If FastSymbol(rest$, "*") Then
ss$ = "*"
ElseIf Not IsStrExp(bstack, rest$, ss$) Then
ss$ = "TXT"
Else
ss$ = myUcase$(ss$)
End If
stac1 = ""
If FastSymbol(rest$, ",") Then
' SEARCH INSIDE FILE
If Not IsStrExp(bstack, rest$, stac1$) Then SyntaxError: Exit Function
End If

If InStr(ss$, "?") > 0 Or InStr(ss$, "*") > 0 Then
aDir.Pattern = ss$
frm$ = mylcasefILE$(aDir.Dir2$(mcd, "", False))
'frm$ = mylcasefILE$(Dir(mcd + mylcasefILE(sS$)))
Else
frm$ = mylcasefILE$(aDir.Dir2$(mcd, ss$, False))
'frm$ = mylcasefILE$(Dir(mcd & "*." & sS$))
End If

If I = False Then
    If frm$ <> "" Then
        If par Then
            If stac1 <> "" Then
            pa$ = "Files " & ss$ & " with text " & Chr(34) + stac1 + Chr(34) & " :  "
            Else
            pa$ = "Files " & ss$ & ": "
            End If
        Else
            If stac1 <> "" Then
            pa$ = "Áñ÷åßá " & ss$ & " ìå êåßìåíï " & Chr(34) + stac1 + Chr(34) & " :  "
            
            Else
            pa$ = "Áñ÷åßá " & ss$ & ": "
            End If
        End If
    End If
Else
   ' Form1.List2.clear
End If
ss$ = ""
Do While frm$ <> ""
MyDoEvents

If Right$(" " & aDir.Pattern, 1) <> "*" Then
s$ = ExtractNameOnly(Included(mcd + frm$, stac1))
Else
s$ = Included(mcd + frm$, stac1)
End If
If s$ <> "" Then
If I Then
If Right$(" " & aDir.Pattern, 1) <> "*" Then
Form1.List1.additem s$
Else
Form1.List1.additem s$
End If
Else

If ss$ <> "" Then ss$ = ss$ & ", " & s$ Else ss$ = s$
End If
End If
s$ = aDir.Dir2
If s$ <> "" Then frm$ = s$ Else frm$ = ""
Loop
If I = False Then
RepPlain bstack, bstack.Owner, pa$ + ss$
End If
End Function

Function ProcEdit(basestack As basetask, rest$, lang As Long) As Boolean
Dim s$, x1 As Long, y1 As Long, o As Long, frm$, I As Long, par As Long, p As Double
Dim scr As Object, ss$
ProcEdit = True
Set scr = basestack.Owner
Form1.EditTextWord = False ' edit code

s$ = aheadstatus(rest$, False, y1)
If y1 > 2 And Left$(s$, 1) = "S" Then
If Mid$(rest$, y1 - 1, 1) = "(" Or Mid$(rest$, y1 - 2, 2) = "()" Then s$ = "ok"

End If

If Left$(s$, 1) = "S" Then
    
    If IsStrExp(basestack, rest$, s$) Then
        If s$ <> "" Then
            If ExtractPath(s$) = "" Then
                If CFname(s$) <> "" Then
                    s$ = CFname(s$)
                ElseIf mylcasefILE(s$) = ExtractName(s$) Then
                    s$ = mcd + s$
                End If
                If ExtractType(s$) = "" Then
                    MyEr "missing file type (.gsb or .txt or .gm2)", "äåí õðÜñ÷åé ôýðïò áñ÷åßïõ (.gsb ç .txt ç .gm2)"
                    Set scr = Nothing
                    Exit Function
                End If
            End If
            s$ = ExtractPath(s$) + ExtractName(s$)
            ' check if path exist
            ' uSE THE MYDIR.ISDIR
            If Dir$(ExtractPath(s$), vbDirectory) = vbNullString Then
            ' error
                MyEr "wrong path to save", "ëÜèïò ôüðïò ãéá óþóéìï"
                Set scr = Nothing
                Exit Function
            ElseIf ExtractName(s$) = "" Then
                MyEr "missing file name", "÷Üèçêå ôï üíïìá áñ÷åßïõ"
                Set scr = Nothing
                Exit Function
            End If
          
            If CFname(s$) <> "" Then
            s$ = CFname(s$)
             frm$ = ReadUnicodeOrANSI(s$, True, x1)
             ' CHECK TO SEE IF THIS IS A PASSWORD PROTECTED PROGRAMM
             For I = 1 To Len(frm$)
             If AscW(Mid$(frm$, I, 1)) < 128 Then
             Exit For
             End If
             Next I
             If I > Len(frm$) Then
             If lang = 1 Then
             MsgBoxN "not text found", 0
             Else
             MsgBoxN "äåí âñÞêá êåßìåíï", 0
             End If
             Set scr = Nothing
             Exit Function
             End If
            par = Len(frm$) = FileLen(GetDosPath(s$)) ' not unicode
     
            Else
            frm$ = ""
            par = False
            End If
            Form1.EditTextWord = LCase(ExtractType(s$)) <> "gsb"
                Form1.TEXT1.title = ExtractName(s$) + " "
            If x1 = 0 Then x1 = -1
            Form1.ResetMarks
            If o < 1 Then o = 0
            If o > Len(frm$) Then o = Len(frm$) + 1
            With players(GetCode(basestack.Owner))
            ScreenEdit basestack, frm$, 0, .mysplit, .mx - 1, .My - 1, o, x1
            End With
            Form1.ResetMarks
            If frm$ <> "" And x1 >= 0 Then
            If par Then
                            I = FreeFile
                                            If Not WeCanWrite(s$) Then Set scr = Nothing: Exit Function
                            On Error Resume Next
                            
                            Open GetDosPath(s$) For Output As I
                                            If Err.Number > 0 Then
                                Err.clear
                                 MyEr "Bad filename", "ËÜèïò óôï üíïìá áñ÷åßïõ"
                                Set scr = Nothing
                                Exit Function
                                End If
                            Print #I, frm$;
                            Close I
                Else
                par = SaveUnicode(s$, frm$, x1)
                End If
            End If
        End If
        Set scr = Nothing
        Exit Function
    Else
    Set scr = Nothing
    Exit Function
    End If
End If

    If s$ <> "" Then
x1 = Abs(IsLabel(basestack, rest$, s$))
        If x1 > 0 Then
        If x1 > 3 Then
            s$ = ReplaceStr("(", "", s$)
            If FastSymbol(rest$, ")") Then
            End If
            s$ = s$ & "()"
            End If
        Else
        Set scr = Nothing
        Exit Function
        End If
        MakeThisSub basestack, s$  'NO GOOD..
        If GetSub(s$, x1) Then
            ' åðéôñÝðåôáé áëëáãÞ óå ðåñßðôùóç ðïõ êÜðïéï ôìÞìá Ýôñåîå êáé ðéÜóáìå ìå TRY ôï ëÜèïò
            ' íá äþóïõìå ôçí äõíáôüôçôá ãéá áëëáãÞ ÷ùñßò íá óôáìáôÞóïõí ôõ÷üí íÞìáôá!
            If x1 >= lckfrm And lckfrm <> 0 Then
            MyEr s$ & " is locked", s$ & " åßíáé êëåéäùìÝíï"
            rest$ = ""
            Set scr = Nothing
            Exit Function
            End If
            If IsLabelSymbolNew(rest$, "ÙÓ", "AS", lang) Then
            y1 = Abs(IsLabel(basestack, rest$, frm$))
              If y1 <> 0 Then
           '' frm$ = myUcase(frm$)
             GetSub frm$, x1
             
            If x1 = 0 Then
            If y1 > 3 Then frm$ = frm$ + ")"
            GetSubFullName s$, ss$
            
            subHash.RenameKey ss$, Mid$(frm$, Len(ss$) - Len(s$) + 1)
            End If
            End If
            Set scr = Nothing
            Exit Function
            ElseIf FastSymbol(rest$, ",") Then
            I = 1
                If IsExp(basestack, rest$, p) Then
                    I = Int(p)
                    If I < 0 Then I = Len(sbf(x1).sb) + I
                    If I < 0 Then I = 0
                    If I > Len(sbf(x1).sb) Then I = Len(sbf(x1).sb) + 1
                End If
                sbf(x1).sbc = I
            End If
            If sbf(x1).sbc = 0 Then sbf(x1).sbc = -1
        MakeMyTitle s$, lang

        With players(GetCode(basestack.Owner))
            ScreenEdit basestack, sbf(x1).sb, 0, .mysplit, .mx - 1, .My - 1, sbf(x1).sbc
            End With
            FK$(13) = "@EDIT " & s$ & "," & CStr(I)
        Else
            I = -1
          
           MakeMyTitle s$, lang
           With players(GetCode(basestack.Owner))
            ScreenEdit basestack, frm$, 0, .mysplit, .mx - 1, .My - 1, I
            End With
            If frm$ <> "" Then
            MakeThisSub basestack, s$
               x1 = GlobalSub(s$, frm$)
                If x1 <> 0 Then sbf(x1).sbc = I
                FK$(13) = "@EDIT " & s$ & "," & CStr(I)
                Else
                FK$(13) = "@EDIT " & s$
            End If
        End If
    ElseIf Not basestack.IamChild Then
        frm$ = Mid$(ReplaceStr(vbCr, vbCrLf, QUERYLIST), 3)
        Form1.ShadowMarks = True
        If UserCodePage = 1253 Then
        Form1.TEXT1.title = "Ëßóôá åíôïëþí "
        Else
        Form1.TEXT1.title = "Command List "
        End If
        With players(GetCode(basestack.Owner))
        ScreenEdit basestack, frm$, 0, .mysplit, .mx - 1, .My - 1
        End With
        Form1.ShadowMarks = False
        QUERYLIST = vbCr + ReplaceStr(vbCrLf, vbCr, frm$)
    End If

End Function
Function ProcModuleEntry(basestack As basetask, ohere$, x1 As Long, rest$) As Boolean
On Error GoTo there22
  If LastErNum = -1 Then GoTo there22
Dim frm$, bs As basetask, I As Long, pa$, p As Double, loopthis As Boolean
Dim subs As Long, snames As Long, vname As Long, vvv As Variant
Dim subspoint As Boolean
LastErName = "": LastErNameGR = ""
'Debug.Print "module entry:", ohere$, HERE$

I = 1

' ******************************************* module entry..............

        Set bs = New basetask
       With bs
        .reflimit = varhash.Count
        Set .Parent = basestack
        Set .Sorosref = basestack.soros   'same stack
        Set .Owner = .Parent.Owner
        .OriginalName$ = ohere$
        .vars = var2used: vname = varhash.Count
        subs = sb2used: snames = subHash.Count

        .UseGroupname = sbf(x1).sbgroup
        .OriginalCode = x1
        If basestack.StaticCollection.Count > 0 Then
           If basestack.ExistVar("%_" + HERE$) Then
                   basestack.ReadVar "%_" + HERE$, vvv
                   If IsObject(vvv) Then Set bs.StaticCollection = vvv
                    Set vvv = Nothing

        End If
        End If
       .StaticInUse$ = HERE$
       End With
       
        I = preProcessor(bs, sbf(x1).sb)

 Do
  frm$ = Mid$(sbf(x1).sb, I)
againmod:
       If LastErNum = -1 Then GoTo myerror1
        Select Case Execute(bs, frm$, False, False, loopthis)

        Case 0
        
myerror1:
                    If sb2used <> 0 And Not NERR Then
        If bs.UseGroupname <> "" Then
If InStr(bs.UseGroupname, ChrW(&H1FFF)) > 0 Then

pa$ = GetNextLine((sbf(bs.OriginalCode).sb))
FK$(13) = Mid$(pa$, 7) + "-" + CStr(Len(frm$))

MyErMacro rest$, "Problem in class", "Ðñüâëçìá óôç êëÜóç"
ProcModuleEntry = True
GoTo thh1
End If

        End If
                     
                    pa$ = "EDIT " & StripRVAL(HERE$) & ", " + CStr(Len(sbf(x1).sb))
                    If ohere$ <> "" Then
                    
                    If Left$(sbf(x1).sb, 10) = "'11001EDIT" Then
                    
                    pa$ = Mid$(GetNextLine(sbf(x1).sb), 7)
                    sbf(x1).sb = Mid$(sbf(x1).sb, 3)
                    
                    MyEr "in module " & ohere$ & "." & HERE$, "óôï ôìçìá " & ohere$ & "." & HERE$
                    Else
                    
                    End If
                    Else
                    MyEr "in module " & HERE$, "óôï ôìçìá " & HERE$
                    
                    End If
                    If InStr(FK$(13), ",") > 0 Then
                    If Left$(pa$, InStr(pa$, ",")) <> Left$(FK$(13), InStr(FK$(13), ",")) Then
                    GoTo thh
                    End If
               
GoTo thh

                    End If
                    If (Len(sbf(x1).sb) - Len(frm$)) < 0 Then
                    FK$(13) = pa$
                    Else
                    DropLeft ",", FK$(13)
                    If FK$(13) <> "" Then FK$(13) = "+" & FK$(13)
                    If sbf(x1).sbgroup <> "" Then
                    FK$(13) = pa$ & "-" & CStr(Len(frm$) - 2) + FK$(13)
                    Else
                    FK$(13) = pa$ & "-" & CStr(Len(frm$)) + FK$(13)
                    End If
                    End If
                    
                    Else
                    If sb2used > 0 Then
                    MyEr "in module " & HERE$, "óôï ôìçìá " & HERE$
                    Else
                    MyEr "", ""
                    End If
                    End If
                    
                    GoTo thh
            
        Case 1, 3

thh:
    If LastErNum <> 0 Then
                   rest$ = ""
                    End If
thh1:
                    On Error Resume Next
                    With bs
                    .ThrowThreads
                                  
                    var2used = .vars
                    varhash.ReduceHash vname, var()
                    If UBound(var()) / 3 >= var2used And UBound(var()) > 99 Then
                        ReDim Preserve var(UBound(var()) / 2) As Variant
                    End If
                    
                        
                  
                    
                    

                    sb2used = subs
                    subHash.ReduceHash snames, sbf()
                     If UBound(sbf()) / 3 > sb2used And UBound(sbf()) > 99 Then
                               ReDim Preserve sbf(UBound(sbf()) / 2 + 1) As modfun
                       End If
                       End With
                   '   Set bs.StaticCollection = Nothing
                   With bs
                   If .StaticCollection.Count > 0 Then
                    Set vvv = .StaticCollection
                   basestack.SetVar "%_" + .StaticInUse$, vvv
                   End If
                   End With
                    Set bs = Nothing
                    HERE$ = ohere$
                
               
                    Exit Do
        Case 2
                    I = 1
                    If frm$ <> "" Then
                            If frm$ = "BREAK" Then
                              Exit Do
                             ElseIf frm$ = Chr$(0) Then
                             
                                     If bs.IsInRetStackNumber(p) Then
                                     If p < -1 Then
                                     bs.IsInRetStackNumber p
                                     subspoint = True
                                     I = Len(sbf(basestack.OriginalCode)) - CLng(p) + 1

                                     ElseIf p < 0 Then
                                     subspoint = False
                                     bs.IsInRetStackNumber p
                                     I = Len(sbf(x1).sb) - CLng(p) + 1
                                     End If
                                   PopStage bs
                    
                                       
                             ElseIf bs.IsInRetStackString(frm$) Then
                                      If InStr(frm$, " ") > 0 Then
                                   If subspoint Then bs.RetStack.PushVal -2 Else bs.RetStack.PushVal -1
                                                 If searchsub(sbf(x1).sb, frm$, I) Then
                                     
                                         subspoint = False
                                                              If frm$ <> "" Then
                                                                     frm$ = "Read NEW " + frm$ + vbCrLf + Mid$(sbf(x1).sb, I)
                                                             Else
                                                                     frm$ = Mid$(sbf(x1).sb, I)
                                                             End If
                                                           
                                                             GoTo againmod
                                                 ElseIf x1 <> basestack.OriginalCode And basestack.OriginalCode <> 0 Then
                                                 If searchsub(sbf(basestack.OriginalCode).sb, frm$, I) Then
                                         
                                         subspoint = True
                                                 
                                                 If frm$ <> "" Then
                                                                     frm$ = "Read NEW " + frm$ + vbCrLf + Mid$(sbf(basestack.OriginalCode).sb, I)
                                                             Else
                                                                     frm$ = Mid$(sbf(basestack.OriginalCode).sb, I)
                                                             End If
                                                              GoTo againmod
                                                             Else
                                                             bs.RetStack.drop 7
                                                             Exit Do
                                                 End If
                                                 Else
                                                            bs.RetStack.drop 7
                                                             Exit Do
                                                 End If
                                         
                                         End If

                                    End If

                             Else
                                        '' i = PosLabel(frm$, sbf(x1).sb)
                                         If InStr(frm$, vbCr) > 0 Then
                                         I = rinstr(sbf(x1).sb, frm$)
                                         If I = 0 Then I = Len(sbf(x1).sb) + 1
                                          Else
                                          I = PosLabel(frm$, sbf(x1).sb)
                                         End If
                            End If
                    Else
                    
If Not loopthis Then Exit Do
loopthis = False
                   End If
        End Select
Loop
ProcModuleEntry = True
there22:

End Function
Function PushParamGeneralV7(basestack As basetask, rest$) As Boolean
PushParamGeneralV7 = True
Dim ps As mStiva, p As Double, s$
Dim ParentStack As basetask
Set ParentStack = basestack.Parent
    Set ps = New mStiva
                Do
                    If IsExp(ParentStack, rest$, p) Then
        If Not ParentStack.LastObj Is Nothing Then
           ps.DataObj ParentStack.LastObj
       Set ParentStack.LastObj = Nothing
        Else
            ps.DataVal p
         End If
    ElseIf Not LastErNum <> 0 Then
    If IsStrExp(ParentStack, rest$, s$) Then
       If Not ParentStack.LastObj Is Nothing Then
           ps.DataObj ParentStack.LastObj
           Set ParentStack.LastObj = Nothing
        Else
        ps.DataStr s$
        End If
    End If
    Else
  If LastErNum <> 0 Then
     PushParamGeneralV7 = False
  Exit Do
    End If
    End If
      If LastErNum <> -2 And LastErNum <> 0 Then
      MyEr "Error in input list", "Ðñüâëçìá óôéò ðáñáìÝôñïõò"
      PushParamGeneralV7 = False
      End If
    If Not FastSymbol(rest$, ",") Then Exit Do
                Loop
             Set ParentStack = Nothing
            basestack.soros.MergeTop ps
End Function
Function PushParamGeneral(basestack As basetask, rest$) As Boolean
PushParamGeneral = True
Dim ps As mStiva, p As Double, s$
    Set ps = New mStiva
                Do
                    If IsExp(basestack, rest$, p) Then
        If Not basestack.LastObj Is Nothing Then
           ps.DataObj basestack.LastObj
       Set basestack.LastObj = Nothing
        Else
            ps.DataVal p
         End If
    ElseIf Not LastErNum <> 0 Then
    If IsStrExp(basestack, rest$, s$) Then
       If Not basestack.LastObj Is Nothing Then
           ps.DataObj basestack.LastObj
           Set basestack.LastObj = Nothing
        Else
        ps.DataStr s$
        End If
    End If
    Else
  If LastErNum <> 0 Then
     PushParamGeneral = False
  Exit Do
    End If
    End If
      If LastErNum <> -2 And LastErNum <> 0 Then
      MyEr "Error in input list", "Ðñüâëçìá óôéò ðáñáìÝôñïõò"
      PushParamGeneral = False
      End If
    If Not FastSymbol(rest$, ",") Then Exit Do
                Loop
             
            basestack.soros.MergeTop ps
End Function
Sub PushParamGeneraOLD(basestack As basetask, rest$)
Dim ps As mStiva, p As Double, s$
    Set ps = New mStiva
                Do
                    If IsExp(basestack, rest$, p) Then
                            If Not basestack.LastObj Is Nothing Then
                                    ps.DataObj basestack.LastObj
                            Else
                                    ps.DataVal p
                            End If
                    ElseIf IsStrExp(basestack, rest$, s$) Then
                            If Not basestack.LastObj Is Nothing Then
                                    ps.DataObj basestack.LastObj
                            Else
                                    ps.DataStr s$
                            End If

                    Else
                    
                            Exit Do
                    End If
                    If Not FastSymbol(rest$, ",") Then Exit Do
                Loop
             
            basestack.soros.MergeTop ps
End Sub

Function searchsub(a$, w$, final As Long) As Boolean
Dim acopy As Document, there As Long, Curs As Long, Curs2 As Long
Dim a1 As Long, b As Long, c As Long, d As Long
Dim ww$(), Len1 As Long, there1 As Long
Dim ss$, DUMP$
ww$() = Split(w$)
paliedo:
Len1 = Len(ww$(0))
If Len1 = 1 Then
If ww$(0) = "S" Then
Set acopy = New Document
With acopy
.textDocFast = a$
.LCID = 1032
ww$(1) = ww$(1) + ":"
Do While .FindIdentifier(ww$(1), False, there, Curs)
If Trim$(Left$(.TextParagraph(there), Curs - 1)) = "" Then
' we find it
                               final = -1
                               .FindPos .FirstParagraphLine(there) + 2, 1, final, a1, b, c, d
                               final = final + 1 ' because mid$ starts from 1
                               w$ = ""
                                searchsub = True
                                Exit Function
End If

Loop
End With
Else
final = PosLabel(ww$(1), a$)
If final <> 1 Then
w$ = ""
searchsub = True
End If
End If
Exit Function
End If
Set acopy = New Document

With acopy
.textDocFast = a$
.LCID = 1032
there = 0
Curs = 0
Do
If .FindIdentifier(ww$(0), False, there, Curs) Then

ss$ = Left$(acopy.TextParagraph(there), Curs - 1)

IsNumberLabel ss$, DUMP$
                        If Trim$(ss$) = "" Then
                        Curs2 = Curs
                        there1 = there
                        If .FindIdentifier(ww$(1), True, there1, Curs2) Then
                        
                                    If there1 <> there Then
                                           Curs = 0
                                    Else
                                                final = -1  ' this is the mode for search charpos ...in findpos
                                                ' FROM 1,0, BUT  PARAGRAPH LINES ARE FROM 0
                                                ' SO PLUS ONE PLU ONE MORE FOR NEXT LINE
                                                '
                                                .FindPos .FirstParagraphLine(there1) + 2, 1, final, a1, b, c, d
                                                       final = final + 1 ' because mid$ starts from 1
                                                       
                                                       
                                                        w$ = BlockParam(Trim(Mid$(.TextParagraph(there), Curs2 + Len(ww(1)))))
                                                        If w$ <> "" Then
                                                   '' If Right$(w$, 1) = ")" Then w$ = Left$(w$, Len(w$) - 1)
                                                        End If
                                                        searchsub = True
                                                        
                                                       
                                                        Exit Do
                                    End If
                        End If
            End If
            Else
            If ww$(0) = "ÑÏÕÔÉÍÁ" Then
            ww$(0) = "ÑÏÕÔºÍÁ"
            GoTo paliedo
            End If
            Exit Do
        End If
   Loop
End With


End Function
Function search2KIND(a$, w$, final As Long, Optional Anypos As Boolean = False) As Boolean
Dim acopy As Document, there As Long, Curs As Long, Curs2 As Long
Dim a1 As Long, b As Long, c As Long, d As Long
Dim ww$(), there1 As Long
Dim ss$, DUMP$
ww$() = Split(w$)

Set acopy = New Document

With acopy
.textDocFast = a$
there = 0
Curs = 0
Do
If .FindIdentifier(ww$(0), True, there, Curs) Then

ss$ = Left$(acopy.TextParagraph(there), Curs - 1)

IsNumberLabel ss$, DUMP$
If Anypos Then
If Right$(Trim$(ss$), 1) = ":" Then ss$ = ""
End If
                        If Trim$(ss$) = "" Then
                        Curs2 = Curs + Len(ww$(0))
                        there1 = there
                        If .FindWord(ww$(1), True, there1, Curs2) Then
                        
                                    If there1 <> there Then
                                           Curs = 0
                                    Else
                                                final = -1  '
                                                If Not Anypos Then Curs2 = 1 Else Curs2 = Curs2 + 1
                                                .FindPos .FirstParagraphLine(there1) + 1, Curs2, final, a1, b, c, d

                                                       search2KIND = True
                                                        Exit Do
                                    End If
                        End If
            End If
            Else
            Exit Do
        End If
   Loop
End With


End Function

Function executeblock(Exec As Long, bstack As basetask, b$, Once As Boolean, kolpo As Boolean, Optional stepbystep As Boolean = False) As Boolean

executeblock = True
bstack.LastComm = ""
Dim I As Long, ec$, ec1$, ll As Long, oldLL As Long, bb$, p As Double, x2 As Long, y2 As Long, monce As Long, W3 As Long, removebracket As Boolean
Dim myLevel As Long, oldexec As Long, loopthis As Boolean, subspoint As Boolean, RetStackSize As Long
RetStackSize = bstack.RetStack.Total
If Exec = 0 Then Exec = 1
oldexec = Exec
myLevel = bstack.SubLevel
I = 1
monce = Once
If FastSymbol(b$, "}") Then
''MyDoEvents
executeblock = False
Exec = Abs(NOEXECUTION = False) * oldexec: Exit Function
ElseIf IsSymbol(b$, "{") Then
stepbystep = False
ec1$ = b$
ec$ = block(ec1$)
removebracket = True
Else
ec1$ = b$
ec$ = block(ec1$)
If ec$ = "" Then ec$ = b$
End If
oldLL = bstack.addlen
If Len(ec1$) > 0 And Len(b$) <> Len(ec1$) Then

ll = Len(ec1$) + oldLL
Else
ll = oldLL
End If
ec1$ = ""
        Do
                bb$ = Mid$(ec$, I)
fromfirst0:
        
                kolpo = Once: Once = False
                bstack.addlen = ll
             
                W3 = Execute(bstack, bb$, kolpo, stepbystep, loopthis)
                bstack.addlen = oldLL
                Select Case W3
                Case 0

                        If myLevel <> bstack.SubLevel Then
                                b$ = bb$
                                Exec = 0
                                bstack.RetStack.drop 9 * (bstack.SubLevel - myLevel)  ' NOW LEVEL HAS 7+2 ITEMS
                                Exit Function
                        End If
                        If bb$ = "" Then
                                b$ = ""
                        Else
                                If InStr(bb$, " : ERROR -2") <= 3 Then
                                        b$ = bb$
                                Else
                                        b$ = Mid$(b$, Len(ec$) - Len(bb$) + 1)
                                End If
                        End If
                        Exec = 0
                        Exit Function
                Case 1
ALFA12:
                        If LastErNum = -2 Then
                                If bb$ = "" Then
                                        b$ = ""
                                Else
                                        If Left$(bb$, 12) = " : ERROR -2" Then
                                                b$ = bb$
                                        Else
                                                b$ = Mid$(b$, Len(ec$) - Len(bb$) + 1)
                                        End If
                                End If
                                Exec = 0
                                Exit Function
                        End If
                        Exec = oldexec ''1
                        If kolpo And monce And Exec = 1 Then
                                b$ = bb$
                                Once = True
                                Exit Function
                        ElseIf kolpo And bb$ = "" Then
                                ' exit
                                Exec = W3
                                Exit Do
                        End If
                        If removebracket Then
                                b$ = Right$(b$, Len(b$) - Len(ec$))
                                If IsSymbol(b$, "}") Then Exec = oldexec: Exit Do
                                If Once Then Exit Do
                        ElseIf bb$ = "" And kolpo Then
                                b$ = ""
                        Else
                                If stepbystep Then
                                        b$ = bb$
                                Else
                                        b$ = Right$(b$, Len(b$) - Len(ec$))
                                End If
                        End If
                        Exit Do
                Case 2
                        If bb$ = "BREAK" Then
                                Exec = 2
                                b$ = ""
                                Once = True
                                kolpo = True
                                Exit Function
                        End If
                        If Not kolpo Then
                                If bb$ <> "" Then
                                        If bb$ = Chr$(0) Then
                                        If RetStackSize = bstack.RetStack.Total And bstack.RetStack.LookTopVal < 0 Then
                                        ' this is a return form other block
                                         Exec = 2
                                        b$ = bb$
                                        Exit Function
                                        End If
                                                I = 1
from123:

                                                If bstack.IsInRetStackNumber(p) Then
                                                        If LastErNum = -1 Then
                                                                bstack.RetStack.PushVal p
                                                                Exec = 0
                                                                Exit Function
                                                        End If
           
                                                        subspoint = False
                                                        bstack.IsInRetStackNumber p
                                                        Exec = 1
                                                        I = Len(ec$) - CLng(p) + 1
                                                        PopStage bstack
                                                        If loopthis Then
                                                                bb$ = Mid$(ec$, I)
                                                                GoTo fromfirst0
                                                        Else
                                                                bb$ = Mid$(ec$, CLng(p) + 1)
                                                        End If
                                                        If bb$ = vbCrLf Then Exit Do
                                                ElseIf bstack.IsInRetStackString(bb$) Then
findelsesub0:

                                                        If InStr(bb$, " ") > 0 Then
                                                                If subspoint Then bstack.RetStack.PushVal -2 Else bstack.RetStack.PushVal -1
                                   
                                                                If searchsub(sbf(bstack.OriginalCode).sb, bb$, I) Then
                                                                
                                                                        subspoint = False
                                                                        If bb$ <> "" Then
                                                                                bb$ = "Read NEW " + bb$ + vbCrLf + Mid$(sbf(bstack.OriginalCode).sb, I)
                                                                        Else
                                                                                bb$ = Mid$(sbf(bstack.OriginalCode).sb, I)
                                                                        End If
                                                          
                                                                        kolpo = False
                                                                        GoTo contsub
                                                                ElseIf bstack.IamChild Then
                                                                        If searchsub(sbf(bstack.Parent.OriginalCode).sb, bb$, I) Then
                                                                                subspoint = True
                                                                                If bb$ <> "" Then
                                                                                        bb$ = "Read NEW " + bb$ + vbCrLf + Mid$(sbf(bstack.Parent.OriginalCode).sb, I)
                                                                                Else
                                                                                        bb$ = Mid$(sbf(bstack.Parent.OriginalCode).sb, I)
                                                                                End If
                                                                                kolpo = False
                                                                                  
contsub:
y2 = y2 + 1
subsub02:
                                                                        Exec = 0
                                                                                    x2 = Execute(bstack, bb$, kolpo)
                                                                                    If x2 = 2 Then
                                                                                            If bb$ = Chr$(0) Then

                                                                                       
                                                                                                    If bstack.IsInRetStackString(bb$) Then GoTo findelsesub0
                                                                           
                                                                                                    y2 = y2 - 1
                                                                                                    If y2 = 0 Then GoTo from123  'normal level
                                                                                                    If bstack.IsInRetStackNumber(p) Then
                                                                                              
                                                                                                            If p < -1 Then
                                                                                                                    subspoint = True
                                                                                                                    bstack.IsInRetStackNumber p
                                                                                                    
                                                                                                                    bb$ = Mid$(sbf(bstack.Parent.OriginalCode).sb, Len(sbf(bstack.Parent.OriginalCode).sb) - CLng(p) + 1)
                                                                                                            ElseIf p < 0 Then
                                                                                                                    subspoint = False
                                                                                                                    bstack.IsInRetStackNumber p
                                                                                                  
                                                                                                                    bb$ = Mid$(sbf(bstack.OriginalCode).sb, Len(sbf(bstack.OriginalCode).sb) - CLng(p) + 1)
                                                                                                            End If
                                                                                                             PopStage bstack
                                                                                                            Exec = 1
                                                                                                            GoTo subsub02
                                                                                                    Else
                                                                                                            Exit Do
                                                                                                    End If
                                                                                            ElseIf InStr(bb$, " ") > 0 Then
                                                                                                    GoTo findelsesub0
                                                                                            Else   ' jump ??
                                                                                        
                                                                                                I = PosLabel(bb$, sbf(bstack.OriginalCode).sb)
                                                                                                
                                                                                            If I <> 0 And I < Len(sbf(bstack.OriginalCode).sb) Then
                                                                                                    bb$ = Mid$(sbf(bstack.OriginalCode).sb, I)
                                                                                                    
                                                                                                    GoTo subsub02
                                                                                            End If
                                                                                                   Exit Do
                                                                                            End If
                                                                                    ElseIf x2 = 1 Then
                                                                                            If LastErNum <> -2 Then
                                                                                                    bstack.RetStack.drop 9 * bstack.SubLevel - myLevel
                                                                                                    b$ = ec$
                                                                                                    Exec = oldexec
                                                                                                    Exit Function
                                                                                                    
                                                                                            End If
                                                                                            ' NO RETURN...DROP STACK
                                                                                            bstack.RetStack.drop 2
                                                                                            Exit Do
                                                                                    ElseIf x2 = 0 Then
                                                                                            b$ = bb$
                                                                                            Exec = 0
                                                                                            Exit Function
                                                                                    End If
                                                                            Else
                                                                                    bstack.RetStack.drop 7
                                                                                    Exit Do
                                                                            End If
                                                                    Else
                                                                            bstack.RetStack.drop 7
                                                                            Exit Do
                                                                    End If
                                                         End If
                                                        ' ????????
                                                End If
                                        ElseIf MaybeIsSymbol(bb$, "}") Or bb$ = "" Then
                                                I = 1
                                                bb$ = ec$
                                        Else
                                                I = PosLabel(bb$, ec$)
                                                If I = 0 Or I > Len(ec$) Then
                                                        b$ = bb$
                                                        Exec = 2
                                                        Exit Do
                                                Else
                                                        bb$ = Mid$(ec$, I)
                                                        GoTo fromfirst0
                                                End If
                                        End If
                                Else
                                loopthis = False
                                        I = 1
                                End If
                        Else
                               Once = kolpo
                               Exec = 2: b$ = bb$: Exit Function
                        End If
                Case Else
                        If W3 = 3 And bb$ = "CONTINUE" Then
                                If removebracket Then
                                        ec$ = block(b$)
                                Else
                                b$ = Mid$(b$, Len(ec$) + 1)
                                   
                                End If
                              
                                Exec = 3: Exit Do
                       ElseIf W3 = 3 And bb$ = "" Then
                       bb$ = Mid$(b$, Len(ec$) + 1)
                       W3 = 1
                       GoTo ALFA12   ' FROM REVISION 121
                        End If
                        If IsSymbol(b$, "}") Then
                                Exec = 1: Exit Do
                                If Once Then Exit Do
                        Else
                                b$ = Right$(b$, Len(b$) - Len(bb$))
                        End If
                        Exit Do
                End Select

                If myexit(bstack) Then Exec = oldexec: Exit Do

                If monce Then Exit Do
        Loop
executeblock = False
End Function
Function StockValues(bstack As basetask, b$, lang As Long) As Boolean
' Stock  A[$|%| ]() in  A,B$,C(3)   copy values to stock array...and

' Stock  A[$|%| ]() out  A,B$,C(3),...  copy values to variables and make empty space in stock

' Stock A[$|%| ]()  keep  N,  B[$|%| ]()
' Stock A[$|%| ]()  sweep  N [,  value ]   fill a copy of value to n items or empty slots
Dim w$, pppp As mArray, v As Long, VN As Long, I As Long, what$, pppp1 As mArray, V1 As Long
Dim bs As New basetask, p As Double, P1 As Double, soros As mStiva
If Abs(IsLabel(bstack, b$, what$)) > 4 Then
        If neoGetArray(bstack, what$, pppp) Then

                If NeoGetArrayItem(pppp, bstack, what$, v, b$) Then
againhere:
                            If IsLabelSymbolNew(b$, "ÁÐÏ", "IN", lang) Then
                            
                                If what$ = "" Then Exit Function   ' no for no named array
                                Set soros = bstack.soros
                                Set bstack.Sorosref = bs.soros
                                ' Need bstack and not bs because bstack has more info inside.
                                    If Identifier(bstack, "@DATA", b$) Then
                                     Set bstack.Sorosref = soros
                                     Set soros = Nothing
                                                   VN = v + bs.soros.Total - 1
                                                   If pppp.UpperMonoLimit >= VN Then
                                                            With bs.soros
                                                                     I = 1
                                                                     For v = v To VN
                                                                              If .StackItemTypeObjectType(I) = "" Then
                                                                                       pppp.item(v) = .StackItem(I)
                                                                              Else
                                                                                       Set pppp.item(v) = .StackItem(I)
                                                                                       
                                                                              End If
                                                                              I = I + 1
                                                                     Next v
                                                            End With
                                                   Else
                                                            MyEr "Stock out of space", "Ôï áðüèåìá Ýìåéíå áðü ÷þñï"
                                                            Exit Function
                                                   End If
                                                    StockValues = True
                                                    Exit Function
                                    End If
                            ElseIf IsLabelSymbolNew(b$, "ÓÅ", "OUT", lang) Then
                                                  
                                                                     Do
                                                                        If IsObject(pppp.item(v)) Then
                                                                       
                                                                                        Select Case Abs(IsLabel(bstack, b$, w$))
                                                                                        Case 1, 4
                                                                                        If GetVar(bstack, w$, I) Then
                                                                                        If Typename$(var(I)) = "Group" Then UnFloatGroupReWriteVars bstack, what$, I, pppp.item(v)
                                                                                        Else
                                                                                        Set var(I) = pppp.item(v)
                                                                                        End If
                                                                                        Case 3
                                                                        
                                                                                        If GetVar(bstack, w$, I) Then Set var(I) = pppp.item(v)
                                                                                        Case 5, 6, 7
                                                                                         If neoGetArray(bstack, w$, pppp1) Then
                                                                                            If IsSymbol(b$, ")") Then
                                                                                                bs.soros.PushObj pppp.item(v)
                                                                                                        If Not globalArrByPointer(bs, bstack, w$) Then MyEr "No array found", "Äåí âñÞêá ðßíáêá"
                                                                                                Else
                                                                                                        If NeoGetArrayItem(pppp1, bstack, w$, V1, b$) Then
                                                                                                               Set pppp1.item(V1) = pppp.item(v)
                                                                                                        End If
                                                                                                End If
                                                                                        ElseIf IsSymbol(b$, ")") Then
                                                                                                        bs.soros.PushObj pppp.item(v)
                                                                                                        If Not globalArrByPointer(bs, bstack, w$) Then MyEr "No array found", "Äåí âñÞêá ðßíáêá"
                                                                                                End If

                                                                                        
                                                                                        End Select
                                                                        Else
                                                                        Select Case Abs(IsLabel(bstack, b$, w$))
                                                                                        Case 1, 3, 4
                                                                                        If GetVar(bstack, w$, I) Then
                                                                                        Else
                                                                                        I = GlobalVar(w$, 0)
                                                                                        End If
                                                                                        var(I) = pppp.item(v)
                                                                                        
                                                                                        Case 5, 6, 7
                                                                                         If neoGetArray(bstack, w$, pppp1) Then
                                                                                         
                                                                                                If NeoGetArrayItem(pppp1, bstack, w$, V1, b$) Then
                                                                                                     pppp1.item(V1) = pppp.item(v)
                                                                                                End If
                                                                                      
                                                                                         End If
                                                                                        End Select
                                                                        
                                                                        End If
                                                                        v = v + 1
                                                                          If pppp.UpperMonoLimit < v Then
                                                                          If MaybeIsSymbol(b$, ",") Then
                                                                          MyEr "Reach array upper limit", "¸öèáóá óôï Üíù üñéï ôïõ ðßíáêá"
                                                                          Exit Function
                                                                          End If
                                                                          End If
                                                                        Loop Until Not FastSymbol(b$, ",")
                                                  
                                                    ElseIf IsLabelSymbolNew(b$, "ÃÉÁ", "KEEP", lang) Then
                                                    ' no copy of objects...only pointers...to objects
                                                    
                                                    If IsExp(bstack, b$, p) Then
                                                            If p <> Int(p) Or p < 0 Then
                                                                        MyEr "Invalid index", "Ìç Ýãêõñïò äåßêôçò"
                                                                        Exit Function
                                                            End If
                                                                     If IsSymbol(b$, ",") Then
                                                                     If Abs(IsLabel(bstack, b$, w$)) > 4 Then
                                                                        If neoGetArray(bstack, w$, pppp1) Then
                                                                         If NeoGetArrayItem(pppp1, bstack, w$, V1, b$) Then
                                                                                   If Not (V1 + p - 1 <= pppp1.UpperMonoLimit) Then
                                                                                                MyEr "Invalid index", "Ìç Ýãêõñïò äåßêôçò"
                                                                                                Exit Function
                                                                                   Else
                                                                                   If pppp1 Is pppp Then
                                                                                   If v = V1 Then
                                                                                   ' do nothing
                                                                                   ElseIf Abs(v - V1) < p And V1 > v Then
                                                                                   'from top
                                                                                               For I = p - 1 To 0 Step -1
                                                                                                                With pppp
                                                                                                                If IsObject(.item(I + v)) Then
                                                                                                                     Set pppp1.item(I + V1) = .item(I + v)
                                                                                                                Else
                                                                                                                     pppp1.item(I + V1) = .item(I + v)
                                                                                                                End If
                                                                                                                End With
                                                                                               Next I
                                                                                   Else
                                                                                            For I = 0 To p - 1
                                                                                                                With pppp
                                                                                                                If IsObject(.item(I + v)) Then
                                                                                                                     Set pppp1.item(I + V1) = .item(I + v)
                                                                                                                Else
                                                                                                                    pppp1.item(I + V1) = .item(I + v)
                                                                                                                End If
                                                                                                                End With
                                                                                               Next I
                                                                                   End If

                                                                                   Else
                                                                                               For I = 0 To p - 1
                                                                                                                With pppp
                                                                                                                If IsObject(.item(I + v)) Then
                                                                                                                     Set pppp1.item(I + V1) = .item(I + v)
                                                                                                                Else
                                                                                                                      pppp1.item(I + V1) = .item(I + v)
                                                                                                                End If
                                                                                                                End With
                                                                                               Next I
                                                                                    End If
                                                                                    StockValues = True
                                                                                    Exit Function
                                                                                    End If
                                                                                                End If
                                                                                  End If
                                                                                  ElseIf Right$(w$, 1) = "$" Then
                                                                                   If GetVar(bstack, w$, V1) Then
                                                                                    var(V1) = ""
                                                                                        Else
                                                                                        V1 = GlobalVar(w$, "")
                                                                                        End If
                                                                                        VN = Right$(what$, 3) = "$"
                                                                                         If p - 1 + v > pppp.UpperMonoLimit Then
                                                                                          MyEr "Invalid copy number", "Ìç Ýãêõñïò äåßêôçò áíôéãñáöÞò"
                                                                                         Exit Function
                                                                                         End If
                                                                                    For I = 0 To p - 1
                                                                                                                With pppp
                                                                                                                If IsObject(.item(I + v)) Then
                                                                                                                        If VN Then var(V1) = var(V1) + Sput("") Else var(V1) = var(V1) & " 0"
                                                                                                                Else
                                                                                                                  
                                                                                                                     Select Case VarType(.item(I + v))
                                                                                                                     Case 5
                                                                                                                     var(V1) = var(V1) + " " + CStr(.item(I + v))
                                                                                                                     Case 8
                                                                                                                     w$ = .item(I + v)
                                                                                                                     If IsNumberD2(w$, p) Then
                                                                                                                     var(V1) = var(V1) + " " + .item(I + v)
                                                                                                                     Else
                                                                                                                     var(V1) = var(V1) + Sput(.item(I + v))
                                                                                                                     End If
                                                                                                                     Case Else
                                                                                                                     If VN Then var(V1) = var(V1) + Sput("") Else var(V1) = var(V1) & " 0"
                                                                                                              
                                                                                                                     ''var(V1) = var(V1) & " " & Trim$(Str$(.item(i + V)))
                                                                                                                     End Select
                                                                                                                End If
                                                                                                                End With
                                                                                               Next I
                                                                                               
                                                                                   StockValues = True
                                                                                    Exit Function
                                                                                  End If
                                                   End If
                                                   End If

                                                    
                                                    ElseIf IsLabelSymbolNew(b$, "ÈÅÓÅ", "SWEEP", lang) Then
                                                    If what$ = "" Then Exit Function   ' no for no named array
                                                            If IsExp(bstack, b$, p) Then
                                                                            If p <> Int(p) Or p < 0 Then
                                                                                   MyEr "Invalid index", "Ìç Ýãêõñïò äåßêôçò"
                                                                                   Exit Function
                                                                            End If
                                                         
                                                                If Not (v + p - 1 <= pppp.UpperMonoLimit) Then
                                                                            MyEr "Invalid index", "Ìç Ýãêõñïò äåßêôçò"
                                                                            Exit Function
                                                                Else
                                                                    If Not IsSymbol(b$, ",") Then
                                                                                                                For I = 0 To p - 1
                                                                                                               If IsObject(pppp.item(I + v)) Then
                                                                                                               Set pppp.item(I + v) = Nothing
                                                                                                               End If
                                                                                                                pppp.item(I + v) = Empty
                                                                                                                Next I
                                                                    
                                                                    Else
                                                                    
                                                                            I = 1
                                                                            what$ = aheadstatus(b$, False, I)
                                                                            Set bstack.LastObj = Nothing
                                                                            If what$ <> "" Then
                                                                                            If Left$(what$, 1) = "N" Then
                                                                                                        If IsNumber(bstack, b$, P1) Then
                                                                                                                If bstack.LastObj Is Nothing Then
                                                                                                                For I = 0 To p - 1
                                                                                                                pppp.item(I + v) = P1
                                                                                                                Next I
                                                                                                                Else
                                                                                                            bs.soros.PushObj bstack.LastObj
                                                                                                                Set bstack.LastObj = Nothing
                                                                                                                For I = 0 To p - 1
                                                                                                                bs.soros.Copy2TopItem 1
                                                                                                                Set pppp.item(I + v) = bs.soros.PopObj
                                                                                                                Next I
                                                                                                                End If
                                                                                                        End If
                                                                                            Else
                                                                                                        If IsString(bstack, b$, what$) Then
                                                                                                                If bstack.LastObj Is Nothing Then
                                                                                                                For I = 0 To p - 1
                                                                                                               
                                                                                                                pppp.item(I + v) = what$
                                                                                                                Next I
                                                                                                                Else
                                                                                                                                                bs.soros.PushObj bstack.LastObj
                                                                                                                Set bstack.LastObj = Nothing
                                                                                                                For I = 0 To p - 1
                                                                                                                bs.soros.Copy2TopItem 1
                                                                                                                Set pppp.item(I + v) = bs.soros.PopObj
                                                                                                                Next I
                                                                                                                End If
                                                                                                                End If
                                                                                                        End If
                                                                                            End If
                                                                                    End If
                                                                                    End If
                                                          
                                                            End If
                                                        End If
                                                    End If
                                                    StockValues = True
                                Else
                            b$ = what$ + b$
                            If IsExp(bstack, b$, p) Then
                            what$ = ""
                            If Typename(bstack.LastObj) = "mArray" Then Set pppp = bstack.LastObj: Set bstack.LastObj = Nothing: GoTo againhere
                            
                            ElseIf IsStrExp(bstack, b$, what$) Then
                            what$ = ""
                            If Typename(bstack.LastObj) = "mArray" Then Set pppp = bstack.LastObj: Set bstack.LastObj = Nothing: GoTo againhere
                            End If
                            End If
                           
                    End If
            
End Function
Public Function SubsExist() As Boolean
SubsExist = subHash.Count > 0
End Function
Function preProcessor(bstack As basetask, b$) As Long
Dim ec$, ss$, w$, backup, p As Double, backupstr$
If Left$(b$, 10) = "'11001EDIT" Then backup = InStr(b$, vbCrLf) + 2 Else backup = 1
' backup show first char for code
While Mid$(b$, backup, 2) = vbCrLf
backup = backup + 2
Wend
If Mid$(b$, backup, 2) = "\#" Then
backupstr$ = Left$(b$, backup - 1)
b$ = Mid$(b$, backup + 2)

Do
        Do While FastSymbol(b$, "(")
        If FastSymbol(b$, ")") Then b$ = "()" + b$: Exit Do
                    If IsExp(bstack, b$, p) Then
                            If p = 0 Then  ''skip lines"
                                    If FastSymbol(b$, ",") Then  ''Skip lines
                                    If IsExp(bstack, b$, p) Then
                                        For p = p To 1 Step -1:    w$ = GetNextLine(b$): b$ = Mid$(b$, 3): Next p
                                    Else
                                    w$ = GetNextLine(b$): b$ = Mid$(b$, 3): GoTo continueloop
                                    
                                    End If
                                    Else  ' skip this
                                    w$ = GetNextLine(b$): b$ = Mid$(b$, 3): GoTo continueloop
                                    End If
                                    
                            End If
                            IsSymbol3 b$, ")"
                    End If
            Loop
    w$ = GetNextLine(b$)
    ec$ = w$
    ss$ = GetStrUntil(":", ec$)
        If ss$ = "" Then
        ec$ = w$
        ss$ = GetStrUntil(" ", ec$)
        End If
    ec$ = NLtrim$(ec$)
    b$ = ReplaceStr2(ss$, ec$, b$)
While Left$(b$, 2) = vbCrLf
    b$ = Mid$(b$, 3)
Wend
continueloop:
Loop Until Not FastSymbol(b$, "\#")
b$ = backupstr$ + b$
End If
preProcessor = backup
End Function
Function newStart(basestack As basetask, rest$) As Boolean
Dim scr As Object, s$, pa As Long
newStart = True
Set scr = basestack.Owner
Targets = False
ReDim q(0) As target
scr.ForeColor = mycolor(11)
basestack.myBold = False
basestack.myitalic = False
pa = 0
            Err.clear
            On Error Resume Next
If IsStrExp(basestack, rest$, s$) Then
            If s$ <> "" And s$ <> "*" Then MYFONT = s$ Else MYFONT = scr.Font.name
      
                scr.Font.charset = 0
                scr.Font.name = MYFONT
               If Not myLcase(MYFONT) = myLcase(scr.Font.name) Then
               scr.Font.charset = 1
               scr.Font.name = MYFONT
               End If
               Sleep 1
              '  mydoevents
                scr.Font.charset = basestack.myCharSet
                    Form1.TEXT1.Font.charset = basestack.myCharSet

    Form1.List1.Font.charset = basestack.myCharSet
  '  Form1.List2.Font.CharSet = BaseSTACK.myCharSet
                scr.FontBold = False
                scr.FontItalic = False
            If Err.Number > 0 Then
                Err.clear
                scr.Font.name = FFONT
                scr.Font.charset = basestack.myCharSet
            End If
        Form3.StoreFont scr.Font.name, scr.FontSize, scr.Font.charset
        
        SetText scr, -2, True
            s$ = ""
            If FastSymbol(rest$, ",") Then
             
            If IsStrExp(basestack, rest$, s$) Then
            'rest$ = s$ & "}" & rest$
            If s$ <> "" Then s$ = ": " & s$ & "}"
            ElseIf FastSymbol(rest$, "{") Then
            s$ = ": " & block(rest$)
            If Not FastSymbol(rest$, "}") Then Set scr = Nothing: newStart = False: Exit Function
                End If
                End If
            Original basestack1, s$  ' set...
            
Else
'NOEXECUTION = True
'MOUT = False
MyEr "", ""
    closeAll ' we closed all files
    If AVIRUN Then MediaPlayer1.stopMovie
    PlaySoundNew ""
    
    If basestack.toprinter Then
    getnextpage
    End If
    Set scr = Form1.DIS
  
Form1.myBreak basestack
    basestack.toprinter = False
    Form1.Cls
    
    Original basestack1, "NEW:CLEAR"

    basestack.soros.Flush

End If

End Function
Sub newHide(basestack As basetask)
Dim scr As Object
Set scr = basestack.Owner
If scr.name = "DIS" Or scr.name = "dSprite" Then
scr.Visible = False
End If
MyDoEvents1 scr
Set scr = Nothing
End Sub
Sub newshow(bstack As basetask)
Dim scr As Object
Set scr = bstack.Owner
If scr.name = "DIS" Or scr.name = "dSprite" Then
If Form1.Visible = False Then
If ttl Then
' we have title
If Form3.WindowState = 1 Then
Form3.Visible = True: Form3.WindowState = 0
    Do While Not Form1.Visible Or NOEXECUTION
        mywait bstack, 1
        Loop
End If
Else

 Form1.Show , Form5
 mywait bstack, 5
End If
Else
    If ttl Then
    ' we have title
        If Form3.WindowState = 1 Then
        Form3.Visible = True: Form3.WindowState = 0
            Do While Not Form1.Visible Or NOEXECUTION
           mywait bstack, 5
                Loop
        End If
    Else
     Form1.Show , Form5
     mywait bstack, 5
    End If
End If

    scr.Visible = True

        Do While Not scr.Visible Or NOEXECUTION
mywait bstack, 5
        Loop
If scr.Visible Then scr.SetFocus
End If
Set scr = Nothing
End Sub
Sub TraceStore(b As basetask, v As Long, c$, o&, Optional r&)
     v = b.addlen
     r& = Len(c$) - o&

         b.addlen = r& + b.addlen
         
End Sub
Sub TraceRestore(b As basetask, v As Long)
         b.addlen = v
End Sub
Sub ProcBackGround(bstack As basetask, rest$, lang As Long, afier As Boolean)
Dim s$, p As Double, I As Long, x1 As Long, x As Double, y As Double, f As Long, y1 As Long, sx As Double, ss$, pa$, it As Long
Dim scr As Object, frm$, W3 As Long, ya As Long, AddTwipsTopL As Long
Set scr = bstack.Owner
Dim prive As basket
If IsLabelSymbolNew(rest$, "ÌÏÕÓÉÊÇ", "MUSIC", lang) Then
If IsStrExp(bstack, rest$, s$) Then
 'OPEN OR REPLACE
 If s$ <> "" Then
                    If ExtractType(s$) = "" Then s$ = s$ & ".avi"
                    If CFname(s$) = "" Then
                        s$ = mcd & s$: If CFname(s$) = "" Then Exit Sub
                    Else
                        s$ = CFname(s$)
                    End If
                   If s$ <> "" Then
                   MediaBack1.closeMovie
                   MediaBack1.FileName = s$
                   MediaBack1.openMovie
                   MediaBack1.playMovie
                   End If
                Else
                    afier = False
                    Exit Sub
                End If
Else
' CLOSE
MediaBack1.closeMovie
End If
Else
If Not IsExp(bstack, rest$, p) Then p = 0   '' no change

If FastSymbol(rest$, "{") Then
ss$ = "{" & block(rest$) & "}"
frm$ = rest$
If FastSymbol(rest$, "}") Then
'' check players(-2)
If players(-1).SZ = 0 Then
prive = players(GetCode(scr))
SetTextBasketBack Form1, prive
    SetText Form1, prive.MineLineSpace, True    'load Players() with first values
    With players(-1)
    .curpos = 0
    .currow = 0
    .mysplit = 0
    .osplit = 0
    End With
End If
If p > 0 Then
SetTextSZ Form1, CSng(p)
End If
W3 = bstack.tolayer
bstack.toback = True
Set bstack.Owner = Form1
 
Call executeblock(it, bstack, ss$, False, False)
 MyDoEvents2 bstack.Owner

Set bstack.Owner = scr
bstack.tolayer = W3
bstack.toback = False
If it <> 1 Then
If Trim(ss$) = "" Then ss$ = " "
rest$ = Left$(ss$, Len(ss$) - 1) + frm$: afier = False: Exit Sub
End If

End If
End If

End If

End Sub

Sub SetSizeAndHotSpot(thisbasket As basket, MaxX As Long, MaxY As Long, Optional ByVal HotSpotX = 0, Optional ByVal HotSpotY = 0)
With thisbasket
.MAXXGRAPH = MaxX
.MAXYGRAPH = MaxY
If Not IsMissing(HotSpotX) Then .x = CLng(HotSpotX)  ' this is hotspot
If Not IsMissing(HotSpotY) Then .y = CLng(HotSpotY)
End With
End Sub
Sub FeedBasket(ddd As Object, thisbasket As basket, alinespace As Long)
With thisbasket
.FontName = ddd.FontName
.SZ = ddd.FontSize
.charset = ddd.Font.charset
.MineLineSpace = alinespace
.uMineLineSpace = alinespace
''.Paper = ddd.BackColor
FrameText ddd, .SZ, 0, 0, -.Paper, (ddd.name <> "Form1")

End With
End Sub
Sub PlaceBasketPrive(ddd As Object, thisbasket As basket)
On Error Resume Next
With thisbasket
If Not ddd.FontName = .FontName And ddd.Font.charset = .charset And ddd.FontSize = .SZ Then
ddd.Font.charset = 0
ddd.FontSize = 9
ddd.FontName = .FontName
ddd.Font.charset = .charset
ddd.FontSize = .SZ
End If
' these I have to delete after change
End With
End Sub
Sub PlaceBasket(ddd As Object, thisbasket As basket)
On Error Resume Next
With thisbasket
If Not (ddd.FontName = .FontName And ddd.Font.charset = .charset And ddd.Font.Size = .SZ) Then
Form3.StoreFont .FontName, .SZ, .charset
ddd.Font.charset = 0
ddd.FontSize = 9
ddd.FontName = .FontName
ddd.Font.charset = .charset
ddd.FontSize = .SZ
End If
ddd.ForeColor = .mypen
End With
End Sub
Function GetCode(dq As Object) As Long
Select Case dq.name
Case "DIS"
GetCode = 0
Case "Form1"
GetCode = -1
Case "PrinterDocument1"
GetCode = -2
Case Else
GetCode = Val("0" & Form1.dSprite(dq.Index).Tag) '' so we get logical basket for given player
'' numbers are in priority order
'' we use logical basket because maybe we have 1, 5,28 layer as  2,1,3 dsprites
' so basket(28) is always for sprite 28, but here dSprite(3) is player 28.\
' if we change priority swapping 1 with 28, we have to move 28 before 1, and we change also numbers
' so we use A=1 and B=28, we do Player A swap B and Swap A, B
' So now we address to layer B as 1 and 1 has changed tag to give as the right basket.
' We can insert, say, a 15 layer -or player-, and this get basket 4, so we use another variable K
' We can change priority with swap and we know about it just reading the priority value inside variable
' So player 32 is always the top player
' baskets and priorities..never moved from what actual are
' so if we wait for read something in layer 1, and something move that layer..
' we have only to check if we have the same priority, and if not, we have to change Dq
' or from Vb...is better to read the tag.
End Select
End Function
Sub RepPlain(bstack As basetask, scr As Object, txt$)
Dim prive As Long
prive = GetCode(scr)
If players(prive).curpos > 0 Then crNew bstack, players(prive)
wwPlain bstack, players(prive), txt$, scr.Width, 100000, True
If players(prive).curpos > 0 Then crNew bstack, players(prive)
End Sub
Sub ProcWindow(bstack As basetask, rest$, scr As Object, ifier As Boolean)
Dim x1 As Long, y1 As Long, p As Double


If scr.name = "Form1" Then
    DisableTargets q(), -1
ElseIf scr.name = "DIS" Then
    DisableTargets q(), 0
ElseIf scr.name = "dSprite" Then
    DisableTargets q(), Val(scr.Index)
End If
With players(GetCode(scr))
        If IsExp(bstack, rest$, p) Then
            .SZ = p
            If .SZ < 4 Then .SZ = 4
            If FastSymbol(rest$, ",") Then
                If IsExp(bstack, rest$, p) Then
                    x1 = CLng(p)
                    If x1 = 0 And scr.name = "DIS" Then
                    If Not Form1.WindowState = 0 Then Form1.WindowState = 0: Form1.refresh
                    Form1.Move 0, 0, ScrX(), ScrY()
        
                    FrameText scr, .SZ, CLng(Form1.Width), CLng(Form1.Height), .Paper
                    Exit Sub
        Else
                    y1 = CLng(x1 * ScrY() / ScrX())
        End If
End If
If FastSymbol(rest$, ",") Then If IsExp(bstack, rest$, p) Then y1 = CLng(p)
End If
If scr.name = "dSprite" Then
            RsetRegion scr
            Set scr.Picture = LoadPicture("")
                If FastSymbol(rest$, ";") Then 'CENTER
                            FrameText scr, .SZ, x1, y1, .Paper, True
                            scr.Move (ScrX() - .MAXXGRAPH) / 2, (ScrY() - .MAXYGRAPH) / 2
                Else
                            scr.Move scr.Left, scr.top, x1, y1

                            FrameText scr, .SZ, 0, 0, .Paper, True
                            
                End If
                SetTextSZ scr, .SZ
Else
    If FastSymbol(rest$, ";") Then 'CENTER
        Form1.WindowState = 0

        FrameText scr, .SZ, x1, y1, .Paper
      ''  Form1.Move 0, 0
        Form1.Move (ScrX() - .MAXXGRAPH) / 2, (ScrY() - .MAXYGRAPH) / 2, .MAXXGRAPH, .MAXYGRAPH

        Form1.follow IEX, IEY
        scr.Move 0, 0
        If ttl Then
        If Form3.WindowState = 0 Then Form1.Show , Form5
        Else
        Form1.Show , Form5
        End If
    Else
        Form1.WindowState = 0

        FrameText scr, .SZ, x1, y1, .Paper
        Form1.Move 0, 0, .MAXXGRAPH, .MAXYGRAPH
        Form1.Up
        Form1.follow IEX, IEY
        scr.Move 0, 0
                If ttl Then
        If Form3.WindowState = 0 Then Form1.Show , Form5
        Else
        Form1.Show , Form5
        End If
    End If
End If
Else
ifier = False
Exit Sub
End If
''SleepWait 4
End With
End Sub
Function GetRealPos(dq As Object) As Long
Dim mybasket As basket, oldx
mybasket = players(GetCode(dq))
If mybasket.lastprint Then
oldx = dq.CurrentX
dq.CurrentX = dq.CurrentX + mybasket.Xt - dv15
GetXYb dq, mybasket, mybasket.curpos, mybasket.currow
dq.CurrentX = oldx
End If

 GetRealPos = mybasket.curpos
End Function
Function GetRealRow(dq As Object) As Long
Dim mybasket As basket
mybasket = players(GetCode(dq))
If mybasket.lastprint Then
GetXYb dq, mybasket, mybasket.curpos, mybasket.currow
End If

 GetRealRow = mybasket.currow
End Function

Function Funcweak(basestack As basetask, s$) As String
' no validation of names
' check for "dot"
Dim w As Long, ww$, Original$, s1$, ww1$, p As Double
again:
w = IsLabel(basestack, s$, ww$)
ww1$ = ww$
If w >= 5 Then
s1$ = "&" + ww$ + ")"
w = IsLabel(basestack, s1$, ww$)
If w = 2 Then
' IT IS A FUNCTION
 ww1$ = ww1$ + ")"
GetSubFullName ww1$, ww$
If FastSymbol(s$, ")") Then
If HERE$ = "" Then
Funcweak = ww1$
Else
Funcweak = HERE$ + "." + ww1$
End If
End If
ElseIf w = 0 Then
If ISSTRINGA(s1$, ww$) Then
If FastSymbol(s$, ")") Then
Funcweak = ww$
Else
' check parameters
ww$ = ww$ + "("
Do
If IsExp(basestack, s$, p) Then ww$ = ww$ + CStr(p)
If Not FastSymbol(s$, ",") Then Exit Do
ww$ = ww$ + ","
Loop
If FastSymbol(s$, ")") Then ww$ = ww$ + ")"
If FastSymbol(s$, ".") Then ' ............
End If
Funcweak = ww$
End If
End If
End If
Else
s1$ = "&" + ww$
w = IsLabel(basestack, s1$, ww1$)
If w = 0 Then

If FastSymbol(s1$, ":") Then

GetSubFullName ww$, ww1$
Funcweak = ww1$
Else

If ISSTRINGA(s1$, ww1$) Then
If FastSymbol(s$, ".") Then

If Right$(ww1$, 1) = "$" Then
If IsStrExp(basestack, ww1$, ww$) Then
s$ = ww$ + "." + s$
GoTo again
End If
End If
End If
Funcweak = ww1$
End If
End If
End If
End If

End Function

Function MyRound(ByVal x, Optional d As Double = 0) As Double
Dim I, n
  I = Abs(Int(d)): If I > 13 Then I = 13
  n = Sgn(x) * 0.5

Select Case I
Case 0
MyRound = Fix(x + n)
Case 1
MyRound = Fix(x * 10# + n) / 10#
Case 2
MyRound = Fix(x * 100# + n) / 100#
Case 3
MyRound = Fix(x * 1000# + n) / 1000#
Case 4
MyRound = Fix(x * 10000# + n) / 10000#
Case 5
MyRound = Fix(x * 100000# + n) / 100000#
Case 6
MyRound = Fix(x * 1000000# + n) / 1000000#
Case 7
MyRound = Fix(x * 10000000# + n) / 10000000#
Case 8
MyRound = Fix(x * 100000000# + n) / 100000000#
Case 9
MyRound = Fix(x * 1000000000# + n) / 1000000000#
Case 10
MyRound = Fix(x * 10000000000# + n) / 10000000000#
Case 11
MyRound = Fix(x * 100000000000# + n) / 100000000000#
Case 12
MyRound = Fix(x * 1000000000000# + n) / 1000000000000#
Case 13
MyRound = Fix(x * 10000000000000# + n) / 10000000000000#
End Select
End Function

Function AllocVar()
var2used = var2used + 1
  If UBound(var()) <= var2used Then
        On Error Resume Next

            ReDim Preserve var(UBound(var()) * 2 + 1) As Variant
            If Err.Number > 0 Then
            NOEXECUTION = True
            MyEr Err.Description, Err.Description
            Err.clear
            Exit Function
            End If
            
        End If
       AllocVar = var2used
End Function
Function AllocSub() As Long
    On Error Resume Next
    If UBound(sbf()) <= sb2used + 1 Then
    ReDim Preserve sbf(UBound(sbf()) * 2 + 1) As modfun
    End If
    sb2used = sb2used + 1
    AllocSub = sb2used
End Function

